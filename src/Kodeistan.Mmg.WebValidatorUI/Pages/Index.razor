@page "/"

<h1>Message Validator</h1>

<p>
    This app is designed to validate NNDSS HL7 v2.5.1 messages against messaging, vocabulary, and programmatic standards.
</p>

<EditForm Model="@messageFormResponse" OnValidSubmit="Validate">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="hl7message">HL7 v2.5.1 (ORU_R01) message to validate:</label>

        <InputTextArea spellcheck="false"
                       class="form-control"
                       id="hl7message"
                       style="font-family: 'Roboto Mono', monospace;"
                       rows="20"
                       cols="80"
                       @bind-Value="messageFormResponse.Content">

        </InputTextArea>

    </div>
    <button type="submit" class="btn btn-primary">Validate</button>

</EditForm>

@if (hasRun)
{
    <div style="margin-top: 20px;"></div>

    string divClass = "alert alert-success";

    if (validationResult.IsSuccess == false)
    {
        divClass = "alert alert-danger";
    }
    else
    {
        
    }

<div class="@divClass" role="alert">

    @if (validationResult.IsSuccess)
    {
        <p><span class="oi oi-check" aria-hidden="true"></span> Passed validation with @validationResult.Warnings.ToString() warning(s)</p>
    }
    else
    {
        <p><span class="oi oi-x" aria-hidden="true"></span> Failed validation with @validationResult.Errors.ToString() error(s)</p>
    }

    <hr />
    <ul>
        <li>Validation CPU time: @validationResult.Elapsed.TotalMilliseconds.ToString("N0") ms</li>
        <li>Profile: @validationResult.Profile</li>
        <li>Condition: @validationResult.Condition (@validationResult.ConditionCode)</li>
        <li>Reporting jurisdiction: @validationResult.NationalReportingJurisdiction</li>
        <li>Local record ID: @validationResult.LocalRecordId</li>
        <li>Date/time of this validation: @validationResult.Created.ToString("yyyy-MM-dd h:mm tt")</li>
        <li>Date/time of message transmission: @validationResult.MessageCreated.ToString("yyyy-MM-dd h:mm tt")</li>
    </ul>
</div>

    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">Code</th>
                <th scope="col">Severity</th>
                <th scope="col">Type</th>
                <th scope="col">Location 1</th>
                <th scope="col">Location 2</th>
                <th scope="col">Content</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < validationResult.ValidationMessages.Count; i++)
            {
                var message = validationResult.ValidationMessages[i];

                var trClass = "table-danger";

                if (message.Severity == Severity.Error)
                {
                    trClass = "table-danger";
                }
                else if (message.Severity == Severity.Warning)
                {
                    trClass = "table-warning";
                }

            <tr class="@trClass">
                <th scope="row">@(i+1)</th>
                <td>@message.ErrorCode</td>
                <td>
                    @message.Severity
                </td>
                <td>@message.MessageType</td>
                <td>@message.Path</td>
                <td>@message.PathAlternate</td>
                <td>@message.Content</td>
            </tr>
            }
        </tbody>
    </table>

    <div style="margin-top: 20px;"></div>
}

@code {

    private readonly Kodeistan.Mmg.Validator _validator = new Kodeistan.Mmg.Validator(new Kodeistan.Mmg.Services.InMemoryVocabularyService(), new Kodeistan.Mmg.Services.InMemoryMmgService());

    private MessageForm messageFormResponse = new MessageForm();
    private Kodeistan.Mmg.ValidationResult validationResult = new ValidationResult();
    private bool hasRun = false;

    private void Validate()
    {
        validationResult = _validator.ValidateMessage(messageFormResponse.Content);
        hasRun = true;
    }
}
