using Kodeistan.Mmg.Model;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;

namespace Kodeistan.Mmg.Services
{
    public class InMemoryMmgService : IMmgService
    {
        public MessageMappingGuide Get(string profileIdentifier)
        {
            var sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            string mmgJsonString = GetMmg(profileIdentifier);

            MessageMappingGuide mmg = JsonConvert.DeserializeObject<MessageMappingGuide>(mmgJsonString);

            sw.Stop();

            return mmg;
        }

        private string GetMmg(string profileIdentifier)
        {
            var content = profileIdentifier switch
            {
                string mmg when mmg.Contains("Pertussis_MMG") => "{
    "id": "d5e61fc9-6b43-40a2-9215-9a733622a668",
    "type": "Guide",
    "guideStatus": "UserAcceptanceTesting",
    "name": "Pertussis",
    "shortName": "",
    "description": "The pertussis case notification MMG v1 is a specification for a unified message. This guide, in combination with the generic individual case notification MMG v2, describes the content (i.e., data elements and valid values) of HL7 case notification messages and the instructions for using the message mapping specification (see References section) in order to submit HL7 case notifications for pertussis to the Centers for Disease Control and Prevention (CDC).\n\nThis pertussis case notification MMG v1 needs to be used in conjunction with generic individual Case notification MMG v2 to construct a complete case notification message for nationally notifiable diseases and conditions with disease-specific data elements.\n\nThe intended audiences for this document are the state/local health departments, CDC programs and other public health-related organizations interested in using the HL7 V2.5.1 case notification message specification for transmitting their data elements to CDC.",
    "isActive": true,
    "createdBy": "f7b98a2a-84dc-4209-9cc6-f9277953dfb3",
    "ownedBy": "12d27d38-ee1d-4858-ba74-8f5c4e7871dd",
    "internalVersion": 23,
    "createdDate": "2018-02-05T19:32:11.150204+00:00",
    "lastUpdatedDate": "2020-03-19T01:13:41.9358326+00:00",
    "publishVersion": "",
    "profileIdentifier": "Pertussis_MMG_V1.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO",
    "blocks": [
      {
        "id": "5ba813c4-3c27-451d-83af-d8881953588a",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 1,
        "type": "Single",
        "name": "Message Header",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": false,
        "elements": [
          {
            "id": "2e8bec8d-942e-4c78-affb-f5fe720f068c",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 5,
            "blockId": "ba72c3e2-1baa-4aaa-a9b8-6e27ee69649f",
            "ordinal": 1,
            "name": "Message Profile Identifier",
            "description": "Message Profile Identifiers provide a literal value to use for the references in MSH-21.  MSH-21 will always contain a reference to the notification type in the \"PHINProfileID\" namespace and a reference to the implemented version of the Generic MMG in the \"PHINMsgMapID\" namespace.  For conditions that have a condition-specific MMG, MSH-21 will also contain a reference to that MMG that is also in the \"PHINMsgMapID\" namespace.  ",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "U",
            "isRepeat": true,
            "repetitions": 3,
            "mayRepeat": "Y/3",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT115",
                "identifier": "N/A: MSH-21",
                "messageContext": "MSH-21",
                "dataType": "EI",
                "segmentType": "MSH",
                "obrPosition": 1,
                "fieldPosition": 21,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[3..3]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "CONFORMANCE STATEMENT: Message Profile ID (MSH-21) for this version of the MMG SHALL contain the literal value: ‘NOTF_ORU_v3.0^PHINProfileID^2.16.840.1.114222.4.10.3^ISO~Generic_MMG_V2.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO~Pertussis_MMG_V1.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO'\n\nRefer to Conformance Statement CN-009 and CN-010 in the National Condition Reporting Case Notification Message Structure Specification\\Profile Version 3.0.",
                "sampleSegment": "MSH|^~\\&|SendAppName^2.16.840.1.114222.TBD^ISO|Sending-Facility^2.16.840.1.114222.TBD^ISO|PHINCDS^2.16.840.1.114222.4.3.2.10^ISO|PHIN^2.16.840.1.114222^ISO|20140630120030.1234-0500||ORU^R01^ORU_R01|MESSAGE CONTROL ID|D|2.5.1|||||||||NOTF_ORU_v3.0^PHINProfileID^2.16.840.1.114222.4.10.3^ISO~Generic_MMG_V2.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO~Pertussis_MMG_V1.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO"
              }
            },
            "defaultValue": {
              "value": "Pertussis_MMG_V1.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO"
            }
          }
        ]
      },
      {
        "id": "280026b5-43c5-4173-9c62-41aba6d57057",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 2,
        "type": "Single",
        "name": "Subject Related",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "df2f791b-5189-404e-972d-01c513ec8f66",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 1,
            "name": "Local Subject ID",
            "description": "The local ID of the subject/entity",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM197",
                "identifier": "N/A: PID-3",
                "messageContext": "PID-3\nPatient Identifier List",
                "dataType": "CX",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 3,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "PID-3.1\nID Number is the local Subject ID from the sending system's internally assigned Subject ID; \n\nPID-3.4\nAssigning Authority format <localID&OID&ISO>  \n\nDoes not pass Variable ID  or label.",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppNamelocalID&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "GenV2_TC01"
            }
          },
          {
            "id": "918225f5-4ffd-47a1-b7b1-27635f5429f6",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 2,
            "name": "Birth Date",
            "description": "Patient’s date of birth",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM115",
                "identifier": "N/A: PID-7",
                "messageContext": "PID-7\nDate/Time of Birth",
                "dataType": "TS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 7,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, PID-7 MAY be populated with '99999999'",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "19640502"
            }
          },
          {
            "id": "e233acfc-301a-4293-a2c8-06002a77f3a3",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 3,
            "name": "Subject’s Sex",
            "description": "Subject’s current sex",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Sex_MFU",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM113",
                "identifier": "N/A: PID-8",
                "messageContext": "PID-8\nAdministrative Sex",
                "dataType": "IS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 8,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "F"
            }
          },
          {
            "id": "18a43f2c-ff15-406b-b9e1-afd8df5239ef",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 4,
            "name": "Race Category",
            "description": "Race category - Major OMB Race Categories. Detailed race information would be rolled up to these major OMB race categories.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": true,
            "mayRepeat": "Y",
            "valueSetCode": "PHVS_RaceCategory_CDC_NullFlavor",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM152",
                "identifier": "N/A: PID-10",
                "messageContext": "PID-10\nRace",
                "dataType": "CE",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 10,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..*]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "2106-3"
            }
          },
          {
            "id": "13a244d2-8c20-4ddf-9a6c-a81f3ca4046a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 5,
            "name": "Other Race Text",
            "description": "Other Race Text",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM154",
                "identifier": "32624-9",
                "messageContext": "OBX segment with \nOBX-3.1=32624-9\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|ST|32624-9^Other Race Text^LN||Place details Other Race here ||||||F"
              }
            },
            "defaultValue": {
              "value": "Apache"
            }
          },
          {
            "id": "7d65fc52-7022-4857-a2af-cfa0eb685b3e",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 6,
            "name": "Ethnic Group",
            "description": "Based on the self-identity of the subject as Hispanic or Latino",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_EthnicityGroup_CDC_Unk",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM155",
                "identifier": "N/A: PID-22",
                "messageContext": "PID-22\nEthnic Group",
                "dataType": "CE",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 22,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "2135-2"
            }
          },
          {
            "id": "8fbdd55e-b971-465a-8df9-fea6a2df1c5f",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 7,
            "name": "Country of Birth",
            "description": "Country of Birth",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_BirthCountry_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM126",
                "identifier": "78746-5",
                "messageContext": "OBX segment with \nOBX-3.1=78746-5\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|CWE|78746-5^Country of Birth^LN||USA^United States^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "UZB"
            }
          },
          {
            "id": "dd308509-acc9-4fc5-b9ed-d31b8770285f",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 8,
            "name": "Other Birth Place",
            "description": "Other Birth Place",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM304",
                "identifier": "21842-0",
                "messageContext": "OBX segment with \nOBX-3.1=21842-0\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|ST|21842-0^Other Birth Place^LN||Place details about Other Birth Place here||||||F"
              }
            },
            "defaultValue": {
              "value": "USSR"
            }
          },
          {
            "id": "07eac6c3-948b-49ae-9050-5e5373749b3a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 9,
            "name": "Country of Usual Residence",
            "description": "Where does the person usually live (defined as their residence).\n\nThis variable replaces the Foreign Resident variable mentioned in 11-SI-04 titled \"Revised Guidelines for Determining Residency for Disease Reporting\" located at http://c.ymcdn.com/sites/www.cste.org/resource/resmgr/PS/11-SI-04.pdf.\n\nCases with country of usual residence equal to the US, Puerto Rico, and US Virgin Islands as well as unknown and null responses will be included in the state-specific counts and rates.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Country_ISO_3166-1",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV501",
                "identifier": "77983-5",
                "messageContext": "OBX segment with\nOBX-3.1=77983-5\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|2|CWE|77983-5^Country of Usual Residence^LN||USA^UNITED STATES^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "USA"
            }
          },
          {
            "id": "457353eb-9da7-469d-b91b-e969b5f64492",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 10,
            "name": "Subject Address County",
            "description": "County of residence of the subject",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_County_FIPS_6-4",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM165",
                "identifier": "N/A: PID-11.9",
                "messageContext": "PID-11.9\nPatient Address  - County",
                "dataType": "IS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 9,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "The entire address construct (PID-11) may repeat per HL7, but only expecting the first instance to be populated and parsed.\n\nAddress county will be used in the annual summary and  it needs to be populated",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "48201"
            }
          },
          {
            "id": "c5b828bf-ee57-4ac1-bf66-fc71a7bd28b9",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 11,
            "name": "Subject Address State",
            "description": "State of residence of the subject",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_State_FIPS_5-2",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM162",
                "identifier": "N/A: PID-11.4",
                "messageContext": "PID-11.4\nPatient Address  - State=value from value set",
                "dataType": "ST",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 4,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "The entire address construct (PID-11) may repeat per HL7, but only expecting the first instance to be populated and parsed.",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "a779a11d-ad38-4bd4-bbdb-1555514b9fc4",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 12,
            "name": "Subject Address ZIP Code",
            "description": "ZIP Code of residence of the subject",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM163",
                "identifier": "N/A: PID-11.5",
                "messageContext": "PID-11.5\nPatient Address  - Postal Code=string up to 12 characters",
                "dataType": "ST",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 5,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "The entire address construct (PID-11) may repeat per HL7, but only expecting the first instance to be populated and parsed.",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "77018"
            }
          }
        ]
      },
      {
        "id": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 3,
        "type": "Single",
        "name": "Case Related",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "9928d4d6-eea0-4e3f-9e06-85cfb2c3199a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 1,
            "name": "Date of Illness Onset",
            "description": "Date of the beginning of the illness.  Reported date of the onset of symptoms of the condition being reported to the public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV137",
                "identifier": "11368-8",
                "messageContext": "OBX segment with \nOBX-3.1=11368-8\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|1|TS|11368-8^Date of Illness Onset^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140224"
            }
          },
          {
            "id": "93942d4e-63ec-46a6-a5cd-1e71d976d90d",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 2,
            "name": "Illness End Date",
            "description": "Date at which the disease or condition ends.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV138",
                "identifier": "77976-9",
                "messageContext": "OBX segment with \nOBX-3.1=77976-9\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|2|TS|77976-9^Illness End Date^LN||20140413||||||F"
              }
            },
            "defaultValue": {
              "value": "20140302"
            }
          },
          {
            "id": "1334f3fc-a02a-47b3-92d4-63153b11dd64",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 3,
            "name": "Illness Duration",
            "description": "Length of time this subject had this disease or condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV139",
                "identifier": "77977-7",
                "messageContext": "OBX segment with \nOBX-3.1=77977-7\nOBX-5.2=numeric value\nOBX-6=units value from INV140 value set;",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|3|SN|77977-7-7^Illness Duration^LN||^12|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "6"
            }
          },
          {
            "id": "abd9a2fc-03ad-418b-9819-6bedc955dbaa",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 4,
            "name": "Illness Duration Units",
            "description": "Unit of time used to describe the length of the illness or condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "relatedElementId": "1334f3fc-a02a-47b3-92d4-63153b11dd64",
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_DurationUnit_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV140",
                "identifier": "N/A: OBX-6",
                "messageContext": "OBX-6-Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Part of the INV139 Observation/OBX Segment.",
                "sampleSegment": "OBX|3|SN|77977-7^Illness Duration^LN||^12|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "d"
            }
          },
          {
            "id": "f3722238-af5e-4346-907d-736edaa47863",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 5,
            "name": "Pregnancy Status",
            "description": "Indicates whether the subject was pregnant at the time of the event.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV178",
                "identifier": "77996-7",
                "messageContext": "OBX segment with \nOBX-3.1=77996-7\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|4|CWE|77996-7^Pregnancy Status^LN||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "4018be44-a07b-47fc-a422-3b41cf59d670",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 6,
            "name": "Diagnosis Date",
            "description": "Earliest date of diagnosis (clinical or laboratory) of condition being reported to public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV136",
                "identifier": "77975-1",
                "messageContext": "OBX segment with \nOBX-3.1=77975-1\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|5|TS|77975-1^Diagnosis Date^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "bc126dea-f2d7-4c00-9e6e-a92e240e1ae8",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 7,
            "name": "Hospitalized",
            "description": "Was subject hospitalized because of this event?",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV128",
                "identifier": "77974-4",
                "messageContext": "OBX segment with \nOBX-3.1=77974-4\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|6|CWE|77974-4^Hospitalized^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "4283972a-8ac7-4c88-8cb6-cbe3057b8bc7",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 8,
            "name": "Admission Date",
            "description": "Subject’s most recent admission date to the hospital for the condition covered by the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV132",
                "identifier": "8656-1",
                "messageContext": "OBX segment with \nOBX-3.1=8656-1\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Use the most recent admission, in association with this instance of the case.",
                "sampleSegment": "OBX|7|TS|8656-1^Admission Date^LN||20131230||||||F"
              }
            },
            "defaultValue": {
              "value": "20140226"
            }
          },
          {
            "id": "e29fcb10-851e-4643-a447-c90e9a27bb8a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 9,
            "name": "Discharge Date",
            "description": "Subject's most recent discharge date from the hospital for the condition covered by the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV133",
                "identifier": "8649-6",
                "messageContext": "OBX segment with \nOBX-3.1=8649-6\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Use the most recent discharge, related to the admission represented by variable INV132.",
                "sampleSegment": "OBX|8|TS|8649-6^Discharge Date^LN||20140104||||||F"
              }
            },
            "defaultValue": {
              "value": "20140302"
            }
          },
          {
            "id": "1514b03e-e4fb-42f1-b63a-4e6add08d7c6",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 10,
            "name": "Duration of Hospital Stay in Days",
            "description": "Subject's duration of stay at the hospital for the condition covered by the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV134",
                "identifier": "78033-8",
                "messageContext": "OBX segment with \nOBX-3.1=78033-8\nOBX-5.2=numeric value",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Populate OBX-6 with d^day^UCUM.",
                "sampleSegment": "OBX|9|SN|78033-8^Duration of hospital stay in days^LN||^5|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "4"
            }
          },
          {
            "id": "2383f96f-098a-4af3-9ada-f6c6aab923af",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 11,
            "name": "Subject Died",
            "description": "Did the subject die from this illness or complications of this illness?",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV145",
                "identifier": "77978-5",
                "messageContext": "OBX segment with \nOBX-3.1=77978-5\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|10|CWE|77978-5^Subject Died^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "827d2f8f-eec9-49f0-9265-0fc681f120b5",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 12,
            "name": "Deceased Date",
            "description": "If the subject died from this illness or complications associated with this illness, indicate the date of death.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV146",
                "identifier": "N/A: PID-29",
                "messageContext": "PID-29 Patient Death Date and Time",
                "dataType": "TS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 29,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID -29 Sample Segment :\n\nPID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC|||||||20"
              }
            },
            "defaultValue": {
              "value": "20140302"
            }
          },
          {
            "id": "c30ce921-63d7-4981-833b-5b5c99c51bb3",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 13,
            "name": "Condition Code",
            "description": "Condition or event that constitutes the reason the notification is being sent.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "N/A",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV169",
                "identifier": "N/A: OBR-31",
                "messageContext": "OBR-31 Reason for Study in the OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
                "dataType": "CE",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 31,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Refer to the Event Code List of Nationally Notifiable Diseases and Other Conditions of Public Health Importance document for the relevant MMWR year.\n\nThis references can be found on the NNDSS Messaging Mapping Guide web site: http://wwwn.cdc.gov/nndss/mes",
                "sampleSegment": "OBR|1|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|68991-9^Epidemiologic Information^LN|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "11550"
            }
          },
          {
            "id": "6665e1dc-de3d-4e98-a4cc-cb26c4289a2e",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 14,
            "name": "Local Record ID",
            "description": "Sending system-assigned local ID of the case investigation with which the subject is associated.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV168",
                "identifier": "N/A: OBR-3",
                "messageContext": "OBR-3\nFiller Order Number  in the OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
                "dataType": "EI",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 3,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "OBR-3.1 is the internally assigned case/investigation ID.\n\nOBR-3.3 is the OID for sending application as assigning authority.\n\nOBR-3.4 is the literal value: 'ISO'.\n\nNational reporting jurisdiction (77968-6) and Local Record ID (INV168 in OBR-3) are used together to define a unique case in the CDC database.  The values for each of these data elements must remain the same when sending updates on a unique case.  Any changes to these data elements will cause the addition of a new case to the CDC database.  For more details, refer to the document on the MMG web site: http://wwwn.cdc.gov/nndss/document/Generic_Data_Elements_that_Define_a_Unique_Case.docx",
                "sampleSegment": "OBR|2|\"\"|CASE/Investigation ID^SendAppName^2.16.840.1.114222.TBD^ISO|EPIINFO^Epidemiologic Information^CDCPHINVS|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "GenV2_TC01"
            }
          },
          {
            "id": "313e6282-fa94-43d7-b276-0c9e29f9c091",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 15,
            "name": "State Case Identifier",
            "description": "States use this identifier to link NEDSS investigations back to their own state investigations.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV173",
                "identifier": "77993-4",
                "messageContext": "OBX segment with \nOBX-3.1=77993-4\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|ST|77993-4^State Case Identifier^LN||2014IN100000001||||||F"
              }
            },
            "defaultValue": {
              "value": "TX4321"
            }
          },
          {
            "id": "17c8098b-0945-4a20-ae3a-0b608964b98c",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 16,
            "name": "Legacy Case Identifier",
            "description": "CDC uses this identifier to link current case notifications to case notifications submitted by a previous system (NETSS, STD-MIS, etc.).",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV200",
                "identifier": "77997-5",
                "messageContext": "OBX segment with \nOBX-3.1=77997-5\nOBX-5=Legacy Case Identifier",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For a NETSS case ID, please use the following format:  \nCase ID(6) - State(2) - Site(3) - Year(4)\ne.g.,  CaseId01LAB2009.",
                "sampleSegment": "OBX|2|ST|77997-5^Legacy Case Identifier^LN||61528936181002006||||||F"
              }
            },
            "defaultValue": {
              "value": "48432148S012014"
            }
          },
          {
            "id": "b0fa71f1-71c0-4ecb-b2ea-7432f5890ba5",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 17,
            "name": "Age at Case Investigation",
            "description": "Subject age at time of case investigation",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV2001",
                "identifier": "77998-3",
                "messageContext": "OBX segment with \nOBX-3.1=77998-3\nOBX-5.2=numeric value\nOBX-6=units value from INV2002 value set;",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "AGE should populate the second component of the OBX.5 field.  In HL7, components are typically separated by the character ‘^’ (Caret).\n\nOBX-5.2 will contain '9999' for unknown Age at case investigation.",
                "sampleSegment": "OBX|3|SN|77998-3^Age at Case investigation^LN||^51|a^year^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "49"
            }
          },
          {
            "id": "6a1a06f1-e752-4f67-948c-851160d9f374",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 18,
            "name": "Age Unit at Case Investigation",
            "description": "Subject age unit at time of case investigation",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "relatedElementId": "b0fa71f1-71c0-4ecb-b2ea-7432f5890ba5",
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_AgeUnit_UCUM",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV2002",
                "identifier": "N/A: OBX-6",
                "messageContext": "OBX-6-Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Part of the INV2001 Observation/OBX Segment.",
                "sampleSegment": "OBX|3|SN|77998-3^Age at Case investigation^LN||^51|a^year^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "a"
            }
          },
          {
            "id": "55dd0919-8991-47cd-a946-788634c1d4a9",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 19,
            "name": "Case Disease Imported Code",
            "description": "Indication of where the disease/condition was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_DiseaseAcquiredJurisdiction_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV152",
                "identifier": "77982-7",
                "messageContext": "OBX segment with \nOBX-3.1=77982-7\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|4|CWE|77982-7^Case Disease Imported Code^LN||PHC246^Out of State^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC246"
            }
          },
          {
            "id": "7d1a4941-6a05-45b7-a671-74ea67a1b1d1",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 20,
            "name": "Imported Country",
            "description": "If the disease or condition was imported, indicates the country in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Country_ISO_3166-1",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV153",
                "identifier": "INV153",
                "messageContext": "OBX segment with \nOBX-3.1=INV153\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Three-letter country code",
                "sampleSegment": "OBX|5|CWE|INV153^Imported Country^PHINQUESTION||MEX^Mexico^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "USA"
            }
          },
          {
            "id": "1863f6dd-d646-47d5-b886-9080a8cfabc0",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 21,
            "name": "Imported State",
            "description": "If the disease or condition was imported, indicates the state in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_State_FIPS_5-2",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV154",
                "identifier": "INV154",
                "messageContext": "OBX segment with \nOBX-3.1=INV154\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Two-digit numeric FIPS code",
                "sampleSegment": "OBX|6|CWE|INV154^Imported State^PHINQUESTION||48^Texas^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "04"
            }
          },
          {
            "id": "d692f87d-4095-4777-bafb-7049cdc80d07",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 22,
            "name": "Imported City",
            "description": "If the disease or condition was imported, indicates the city in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_City_USGS_GNIS",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV155",
                "identifier": "INV155",
                "messageContext": "OBX segment with \nOBX-3.1=INV155\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "One-to-ten digit numeric GNIS Feature ID",
                "sampleSegment": "OBX|7|CWE|INV155^Imported City^PHINQUESTION||1350851^Abernathy^USGSGNIS||||||F"
              }
            },
            "defaultValue": {
              "value": "",
              "label": "Houston, TX, Harris"
            }
          },
          {
            "id": "bf98da0d-48ef-4bcb-aacc-e3f2a43ab276",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 23,
            "name": "Imported County",
            "description": "If the disease or condition was imported, contains the county of origin of the disease or condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_County_FIPS_6-4",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV156",
                "identifier": "INV156",
                "messageContext": "OBX segment with \nOBX-3.1=INV156\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Five-digit numeric FIPS code",
                "sampleSegment": "OBX|8|CWE|INV156^Imported County^PHINQUESTION||48303^Lubbock, TX^FIPS6_4||||||F"
              }
            },
            "defaultValue": {
              "value": "",
              "label": "Harris, TX"
            }
          }
        ]
      },
      {
        "id": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 4,
        "type": "Repeat",
        "name": "Repeating Variables for Disease Exposure",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "2cc47e98-8212-4ef1-948a-1e2fcf7309ca",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 1,
            "name": "Country of Exposure",
            "description": "Indicates the country in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Country_ISO_3166-1",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV502",
                "identifier": "77984-3",
                "messageContext": "OBX segment with \nOBX-3.1=77984-3\nOBX-4=obs sub-ID\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV153 (Imported Country) with INV502 (Country of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported fields for reports and publications.",
                "sampleSegment": "OBX|9|CWE|77984-3^Country of Exposure^LN|1|USA^United States^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "USA"
            }
          },
          {
            "id": "cd308f98-95c1-4d93-a9bd-52335c3d3486",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 2,
            "name": "State or Province of Exposure",
            "description": "Indicates the state (or Province) in which the disease was likely acquired.\n\nNote: If Country of exposure was US, populate with US State. If Country of exposure was Mexico, populate with Mexican State. If country of exposure was Canada, populated with Canadian Province. For all other countries, leave null.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_StateProvinceOfExposure_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV503",
                "identifier": "77985-0",
                "messageContext": "OBX segment with\nOBX-3.1=77985-0\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV154 (Imported State) with INV503 (State or Province of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace the imported field or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported fields for reports and publications.",
                "sampleSegment": "OBX|10|CWE|77985-0^State or Province of Exposure^LN|1|06^California^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "40e12cd8-156e-4205-9073-173bce6aef74",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 3,
            "name": "City of Exposure",
            "description": "Indicates the city in which the disease was likely acquired\n\nNote: If country of exposure is US, populate with US city. For all other cities, can be populated but not required.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV504",
                "identifier": "77986-8",
                "messageContext": "OBX segment with \nOBX-3.1=77986-8\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV155 (Imported City) with INV504 (City of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported field for reports and publications.",
                "sampleSegment": "OBX|11|ST|77986-8^City of Exposure^LN|1|Pasadena||||||F"
              }
            },
            "defaultValue": {
              "value": "Houston"
            }
          },
          {
            "id": "7cbc5158-8d8e-4a07-92d8-81186115b0b1",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 4,
            "name": "County of Exposure",
            "description": "Indicates the county in which the disease was likely acquired\n\nNote: If country of exposure is US, populate with US county.  Otherwise, leave null.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV505",
                "identifier": "77987-6",
                "messageContext": "OBX segment with \nOBX-3.1=77987-6\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV156 (Imported County) with INV505 (County of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported field for reports and publications.",
                "sampleSegment": "OBX|12|ST|77987-6^County of Exposure^LN|1|Los Angeles||||||F"
              }
            },
            "defaultValue": {
              "value": "Harris"
            }
          }
        ]
      },
      {
        "id": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 5,
        "type": "Single",
        "name": "Misc",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "47253d49-9f33-4574-97d4-734e1a646371",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 1,
            "name": "Transmission Mode",
            "description": "Code for the mechanism by which disease or condition was acquired by the subject of the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_CaseTransmissionMode_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV157",
                "identifier": "77989-2",
                "messageContext": "OBX segment with \nOBX-3.1=77989-2\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|13|CWE|77989-2^Transmission Mode^LN||420014008^Bloodborne Transmission^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "416086007"
            }
          },
          {
            "id": "85a02430-b77d-4027-8a97-20895cd61c55",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 2,
            "name": "Case Class Status Code",
            "description": "Status of the case/event as suspect, probable, confirmed, or not a case per CSTE/CDC/ surveillance case definitions.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_CaseClassStatus_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV163",
                "identifier": "77990-0",
                "messageContext": "OBX segment with \nOBX-3.1=77990-0\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|14|CWE|77990-0^Case Class Status Code^LN||410605003^Confirmed Present^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "410605003"
            }
          },
          {
            "id": "074a0eae-f5cb-4db7-84be-d855b1108675",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 3,
            "name": "Immediate National Notifiable Condition",
            "description": "Does this case meet the criteria for immediate (extremely urgent or urgent) notification to CDC? Refer to the 2015 list of NNC by type of notification category (extremely urgent, urgent, and standard) at the following link: http://wwwn.cdc.gov/nndss/document/NNC_2015_Notification_Requirements_By_Category.pdf",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT120",
                "identifier": "77965-2",
                "messageContext": "OBX segment with \nOBX-3.1=77965-2\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "If Immediate National Notifiable Condition = 'Y' (meaning the condition is immediately nationally notifiable), populate OBX.5 with 'Y^Yes^HL70136'.\n\nIf Immediate National Notifiable Condition= 'N' (meaning it is NOT immediately nationally notifiable), populate OBX.5 with 'N^No^HL70136'.\n\nIf Immediate National Notifiable Condition = 'U' (meaning it is not known whether the condition is immediately nationally notifiable or not), populate OBX.5 with 'UNK^Unknown^NULLFL'.",
                "sampleSegment": "OBX|15|CWE|77965-2^Immediate National Notifiable Condition^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "dfa5ee59-5af5-4c65-9f23-54c69b7ab086",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 4,
            "name": "Case Outbreak Indicator",
            "description": "Denotes whether the reported case was associated with an identified outbreak.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV150",
                "identifier": "77980-1",
                "messageContext": "OBX segment with \nOBX-3.1=77980-1\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|16|CWE|77980-1^Case Outbreak Indicator^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "b990f6de-497d-4ffb-89a4-e786075421d4",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 5,
            "name": "Case Outbreak Name",
            "description": "A state-assigned name for an identified outbreak.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV151",
                "identifier": "77981-9",
                "messageContext": "OBX segment with \nOBX-3.1=77981-9\nOBX-5=Case Outbreak Name (up to 199 characters)",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Note: that this is a locally-defined field.",
                "sampleSegment": "OBX|17|ST|77981-9^Case Outbreak Name^LN||HANSENOUTB1||||||F"
              }
            },
            "defaultValue": {
              "value": "HANSENOUTB1"
            }
          },
          {
            "id": "8b866406-5cad-4586-9284-7c0b7537e246",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 6,
            "name": "Notification Result Status",
            "description": "Status of the notification",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_ResultStatus_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT118",
                "identifier": "N/A: OBR-25",
                "messageContext": "OBR-25\nResult Status in the OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
                "dataType": "ID",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 25,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBR|2|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|EPIINFO^Epidemiologic Information^CDCPHINVS|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "F"
            }
          },
          {
            "id": "5f37a5f6-092e-4911-bcc2-f4016bd5908e",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 7,
            "name": "Jurisdiction Code",
            "description": "Identifier for the physical site from which the notification is being submitted.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV107",
                "identifier": "77969-4",
                "messageContext": "OBX segment with \nOBX-3.1=77969-4\nOBX-5=Jurisdiction (up to 199 characters)",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Note: that this is a locally-defined field",
                "sampleSegment": "OBX|18|ST|77969-4^Jurisdiction Code^LN||18||||||F"
              }
            },
            "defaultValue": {
              "value": "S01"
            }
          },
          {
            "id": "c5d4d7a0-123e-4718-835e-1ae09039f43a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 8,
            "name": "Reporting Source Type Code",
            "description": "Type of facility or provider associated with the source of information sent to Public Health.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_ReportingSourceType_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV112",
                "identifier": "48766-0",
                "messageContext": "OBX segment with \nOBX-3.1=48766-0\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|19|CWE|48766-0^Reporting Source Type Code^LN||1^Hospital^HL70406||||||F"
              }
            },
            "defaultValue": {
              "value": "1"
            }
          },
          {
            "id": "2559754c-ef80-4381-a94d-e906314a63e9",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 9,
            "name": "Reporting Source ZIP Code",
            "description": "ZIP Code of the reporting source for this case.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV118",
                "identifier": "52831-5",
                "messageContext": "OBX segment with \nOBX-3.1=52831-5\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|20|ST|52831-5^Reporting Source Zip Code^LN||47635||||||F"
              }
            },
            "defaultValue": {
              "value": "77018"
            }
          },
          {
            "id": "8f782b26-1227-4505-8e42-8be9e3d44aea",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 10,
            "name": "Binational Reporting Criteria",
            "description": "For cases meeting the binational criteria, select all the criteria which are met.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": true,
            "mayRepeat": "Y",
            "valueSetCode": "PHVS_BinationalReportingCriteria_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV515",
                "identifier": "77988-4",
                "messageContext": "OBX segment with \nOBX-3.1=77988-4\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..*]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|21|CWE|77988-4^Binational Reporting Criteria^LN||PHC1140^Exposure to a suspected product from Mexico or Canada^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC1140"
            }
          },
          {
            "id": "d219d4e1-a3fa-4689-8dc6-8545742643b1",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 11,
            "name": "Person Reporting to CDC - Name",
            "description": "Name of the person who is reporting the case to the CDC.  This is the person that CDC should contact in a state if there are questions regarding this case notification.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV190",
                "identifier": "74549-7",
                "messageContext": "OBX segment with \nOBX-3.1=74549-7\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|22|ST|74549-7^Person Reporting to CDC - Name^LN||Smith, John||||||F"
              }
            },
            "defaultValue": {
              "value": "Smith, John"
            }
          },
          {
            "id": "187044c2-c2a0-4c20-9a02-79b3b114968b",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 12,
            "name": "Person Reporting to CDC - Phone Number",
            "description": "Phone Number of the person who is reporting the case to the CDC.  This is the person that CDC should contact in a state if there are questions regarding this case notification.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV191",
                "identifier": "74548-9",
                "messageContext": "OBX segment with \nOBX-3.1=74548-9\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|23|ST|74548-9^Person Reporting to CDC-Phone Number^LN||(734)677-7777||||||F"
              }
            },
            "defaultValue": {
              "value": "444-321-1234"
            }
          },
          {
            "id": "04514ba0-4f17-4822-96ec-d07d0f97bf90",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 13,
            "name": "Person Reporting to CDC - Email",
            "description": "Email Address of the person reporting the case to the CDC. This is the person that CDC should contact in a state if there are questions regarding this case notification.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV193",
                "identifier": "74547-1",
                "messageContext": "OBX segment with \nOBX-3.1=74547-1\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|24|ST|74547-1^Person Reporting to CDC - Email^LN||xxx@yyy.org||||||F"
              }
            },
            "defaultValue": {
              "value": "jsmith@txdoh.org"
            }
          },
          {
            "id": "20f6160e-7b39-426e-aebf-1e76ce7c7856",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 14,
            "name": "Case Investigation Start Date",
            "description": "The date the case investigation was initiated.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV147",
                "identifier": "77979-3",
                "messageContext": "OBX segment with \nOBX-3.1=77979-3\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|25|DT|77979-3^Investigation State Date^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "e396d078-4e20-4830-8111-8cdc06fefce3",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 15,
            "name": "Date First Electronically Submitted",
            "description": "Date/time the notification was first electronically sent to CDC.  This value does not change after the original notification.",
            "comments": "",
            "status": "Final",
            "dataType": "DateTime",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT103",
                "identifier": "N/A: OBR-7",
                "messageContext": "OBR-7=date",
                "dataType": "TS",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 7,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Refer to Conformance Statement CN-017 in the PHIN Messaging Guide for Case Notification Reporting, Version 3.0, Release 1.",
                "sampleSegment": "OBR|1|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|68991-9^Epidemiologic Information^LN|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "20140227170100"
            }
          },
          {
            "id": "fff2da7c-79de-4582-8560-14cef5f71ccb",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 16,
            "name": "Date of Electronic Case Notification to CDC",
            "description": "Date/time this version of the electronic case notification was sent.  It will be the same value as NOT103 for the original notification.  For updates, this is the update/send date/time.",
            "comments": "",
            "status": "Final",
            "dataType": "DateTime",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT106",
                "identifier": "N/A: OBR-22",
                "messageContext": "OBR-22=date",
                "dataType": "TS",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 22,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Refer to Conformance Statement CN-018 in the PHIN Messaging Guide for Case Notification Reporting, Version 3.0, Release 1.",
                "sampleSegment": "OBR|1|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|68991-9^Epidemiologic Information^LN|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "20140227170100"
            }
          },
          {
            "id": "54ce917b-82c4-406c-ab82-871536892a20",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 17,
            "name": "Date Reported",
            "description": "Date that a health department first suspected the subject might have the condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV111",
                "identifier": "77995-9",
                "messageContext": "OBX segment with \nOBX-3.1=77995-9\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|26|DT|77995-9^Date Reported^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "5cd792cf-fc9a-4bb4-b6b3-90e08f59091d",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 18,
            "name": "Earliest Date Reported to County",
            "description": "Earliest date reported to county public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV120",
                "identifier": "77972-8",
                "messageContext": "OBX segment with \nOBX-3.1=77972-8\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|27|TS|77972-8^Earliest Date Reported to County^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "33ed2ea9-0e8e-44fc-96a3-a4de42e403bf",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 19,
            "name": "Earliest Date Reported to State",
            "description": "Earliest date reported to state public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV121",
                "identifier": "77973-6",
                "messageContext": "OBX segment with \nOBX-3.1=77973-6\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|28|TS|77973-6^Earliest Date reported to State^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "e5f0a1fa-53d4-4c5f-b63e-880e9c127ccf",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 20,
            "name": "MMWR Week",
            "description": "MMWR Week for which case information is to be counted for MMWR publication.",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV165",
                "identifier": "77991-8",
                "messageContext": "OBX segment with \nOBX-3.1=77991-8\nOBX-5.2=numeric value",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "WEEK should populate the second component of the OBX.5 field.",
                "sampleSegment": "OBX|29|SN|77991-8^MMWR Week^LN||^20||||||F"
              }
            },
            "defaultValue": {
              "value": "9"
            }
          },
          {
            "id": "d7fcf097-015e-42a0-8b11-1e795b5820eb",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 21,
            "name": "MMWR Year",
            "description": "MMWR Year (YYYY) for which case information is to be counted for MMWR publication.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV166",
                "identifier": "77992-6",
                "messageContext": "OBX segment with \nOBX-3.1=77992-6\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "CONFORMANCE STATEMENT:\nOBX-5=date SHALL be in YYYY format",
                "sampleSegment": "OBX|30|DT|77992-6^MMWR Year^LN||2014||||||F"
              }
            },
            "defaultValue": {
              "value": "2014"
            }
          },
          {
            "id": "300c94b0-2aa5-4174-834c-c2799ac843b8",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 22,
            "name": "Date CDC Was First Verbally Notified of This Case",
            "description": "Date the case of an Immediately National Notifiable Condition was first verbally reported to the CDC Emergency Operation Center or the CDC Subject Matter Expert responsible for this condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV176",
                "identifier": "77994-2",
                "messageContext": "OBX segment with \nOBX-3.1=77994-2\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|31|DT|77994-2^Date CDC was first verbally notified of this Case^LN||20130106||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "2a5d04d1-4fcf-43ba-8654-1dd2172978cf",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 23,
            "name": "Date First Reported to PHD",
            "description": "Date the report was first sent to the public health department (local, county or state) by reporter (physician, lab, etc.).",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV177",
                "identifier": "77970-2",
                "messageContext": "OBX segment with \nOBX-3.1=77970-2\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|32|DT|77970-2^Date First Reported to PHD^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "575f896d-c491-4605-9414-f0ca1cc446b8",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 24,
            "name": "Reporting State",
            "description": "State reporting the notification",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_State_FIPS_5-2",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT109",
                "identifier": "77966-0",
                "messageContext": "OBX segment with \nOBX-3.1=77966-0\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|33|CWE|77966-0^Reporting State^LN||18^Indiana^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "54d73684-6024-4040-a5de-37f01c4ab80a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 25,
            "name": "Reporting County",
            "description": "County reporting the notification",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_County_FIPS_6-4",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT113",
                "identifier": "77967-8",
                "messageContext": "OBX segment with \nOBX-3.1=77967-8\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|34|CWE|77967-8^Reporting County^LN||18097^Marion^FIPS6_4||||||F"
              }
            },
            "defaultValue": {
              "value": "48201"
            }
          },
          {
            "id": "69a1f2f9-7d4f-4887-90cb-f2cf23447094",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 26,
            "name": "National Reporting Jurisdiction",
            "description": "National jurisdiction reporting the notification to CDC",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_NationalReportingJurisdiction_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT116",
                "identifier": "77968-6",
                "messageContext": "OBX segment with \nOBX-3.1=77968-6\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "National reporting jurisdiction (77968-6) and Local Record ID (INV168 in OBR-3) are used together to define a unique case in the CDC database. The values for each of these data elements must remain the same when sending updates on a unique case.  Any changes to these data elements will cause the addition of a new case to the CDC database.  For more details, refer to the document on the MMG web site: http://wwwn.cdc.gov/nndss/document/Generic_Data_Elements_that_Define_a_Unique_Case.docx",
                "sampleSegment": "OBX|35|CWE|77968-6^National Reporting Jurisdiction^LN||18^Indiana^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "4ebe3e8d-a885-495e-883d-7a9e1d56c239",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 27,
            "name": "Comment",
            "description": "Use this field, if needed, to communicate anything unusual about this case, which is not already covered with the other data elements.  \n\nDo not send personally identifiable information to CDC in this field.",
            "comments": "",
            "status": "Final",
            "dataType": "LongText",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV886",
                "identifier": "77999-1",
                "messageContext": "OBX segment with \nOBX-3.1=77999-1\nOBX-5=Text String",
                "dataType": "TX",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Do not send personally identifiable information to CDC in this field.",
                "sampleSegment": "OBX|36|TX|77999-1^Comment Field^LN||Comment to communicate something unusual about this case which is not already covered with other data elements||||||F"
              }
            },
            "defaultValue": {
              "value": "No comments at this time"
            }
          }
        ]
      },
      {
        "id": "ba72c3e2-1baa-4aaa-a9b8-6e27ee69649f",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 1,
        "type": "Single",
        "name": "Message Header",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": false,
        "elements": [],
        "expanded": true
      },
      {
        "id": "eca939d2-ff3c-4d8d-933a-6cf3e4d227d9",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 2,
        "template": {
          "id": "a4e54874-8fdf-46c0-be08-f5327a1ede75",
          "internalVersion": 0,
          "name": "START Template",
          "status": "L"
        },
        "type": "Single",
        "name": "START: EPIDEMIOLOGIC INFORMATION SECTION: The observations in this section will be mapped under an \"Epidemiologic Information\" category OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [],
        "expanded": true
      },
      {
        "id": "e2c156bc-9589-4848-8e20-06abb623af80",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 3,
        "type": "RepeatParentChild",
        "name": "Signs and Symptoms Repeating Group",
        "startingDescription": "START: Signs and Symptoms Repeating Group",
        "endingDescription": "END: Signs and Symptoms Repeating Group",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "0c35639b-5f05-49c8-8c61-be8fd91f668b",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "e2c156bc-9589-4848-8e20-06abb623af80",
            "ordinal": 1,
            "name": "Signs and Symptoms",
            "description": "Signs and symptoms associated with the illness being reported",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_SignsSymptoms_Pertussis_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "56831-1",
                "messageContext": "OBX segment with\nOBX-3.1=56831-1\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|56831-1^Signs and Symptoms^LN|1|60537006^Whoop^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "60537006"
            }
          },
          {
            "id": "b72c5069-eef2-49c8-8d0f-c5491462bf98",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "e2c156bc-9589-4848-8e20-06abb623af80",
            "ordinal": 2,
            "name": "Signs and Symptoms Indicator",
            "description": "Indicator for associated sign and symptom",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "INV919",
                "messageContext": "OBX segment with\nOBX-3.1=INV919\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV919^Signs and Symptoms Indicator^PHINQUESTION|1|Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "908b1d5c-769f-4872-9b74-df622bb8c1f3",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 4,
        "type": "Single",
        "name": "Epidemiology Block - Pertussis",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": false,
        "elements": [
          {
            "id": "27b85307-3449-4234-912a-5c38add835eb",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "908b1d5c-769f-4872-9b74-df622bb8c1f3",
            "ordinal": 1,
            "name": "Date of Final Interview",
            "description": "Date of the patient's final interview",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV555",
                "identifier": "INV555",
                "messageContext": "OBX segment with\nOBX-3.1=INV555\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|INV555^Date of Final Interview^PHINQUESTION||20140509||||||F"
              }
            },
            "defaultValue": {
              "value": "20140509"
            }
          },
          {
            "id": "1b02c3b3-70c9-4e8a-98ec-5755dd504b33",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "908b1d5c-769f-4872-9b74-df622bb8c1f3",
            "ordinal": 2,
            "name": "Cough at Final Interview",
            "description": "Was there a cough at the patient's final interview?",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "PRT008",
                "identifier": "PRT008",
                "messageContext": "OBX segment with\nOBX-3.1=PRT008\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|PRT008^Cough at Final Interview^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "c3fa556a-bcf9-42b5-b09b-5d4b47e03f8f",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "908b1d5c-769f-4872-9b74-df622bb8c1f3",
            "ordinal": 3,
            "name": "Cough Onset Date",
            "description": "Cough onset date",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV550",
                "identifier": "85932-2",
                "messageContext": "OBX segment with\nOBX-3.1=85932-2\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|85932-2^Cough Onset Date^LN||20140319||||||F"
              }
            },
            "defaultValue": {
              "value": "20140319"
            }
          },
          {
            "id": "d7a183ff-669f-45be-9262-c172497cdf74",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "908b1d5c-769f-4872-9b74-df622bb8c1f3",
            "ordinal": 4,
            "name": "Total Cough Duration",
            "description": "What was the duration (in days) of the patient's cough?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV557",
                "identifier": "85933-0",
                "messageContext": "OBX segment with\nOBX-3.1=85933-0\nOBX-5.2=numeric value (see SN data type)\nOBX-6=d^day^UCUM",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {
                  "6": "d^day^UCUM"
                },
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown duration, OBX-5.2 MAY be populated with '999'.",
                "sampleSegment": "OBX|nn|SN|85933-0^Total Cough Duration^LN||^56|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "56"
            }
          },
          {
            "id": "3f83bc21-3afa-4c83-92b4-0a5deb5a952f",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "908b1d5c-769f-4872-9b74-df622bb8c1f3",
            "ordinal": 5,
            "name": "Age at Cough Onset",
            "description": "Patient's age at cough onset",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV902",
                "identifier": "85934-8",
                "messageContext": "OBX segment with\nOBX-3.1=85934-8\nOBX-5.2=numeric value (see SN data type)\nOBX-6=units value from Age Units value set",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown age, OBX-5.2 MAY be populated with '999'.",
                "sampleSegment": "OBX|nn|SN|85934-8^Age at Cough Onset^LN||^5|a^year^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "5"
            }
          },
          {
            "id": "cbd9cfbc-b154-4536-a509-f3ca0bcd2516",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "908b1d5c-769f-4872-9b74-df622bb8c1f3",
            "ordinal": 6,
            "name": "Age Units",
            "description": "Patient's age units at cough onset",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": true,
            "relatedElementId": "3f83bc21-3afa-4c83-92b4-0a5deb5a952f",
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_AgeUnit_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV903",
                "identifier": "N/A: OBX-6",
                "messageContext": "OBX-6 Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Part of the 85934-8 Observation/OBX Segment",
                "sampleSegment": "OBX|nn|SN|85934-8^Age at Cough Onset^LN||^5|a^year^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "a"
            }
          },
          {
            "id": "9638c44f-65ee-42aa-a4ac-eef3b3a731be",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "908b1d5c-769f-4872-9b74-df622bb8c1f3",
            "ordinal": 7,
            "name": "Chest X-ray for Pneumonia",
            "description": "Result of chest x-ray for pneumonia",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_PosNegUnkNotDone_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "INV923",
                "messageContext": "OBX segment with\nOBX-3.1=INV923\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV923^Chest X-ray for Pneumonia^PHINQUESTION||10828004^Positive^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "10828004"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "5d005258-e3d0-492b-ad99-4f83b20593db",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 5,
        "type": "RepeatParentChild",
        "name": "Complications Repeating Group",
        "startingDescription": "START: Complications Repeating Group",
        "endingDescription": "END: Complications Repeating Group",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "3b9a4b80-43b1-4692-8b94-4461ff925dc3",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "5d005258-e3d0-492b-ad99-4f83b20593db",
            "ordinal": 1,
            "name": "Type of Complication",
            "description": "Complications associated with the illness being reported",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Complications_Pertussis",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "67187-5",
                "messageContext": "OBX segment with\nOBX-3.1=67187-5\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|67187-5^Type of Complication^LN|1|91175000^Seizures^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": ""
            }
          },
          {
            "id": "d4dc5e98-0cd1-45a7-a738-2d73a8b8b585",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "5d005258-e3d0-492b-ad99-4f83b20593db",
            "ordinal": 2,
            "name": "Type of Complications Indicator",
            "description": "Indicator for associated complication",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "INV920",
                "messageContext": "OBX segment with\nOBX-3.1=INV920\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "Part of the N/A Observation/OBX Segment",
                "sampleSegment": "OBX|nn|CWE|INV920^Type of Complications Indicator^PHINQUESTION|1|N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "9483e8eb-7a70-45b3-893c-e8571a21c2f7",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 6,
        "type": "Single",
        "name": "Antibiotics Given",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": false,
        "elements": [
          {
            "id": "1bc10777-bf65-42c7-b506-a95dc7d7b556",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "9483e8eb-7a70-45b3-893c-e8571a21c2f7",
            "ordinal": 1,
            "name": "Antibiotics Given",
            "description": "Were antibiotics given to the patient?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV559",
                "identifier": "INV559",
                "messageContext": "OBX segment with\nOBX-3.1=INV559\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV559^Antibiotics Given^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "8e3aeb9d-3798-4598-97c8-d85e8910b0dc",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 7,
        "type": "RepeatParentChild",
        "name": "Antibiotics Repeating Group",
        "startingDescription": "START: Antibiotics Repeating Group",
        "endingDescription": "END: Antibiotics Repeating Group",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "0752c163-fd04-4ac0-96a5-302cf76bccc2",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "8e3aeb9d-3798-4598-97c8-d85e8910b0dc",
            "ordinal": 1,
            "name": "Medication Administered",
            "description": "What antibiotic did the patient receive?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_AntibioticReceived_Pertussis",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "29303-5",
                "messageContext": "OBX segment with\nOBX-3.1=29303-5\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|29303-5^Medication Administered^LN|1|2551^Ciprofloxacin^RXNORM||||||F"
              }
            },
            "defaultValue": {
              "value": "2551"
            }
          },
          {
            "id": "890611b8-f84c-4b90-ad95-e852a1376964",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "8e3aeb9d-3798-4598-97c8-d85e8910b0dc",
            "ordinal": 2,
            "name": "Date Treatment or Therapy Started",
            "description": "Date the treatment was initiated",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "86948-7",
                "messageContext": "OBX segment with\nOBX-3.1=86948-7\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|86948-7^Date Treatment or Therapy Started^LN|1|20140319||||||F"
              }
            },
            "defaultValue": {
              "value": "20140319"
            }
          },
          {
            "id": "470dabb6-c68b-45a1-933b-54f840838947",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "8e3aeb9d-3798-4598-97c8-d85e8910b0dc",
            "ordinal": 3,
            "name": "Treatment Duration",
            "description": "Number of days the patient actually took the antibiotic referenced",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "67453-1",
                "messageContext": "OBX segment with\nOBX-3.1=67453-1\nOBX-4=obs sub-ID\nOBX-5.2=numeric value (see SN data type)\nOBX-6=d^day^UCUM",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {
                  "6": "d^day^UCUM"
                },
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown duration, OBX-5.2 MAY be populated with '999'.",
                "sampleSegment": "OBX|nn|SN|67453-1^Treatment Duration^LN|1|^10|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "10"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "bc0db42b-fad4-4ea4-8c81-91fa7903044d",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 8,
        "type": "Single",
        "name": "Maternal Information",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": false,
        "elements": [
          {
            "id": "f0357dc2-360c-44cc-92e1-c094cd33a826",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "bc0db42b-fad4-4ea4-8c81-91fa7903044d",
            "ordinal": 1,
            "name": "Case Patient a Healthcare Worker",
            "description": "Was case patient a healthcare provider (HCP) at illness onset?",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "SCT",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV926",
                "identifier": "223366009",
                "messageContext": "OBX segment with\nOBX-3.1=223366009\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|223366009^Case Patient a Healthcare Worker^SCT||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "3df4a2fa-7e8b-4c4a-ab98-a3c515201c0a",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "bc0db42b-fad4-4ea4-8c81-91fa7903044d",
            "ordinal": 2,
            "name": "Mother's Age at Infant's Birth",
            "description": "Mother's age at infant's birth (used only if patient < 1 year of age)",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "MTH111",
                "identifier": "85724-3",
                "messageContext": "OBX segment with\nOBX-3.1=85724-3\nOBX-5.2=numeric value (see SN data type)\nOBX-6=a^year^UCUM",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {
                  "6": "a^year^UCUM"
                },
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown age, OBX-5.2 MAY be populated with '999'.",
                "sampleSegment": "OBX|nn|SN|85724-3^Mother's Age at Infant's Birth^LN||^23|a^year^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "23"
            }
          },
          {
            "id": "6af17527-1478-4225-a254-a25363f03cfd",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "bc0db42b-fad4-4ea4-8c81-91fa7903044d",
            "ordinal": 3,
            "name": "Gestational Age",
            "description": "Gestational age in weeks (if case-patient < 1 year of age at illness onset)",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "18185-9",
                "messageContext": "OBX segment with\nOBX-3.1=18185-9\nOBX-5.2=numeric value (see SN data type)\nOBX-6=wk^week^UCUM",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {
                  "6": "wk^week^UCUM"
                },
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown gestational age, OBX-5.2 MAY be populated with '999'.",
                "sampleSegment": "OBX|nn|SN|18185-9^Gestational Age^LN||^37|wk^week^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "37"
            }
          },
          {
            "id": "c043c3a2-57b9-4370-809e-672404244da8",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "bc0db42b-fad4-4ea4-8c81-91fa7903044d",
            "ordinal": 4,
            "name": "Birth Weight",
            "description": "Infant's birth weight (used only if patient < 1 year of age).\n\nWe recommend you send birth weight in grams (see DEM230), irrespective of how birth weight was measured.  See the implementation notes for converting pounds and ounces to grams.",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM229",
                "identifier": "56056-5",
                "messageContext": "OBX segment with\nOBX-3.1=56056-5\nOBX-5.2=numeric value (see SN data type)\nOBX-6=units value from Birth Weight Units value set",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown weight, OBX-5.2 MAY be populated with '9999'.\n\nIf the hospital recorded the weight in pounds and ounces, convert the weight to grams using the formula: Birth weight in grams = [(Birth weight in pounds*16) + Birth weight in ounces]*28.35.  \n\nFor example, a birth weight of 6 pounds, 11 ounces = 3,032 grams.\n\nIf the weight is listed in kilograms, use this formula:  Birth weight in grams = (birth weight in kilograms x 1000). For example, 2.5 kilograms = 2500 grams.\n\nFor more information about the formula for converting birth weight into grams, please see  page #178 of CDC NCHS birth edit specifications https://www.cdc.gov/nchs/data/dvs/birth_edit_specifications.pdf",
                "sampleSegment": "OBX|nn|SN|56056-5^Birth Weight^LN||^3032|g^gram [mass]^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "3032"
            }
          },
          {
            "id": "5d275d89-8635-4014-8f9e-7e92ad98bc74",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "bc0db42b-fad4-4ea4-8c81-91fa7903044d",
            "ordinal": 5,
            "name": "Birth Weight Units",
            "description": "Infant's birth weight units",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "relatedElementId": "c043c3a2-57b9-4370-809e-672404244da8",
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_WeightUnit_UCUM",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM230",
                "identifier": "N/A: OBX-6 for 56056-5",
                "messageContext": "OBX-6 Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|SN|56056-5^Birth Weight^LN||^3032|g^gram [mass]^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "g"
            }
          },
          {
            "id": "493dee9e-9404-4b52-8ce0-0b7a532e0d2a",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "bc0db42b-fad4-4ea4-8c81-91fa7903044d",
            "ordinal": 6,
            "name": "Setting (Outside Household) of Further Documented Spread From This Case",
            "description": "Transmission settings (outside household setting) of further documented spread from this case",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_SettingOfFurtherSpread_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV561",
                "identifier": "INV561",
                "messageContext": "OBX segment with\nOBX-3.1=INV561\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|INV561^Setting (Outside Household) of Further Documented Spread From This Case^PHINQUESTION||224864007^College^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "224864007"
            }
          },
          {
            "id": "434ba56e-2dbb-4ed4-8d53-3f9dca14f247",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "bc0db42b-fad4-4ea4-8c81-91fa7903044d",
            "ordinal": 7,
            "name": "Number of Contacts Recommended Prophylaxis",
            "description": "Number of contacts in any setting recommended antibiotic prophylaxis",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV562",
                "identifier": "INV562",
                "messageContext": "OBX segment with\nOBX-3.1=INV562\nOBX-5.2=numeric value (see SN data type)",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown number, OBX-5.2 MAY be populated with '999'.",
                "sampleSegment": "OBX|nn|SN|INV562^Number of Contacts Recommended Prophylaxis^PHINQUESTION||^6||||||F"
              }
            },
            "defaultValue": {
              "value": "6"
            }
          },
          {
            "id": "55560b7c-c115-4119-8db6-55becfa91881",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "bc0db42b-fad4-4ea4-8c81-91fa7903044d",
            "ordinal": 8,
            "name": "Did Mother Receive Tdap",
            "description": "Did mother receive Tdap (if case-patient < 1 year of age at illness onset)?",
            "category": "Vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "MTH172",
                "identifier": "MTH172",
                "messageContext": "OBX segment with\nOBX-3.1=MTH172\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|MTH172^Did Mother Receive Tdap^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "4078cf44-f9b4-4c83-be0b-cc6819d26507",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "bc0db42b-fad4-4ea4-8c81-91fa7903044d",
            "ordinal": 9,
            "name": "Timing of Mother's Tdap Administration",
            "description": "If mother received Tdap, when was it administered in relation to the pregnancy?",
            "category": "Vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_TimingOfMaternalTreatment_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "MTH173",
                "identifier": "MTH173",
                "messageContext": "OBX segment with\nOBX-3.1=MTH173\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|MTH173^Timing of Mother's Tdap Administration^PHINQUESTION||429070000^Prior to [case] pregnancy^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "429070000"
            }
          },
          {
            "id": "0910c6fe-72d0-4124-887a-51a7fe66212c",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "bc0db42b-fad4-4ea4-8c81-91fa7903044d",
            "ordinal": 10,
            "name": "Date of Mother's Tdap Administration",
            "description": "If mother received Tdap, what date was it administered? *(if available)",
            "category": "Vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "MTH174",
                "identifier": "MTH174",
                "messageContext": "OBX segment with\nOBX-3.1=MTH174\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|MTH174^Date of Mother's Tdap Administration^PHINQUESTION||20140319||||||F"
              }
            },
            "defaultValue": {
              "value": "20140319"
            }
          },
          {
            "id": "ac0bf2de-35cb-495d-ab51-3b261431b88e",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "bc0db42b-fad4-4ea4-8c81-91fa7903044d",
            "ordinal": 11,
            "name": "One or More Suspected Sources",
            "description": "Was there one or more suspected sources of infection?",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "PRT070",
                "identifier": "PRT070",
                "messageContext": "OBX segment with\nOBX-3.1=PRT070\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|PRT070^One or More Suspected Sources^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "40925d49-177d-45f2-95e8-543a1265cd28",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "bc0db42b-fad4-4ea4-8c81-91fa7903044d",
            "ordinal": 12,
            "name": "Number of Suspected Sources",
            "description": "Number of suspected sources",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "PRT071",
                "identifier": "PRT071",
                "messageContext": "OBX segment with\nOBX-3.1=PRT071\nOBX-5.2=numeric value (see SN data type)",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "This variable is used if PRT070 is \"Yes\"",
                "sampleSegment": "OBX|nn|SN|PRT071^Number of Suspected Sources^PHINQUESTION||^5||||||F"
              }
            },
            "defaultValue": {
              "value": "5"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "21627d08-e2d1-4f90-962f-a88b1d704e20",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 9,
        "type": "RepeatParentChild",
        "name": "Suspected Sources Repeating Group",
        "startingDescription": "START: Suspected Sources Repeating Group",
        "endingDescription": "END: Suspected Sources Repeating Group",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "4515ebe9-aa0a-4c15-a0cd-fbe9bd36b43e",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "21627d08-e2d1-4f90-962f-a88b1d704e20",
            "ordinal": 1,
            "name": "Suspected Source Age",
            "description": "Suspected source age",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "PRT074",
                "identifier": "PRT074",
                "messageContext": "OBX segment with\nOBX-3.1=PRT074\nOBX-4=obs sub-ID\nOBX-5.2=numeric value (see SN data type)\nOBX-6=units value from Suspected Source Age Units value set",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "This variable is used if PRT070 is \"Yes\" \n\nFor unknown age, OBX-5.2 MAY be populated with '999'.",
                "sampleSegment": "OBX|nn|SN|PRT074^Suspected Source Age^PHINQUESTION|1|^5|a^year^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "5"
            }
          },
          {
            "id": "230ea807-74c8-40e5-9b47-d9f52845d878",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "21627d08-e2d1-4f90-962f-a88b1d704e20",
            "ordinal": 2,
            "name": "Suspected Source Age Units",
            "description": "Suspected source age type",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "relatedElementId": "4515ebe9-aa0a-4c15-a0cd-fbe9bd36b43e",
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_AgeUnit_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "PRT075",
                "identifier": "N/A: OBX-6",
                "messageContext": "OBX-4=obs sub-ID\nOBX-6 Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "Part of the PRT074 Observation/OBX Segment",
                "sampleSegment": "OBX|nn|SN|PRT074^Suspected Source Age^PHINQUESTION|1|^5|a^year^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "a"
            }
          },
          {
            "id": "8f28a890-b0d5-4e42-a329-3bdc48a447ed",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "21627d08-e2d1-4f90-962f-a88b1d704e20",
            "ordinal": 3,
            "name": "Suspected Source Sex",
            "description": "Suspected source sex",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Sex_MFU",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "PRT076",
                "identifier": "PRT076",
                "messageContext": "OBX segment with\nOBX-3.1=PRT076\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "This variable is used if PRT070 is \"Yes\"",
                "sampleSegment": "OBX|nn|CWE|PRT076^Suspected Source Sex^PHINQUESTION|1|F^Female^HL70001||||||F"
              }
            },
            "defaultValue": {
              "value": "F"
            }
          },
          {
            "id": "3c08a2bf-2eb2-4766-8132-8af4eb7f55b7",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "21627d08-e2d1-4f90-962f-a88b1d704e20",
            "ordinal": 4,
            "name": "Suspected Source Relationship to Case",
            "description": "Suspected source relationship to case",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Relationship_VPD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "PRT077",
                "identifier": "PRT077",
                "messageContext": "OBX segment with\nOBX-3.1=PRT077\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "This variable is used if PRT070 is \"Yes\" \n\nOBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|PRT077^Suspected Source Relationship to Case^PHINQUESTION|1|BRO^Brother^HL70063||||||F"
              }
            },
            "defaultValue": {
              "value": "BRO"
            }
          },
          {
            "id": "3a8c22fc-15d5-445a-aa4c-650eabe8f7dd",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "21627d08-e2d1-4f90-962f-a88b1d704e20",
            "ordinal": 5,
            "name": "Suspected Source Cough Onset Date",
            "description": "Suspected source cough onset date",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "PRT088",
                "identifier": "PRT088",
                "messageContext": "OBX segment with\nOBX-3.1=PRT088\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.\n\nThis variable is used if PRT070 is \"Yes\"",
                "sampleSegment": "OBX|nn|DT|PRT088^Suspected Source Cough Onset Date^PHINQUESTION|1|20140319||||||F"
              }
            },
            "defaultValue": {
              "value": "20140319"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "ea083de7-f5ac-4821-8028-37ac71682ff6",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 10,
        "type": "Single",
        "name": "Case Information",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": false,
        "elements": [
          {
            "id": "257d6a57-2c9f-429a-aa29-39ac52519f78",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "ea083de7-f5ac-4821-8028-37ac71682ff6",
            "ordinal": 1,
            "name": "Patient Address City",
            "description": "Patient address city",
            "category": "Demographics",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM161",
                "identifier": "N/A: PID -11.3",
                "messageContext": "PID-11.3\nPatient Address - City",
                "dataType": "ST",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 3,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown patient address city, PID-11.3 MAY be populated with 'unknown'.",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppNamelocalID&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^Atlanta^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "Atlanta"
            }
          },
          {
            "id": "87627d8f-4f2d-492e-814d-8eaa0878f293",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "ea083de7-f5ac-4821-8028-37ac71682ff6",
            "ordinal": 2,
            "name": "Case Investigation Status Code",
            "description": "Case investigation status code",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_CaseInvestigationStatus_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV109",
                "identifier": "INV109",
                "messageContext": "OBX segment with\nOBX-3.1=INV109\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|INV109^Case Investigation Status Code^PHINQUESTION||29179001^Closed^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "29179001"
            }
          },
          {
            "id": "b6ec50f7-5b6d-47d9-824e-48efd6fc8cc4",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "ea083de7-f5ac-4821-8028-37ac71682ff6",
            "ordinal": 3,
            "name": "Detection Method",
            "description": "Detection method",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_CaseDetectionMethod_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV159",
                "identifier": "INV159",
                "messageContext": "OBX segment with\nOBX-3.1=INV159\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|INV159^Detection Method^PHINQUESTION||PHC311^Prenatal testing^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC311"
            }
          },
          {
            "id": "4f13407f-ea42-4c16-92e9-87f8636b49a3",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "ea083de7-f5ac-4821-8028-37ac71682ff6",
            "ordinal": 4,
            "name": "Transmission Setting",
            "description": "What was the transmission setting where the condition was acquired?",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_TransmissionSetting_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV224",
                "identifier": "81267-7",
                "messageContext": "OBX segment with\nOBX-3.1=81267-7\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|81267-7^Transmission Setting^LN||1348009^Day care center^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "1348009"
            }
          },
          {
            "id": "434e00ed-c3e5-4e87-8b4f-6f713cb83423",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "ea083de7-f5ac-4821-8028-37ac71682ff6",
            "ordinal": 5,
            "name": "Epi-Linked to a Laboratory Confirmed Case",
            "description": "Is this case epi-linked to a laboratory-confirmed case?",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV907",
                "identifier": "INV927",
                "messageContext": "OBX segment with\nOBX-3.1=INV927\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV927^Epi-Linked to a Laboratory Confirmed Case^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "0ccae8e2-752d-459a-9d03-8fa893e86693",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 11,
        "template": {
          "id": "3a140b31-092a-4c47-b09b-31ad1c16f27e",
          "internalVersion": 2,
          "name": "Industry and Occupation",
          "status": "L"
        },
        "type": "Repeat",
        "name": "Industry and Occupation Repeating Group",
        "startingDescription": "START: Industry and Occupation Repeating Group",
        "endingDescription": "END: Industry and Occupation Repeating Group",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "e83000bf-fdab-4894-b91e-e181571320e9",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "0ccae8e2-752d-459a-9d03-8fa893e86693",
            "ordinal": 1,
            "name": "Current Occupation",
            "description": "This data element is used to capture the narrative text of a subject's current occupation.",
            "category": "Demographics",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "85658-3",
                "identifier": "85658-3",
                "messageContext": "OBX segment with\nOBX-3.1=85658-3\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|85658-3^Current Occupation^LN|1|Medical Technologist||||||F"
              }
            },
            "defaultValue": {
              "value": "Medical Technologist"
            }
          },
          {
            "id": "96c0e36d-dfcd-4ae6-a14b-5531cc67cd13",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "0ccae8e2-752d-459a-9d03-8fa893e86693",
            "ordinal": 2,
            "name": "Current Occupation Standardized",
            "description": "This data element is used to capture the CDC NIOSH standard occupation code based upon the narrative text of a subject's current occupation.\n\n(The National Institute for Occupational Safety and Health (NIOSH) has developed a web-based software tool designed to translate industry and occupation text to standardized Industry and Occupation codes.  The NIOSH Industry and Occupational Computerized Coding System (NIOCCS) is available here:  http://www.cdc.gov/niosh/topics/coding/overview.html",
            "category": "Demographics",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Occupation_CDC_Census2010",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "85659-1",
                "identifier": "85659-1",
                "messageContext": "OBX segment with\nOBX-3.1=85659-1\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CE|85659-1^Current Occupation Standardized^LN|1|3300^Clinical laboratory technologists and technicians^CDCOCCUPATION2010||||||F"
              }
            },
            "defaultValue": {
              "value": "3300"
            }
          },
          {
            "id": "ce18c48f-bc47-4952-84af-47b6a3b7c80f",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "0ccae8e2-752d-459a-9d03-8fa893e86693",
            "ordinal": 3,
            "name": "Current Industry",
            "description": "This data element is used to capture the narrative text of subject's current industry.",
            "category": "Demographics",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "85078-4",
                "identifier": "85078-4",
                "messageContext": "OBX segment with\nOBX-3.1=85078-4\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|85078-4^Current Industry^LN|1|Hospital lab||||||F"
              }
            },
            "defaultValue": {
              "value": "Hospital lab"
            }
          },
          {
            "id": "c69a07de-16bb-45f7-b77c-168ca9a023f8",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "0ccae8e2-752d-459a-9d03-8fa893e86693",
            "ordinal": 4,
            "name": "Current Industry Standardized",
            "description": "This data element is used to capture the CDC NIOSH standard industry code based upon the narrative text of a subject's current industry.  \n\n(The National Institute for Occupational Safety and Health (NIOSH) has developed a web-based software tool designed to translate industry and occupation text to standardized Industry and Occupation codes.  The NIOSH Industry and Occupational Computerized Coding System (NIOCCS) is available here:  http://www.cdc.gov/niosh/topics/coding/overview.html",
            "category": "Demographics",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Industry_CDC_Census2010",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "85657-5",
                "identifier": "85657-5",
                "messageContext": "OBX segment with\nOBX-3.1=85657-5\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CE|85657-5^Current Industry Standardized^LN|1|8190^Hospitals^CDCINDUSTRY2010||||||F"
              }
            },
            "defaultValue": {
              "value": "8190"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "d77d354b-6eea-4706-8050-bbe6e4e7ca86",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 12,
        "type": "Single",
        "name": "Laboratory Epidemiology Questions",
        "startingDescription": "START: Laboratory Epidemiology Questions",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "067a457d-bb29-4a13-a88e-ca9d308f1ff4",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "d77d354b-6eea-4706-8050-bbe6e4e7ca86",
            "ordinal": 1,
            "name": "Laboratory Testing Performed",
            "description": "Was laboratory testing done to confirm the diagnosis?",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV740",
                "identifier": "LAB630",
                "messageContext": "OBX segment with\nOBX-3.1=LAB630\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|LAB630^Laboratory Testing Performed^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "1edb75d6-e380-4e97-b1b1-d2cd2d2626fc",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "d77d354b-6eea-4706-8050-bbe6e4e7ca86",
            "ordinal": 2,
            "name": "Laboratory Confirmed",
            "description": "Was the case laboratory confirmed?",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV164",
                "identifier": "INV164",
                "messageContext": "OBX segment with\nOBX-3.1=INV164\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV164^Laboratory Confirmed^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "0a4be3a9-dc42-4e36-90d5-784f211b01c3",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "d77d354b-6eea-4706-8050-bbe6e4e7ca86",
            "ordinal": 3,
            "name": "Specimen Sent to CDC",
            "description": "Was a specimen sent to CDC for testing?",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB515",
                "identifier": "82314-6",
                "messageContext": "OBX segment with\nOBX-3.1=82314-6\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|82314-6^Specimen Sent to CDC^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "08b140fa-5f51-4885-9004-b812cb7ce644",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 13,
        "template": {
          "id": "c87e525a-196d-47d3-94fc-4e5d7c7c0bff",
          "internalVersion": 4,
          "name": "VPD Lab Message Linkage",
          "status": "L"
        },
        "type": "Repeat",
        "name": "VPD Linkage",
        "startingDescription": "START: VPD Lab Message Linkage Repeating Group",
        "endingDescription": "END: VPD Lab Message Linkage Repeating Group",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "1eb2afb6-0af1-4336-875c-f5d2c4d72234",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "08b140fa-5f51-4885-9004-b812cb7ce644",
            "ordinal": 1,
            "name": "VPD Lab Message Reference Laboratory",
            "description": "Vaccine Preventable Disease (VPD) reference laboratory that will be used along with the patient identifier and specimen identifier to uniquely identify a VPD lab message",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "LAB143",
                "messageContext": "OBX segment with\nOBX-3.1=LAB143\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "The OBX-5 value should come from the OID or CLIA number for the VPD lab shown on the lab report or from MSH-4.2 in the VPD lab message.\n\nLAB143, LAB598, and LAB125 data elements are used to link  the Case Notification to a specific VPD message.\n\nVPD reference lab refers to one of the reference labs funded by the CDC NCIRD to provide enhanced capacity for molecular and serologic testing in a shared service model.\n\nNote: Always use the linkage to the most recent VPD reference lab test result",
                "sampleSegment": "OBX|nn|ST|LAB143^VPD Lab Message Reference Laboratory^PHINQUESTION|1|2.16.840.1.114222.4.1.10100||||||F"
              }
            },
            "defaultValue": {
              "value": "2.16.840.1.114222.4.1.10100"
            }
          },
          {
            "id": "36d36831-fdfa-4847-9f68-152bfb49adce",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "08b140fa-5f51-4885-9004-b812cb7ce644",
            "ordinal": 2,
            "name": "VPD Lab Message Patient Identifier",
            "description": "VPD lab message patient Identifier that will be used along with the reference laboratory and specimen identifier to uniquely identify a VPD lab message",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "LAB598",
                "messageContext": "OBX segment with\nOBX-3.1=LAB598\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "The OBX-5 value should come from the patient identifier assigned by the VPD reference lab shown on the lab report or from PID-3 in the VPD lab message.\n\nIf testing was done at a VPD reference lab, send the patient ID assigned by the VPD reference lab including the assigning authority in order to link to the correct lab result for the patient.\n\nNote: Always use the linkage to the most recent VPD reference lab test result",
                "sampleSegment": "OBX|nn|ST|LAB598^VPD Lab Message Patient Identifier^PHINQUESTION|1|Y009990xx^^^&2.16.840.1.114222.4.1.10100&ISO||||||F"
              }
            },
            "defaultValue": {
              "value": "Y009990xx^^^&2.16.840.1.114222.4.1.10100&ISO"
            }
          },
          {
            "id": "5bb377ef-522e-48b0-98ff-6239a4e455cf",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "08b140fa-5f51-4885-9004-b812cb7ce644",
            "ordinal": 3,
            "name": "VPD Lab Message Specimen Identifier",
            "description": "VPD lab message specimen identifier that will be used along with the patient identifier and reference laboratory to uniquely identify a VPD lab message",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "LAB125",
                "messageContext": "OBX segment with\nOBX-3.1=LAB125\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "The OBX-5 value should come the specimen identifier assigned by the VPD reference lab shown on the lab report or from SPM-2.2 in the VPD lab message.\n\nIf testing was done at a VPD reference lab, send the filler specimen IDs assigned by the VPD reference lab including the assigning authority in order to link to the correct lab result for the patient.\n\nNote: Always use the linkage to the most recent VPD reference lab test result",
                "sampleSegment": "OBX|nn|ST|LAB125^VPD Lab Message Specimen Identifier^PHINQUESTION|1|Y009990xx-01^^^&2.16.840.1.114222.4.1.10100&ISO||||||F"
              }
            },
            "defaultValue": {
              "value": "Y009990xx-01^^^&2.16.840.1.114222.4.1.10100&ISO"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 14,
        "template": {
          "id": "ac8c96d4-d222-4e9a-b479-5815eb5e6e65",
          "internalVersion": 1,
          "name": "Epi Lab Block",
          "status": "U"
        },
        "type": "RepeatParentChild",
        "name": "Epidemiology Questions About Laboratory Repeating Group",
        "startingDescription": "START: Epidemiology Questions About Laboratory Repeating Group",
        "endingDescription": "END: Epidemiology Questions About Laboratory Repeating Group",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "46235f48-c656-4118-9589-cfbbc8b4d65b",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 1,
            "name": "Test Type",
            "description": "Epidemiologic interpretation of the type of test(s) performed for this case.",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_LabTestType_Pertussis",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV290",
                "identifier": "INV290",
                "messageContext": "OBX segment with\nOBX-3.1=INV290\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|INV290^Test Type^PHINQUESTION|1|549-6^Pertussis Culture^LN||||||F"
              }
            },
            "defaultValue": {
              "value": "549-6"
            }
          },
          {
            "id": "ce95e33c-b803-4428-bd19-99e58bde8945",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 2,
            "name": "Test Result",
            "description": "Epidemiologic interpretation of the results of the test(s) performed for this case. This is a qualitative test result.  (e.g. positive, detected, negative)",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_LabTestInterpretation_Pertussis",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV291",
                "identifier": "INV291",
                "messageContext": "OBX segment with\nOBX-3.1=INV291\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|INV291^Test Result^PHINQUESTION|1|10828004^Positive^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "10828004"
            }
          },
          {
            "id": "048e8187-1aa0-43cc-9629-fc6206378472",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 3,
            "name": "Test Result Quantitative",
            "description": "Quantitative Test Result Value",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB628",
                "identifier": "LAB628",
                "messageContext": "OBX segment with\nOBX-3.1=LAB628\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|LAB628^Test Result Quantitative^PHINQUESTION|1|10||||||F"
              }
            },
            "defaultValue": {
              "value": "10"
            }
          },
          {
            "id": "95ef7134-f721-4a42-ad6a-455e35c53195",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 4,
            "name": "Result Units",
            "description": "Units of measure for the Quantitative Test Result Value",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_UnitsOfMeasure_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB115",
                "identifier": "LAB115",
                "messageContext": "OBX segment with\nOBX-3.1=LAB115\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|LAB115^Result Units^PHINQUESTION|1|mg/dL^MilliGrams Per Deci Liter [Mass Concentration Units]^UCUM||||||F"
              }
            },
            "defaultValue": {
              "value": "mg/dL"
            }
          },
          {
            "id": "0f002da6-b280-4d7f-92e3-4e0accb49d5d",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 5,
            "name": "Specimen Source",
            "description": "This indicates the source of the specimen tested.",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "SpecimenTypeVPD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "31208-2",
                "messageContext": "OBX segment with\nOBX-3.1=31208-2\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|31208-2^Specimen Source^LN|1|119297000^Blood specimen^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "119297000"
            }
          },
          {
            "id": "c94d7a1b-b4e8-4487-b8aa-fad74c5006f3",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 6,
            "name": "Specimen Collection Date/Time",
            "description": "Date of collection of laboratory specimen used for diagnosis of health event reported in this case report. Time of collection is an optional addition to date.",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "DateTime",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB163",
                "identifier": "68963-8",
                "messageContext": "OBX segment with\nOBX-3.1=68963-8\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.\n\nSend as much information as known with\nYYYYMMDD as a minimum ",
                "sampleSegment": "OBX|nn|DT|68963-8^Specimen Collection Date/Time^LN|1|||||||F"
              }
            },
            "defaultValue": {
              "value": ""
            }
          },
          {
            "id": "2aae324d-48b1-4443-9a9c-ef1eb04ecb34",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 7,
            "name": "Date Specimen Sent to CDC",
            "description": "Date specimen sent to CDC",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB516",
                "identifier": "85930-6",
                "messageContext": "OBX segment with\nOBX-3.1=85930-6\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.\n\nSend as much information as known with\nYYYYMMDD as a minimum ",
                "sampleSegment": "OBX|nn|TS|85930-6^Date Specimen Sent to CDC^LN|1|||||||F"
              }
            },
            "defaultValue": {
              "value": ""
            }
          },
          {
            "id": "b08aaccb-7344-4897-829e-6d303c96abea",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 8,
            "name": "Performing Laboratory Type",
            "description": "Performing laboratory type",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_PerformingLaboratoryType_VPD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB606",
                "identifier": "82771-7",
                "messageContext": "OBX segment with\nOBX-3.1=82771-7\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|82771-7^Performing Laboratory Type^LN|1|PHC1316^VPD Testing Laboratory^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC1316"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "9fd720c0-0c91-48a7-8d13-226fdc596095",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 15,
        "type": "Single",
        "name": "Lab Footer Row",
        "startingDescription": "END: Laboratory Epidemiology Questions",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [],
        "expanded": true
      },
      {
        "id": "21692897-e724-4834-a419-c841aafcee0a",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 16,
        "type": "Single",
        "name": "Vaccine Questions",
        "startingDescription": "START: Epidemiology Questions About Vaccine History",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "ba205776-af41-43a8-bf9d-052c5710e802",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "21692897-e724-4834-a419-c841aafcee0a",
            "ordinal": 1,
            "name": "Did the Subject Ever Receive a Vaccine Against This Disease",
            "description": "Did the subject ever receive a vaccine against this disease?",
            "category": "Vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC126",
                "identifier": "VAC126",
                "messageContext": "OBX segment with\nOBX-3.1=VAC126\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|VAC126^Did the Subject Ever Receive a Vaccine Against This Disease^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "0f014118-c44f-409d-aea7-17766250c272",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "21692897-e724-4834-a419-c841aafcee0a",
            "ordinal": 2,
            "name": "Date of Last Dose Prior to Illness Onset",
            "description": "Date of last vaccine dose against this disease prior to illness onset",
            "category": "Vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC142",
                "identifier": "VAC142",
                "messageContext": "OBX segment with\nOBX-3.1=VAC142\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|VAC142^Date of Last Dose Prior to Illness Onset^PHINQUESTION||20140319||||||F"
              }
            },
            "defaultValue": {
              "value": "20140319"
            }
          },
          {
            "id": "afa1f601-a69e-4031-89e7-46283c2681b8",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "21692897-e724-4834-a419-c841aafcee0a",
            "ordinal": 3,
            "name": "Vaccination Doses Prior to Onset",
            "description": "Number of vaccine doses against this disease prior to illness onset",
            "category": "Vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC140",
                "identifier": "82745-1",
                "messageContext": "OBX segment with\nOBX-3.1=82745-1\nOBX-5.2=numeric value (see SN data type)",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown number of doses, OBX-5.2 MAY be populated with '99'.",
                "sampleSegment": "OBX|nn|SN|82745-1^Vaccination Doses Prior to Onset^LN||^5||||||F"
              }
            },
            "defaultValue": {
              "value": "5"
            }
          },
          {
            "id": "4e95d4e1-58bc-417e-9e3a-d175eb1f77b7",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "21692897-e724-4834-a419-c841aafcee0a",
            "ordinal": 4,
            "name": "Vaccinated per ACIP Recommendations",
            "description": "Was subject vaccinated as recommended by the Advisory Committee on Immunization Practices (ACIP)?",
            "category": "Vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC148",
                "identifier": "VAC148",
                "messageContext": "OBX segment with\nOBX-3.1=VAC148\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "This data element is used for all cases. For example, a case might not have received a vaccine because they were too young per ACIP schedules.",
                "sampleSegment": "OBX|nn|CWE|VAC148^Vaccinated per ACIP Recommendations^PHINQUESTION||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "aab5a3ac-f8e4-4582-819e-9cf1f1a035b5",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "21692897-e724-4834-a419-c841aafcee0a",
            "ordinal": 5,
            "name": "Reason Not Vaccinated Per ACIP Recommendations",
            "description": "Reason subject not vaccinated as recommended by ACIP",
            "category": "Vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_VaccineNotGivenReasons_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC149",
                "identifier": "VAC149",
                "messageContext": "OBX segment with\nOBX-3.1=VAC149\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "This data element is used if VAC126 = NO or unknown, or VAC148 = NO or unknown.\n\nOBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|VAC149^Reason Not Vaccinated Per ACIP Recommendations^PHINQUESTION||PHC96^Religious exemption^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC96"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 17,
        "template": {
          "id": "774a5b91-177b-4e12-8e6d-e64242b9f504",
          "internalVersion": 1,
          "name": "Vaccine History",
          "status": "U"
        },
        "type": "RepeatParentChild",
        "name": "Vaccination History Repeating Group Section to specify the detailed vaccine record information - Repeats for each vaccine dose.",
        "startingDescription": "START: Preferred Vaccination History Repeating Group Section to specify the detailed vaccine record information - Repeats for each vaccine dose.\nNOTE: Include findings in this section related to the condition being reported in this case notification.",
        "endingDescription": "END: Preferred Vaccination History Repeating Group Section\nEND: Epidemiology Questions About Vaccine History",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "8e0b0b63-8c7e-437c-9657-4745bf938c0e",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 1,
            "name": "Vaccine Type",
            "description": "The type of vaccine administered for the condition being reported",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_VaccineAdministered_Pertussis",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC101",
                "identifier": "30956-7",
                "messageContext": "OBX segment with\nOBX-3.1=30956-7\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|30956-7^Vaccine Type^LN|1|11^pertussis vaccine^CVX||||||F"
              }
            },
            "defaultValue": {
              "value": "11"
            }
          },
          {
            "id": "7beb8dd6-a256-4c4b-9037-8915682228a9",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 2,
            "name": "Vaccine Administered Date",
            "description": "The date that the vaccine was administered",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC103",
                "identifier": "30952-6",
                "messageContext": "OBX segment with\nOBX-3.1=30952-6\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|30952-6^Vaccine Administered Date^LN|1|20110225||||||F"
              }
            },
            "defaultValue": {
              "value": "20110225"
            }
          },
          {
            "id": "c7dab0cd-9d38-4636-8e5e-d8ddd3a5fff9",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 3,
            "name": "Vaccine Dose Number",
            "description": "The dose number in a series",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC120",
                "identifier": "30973-2",
                "messageContext": "OBX segment with\nOBX-3.1=30973-2\nOBX-4=obs sub-ID\nOBX-5.2=numeric value (see SN data type)",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|SN|30973-2^Vaccine Dose Number^LN|1|^1||||||F"
              }
            },
            "defaultValue": {
              "value": "1"
            }
          },
          {
            "id": "3748e3c5-ac40-4e3d-b8a9-fc5eb7643f0a",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 4,
            "name": "Vaccine Manufacturer",
            "description": "The company which manufactured the vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_ManufacturersOfVaccinesMVX_CDC_NIP",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC107",
                "identifier": "30957-5",
                "messageContext": "OBX segment with\nOBX-3.1=30957-5\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|30957-5^Vaccine Manufacturer^LN|1|SKB^GlaxoSmithKline^MVX||||||F"
              }
            },
            "defaultValue": {
              "value": "SKB"
            }
          },
          {
            "id": "5a860f85-19da-4324-8052-78f3dbf776ce",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 5,
            "name": "Vaccine Lot Number",
            "description": "The lot number for the vaccine administered",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC108",
                "identifier": "30959-1",
                "messageContext": "OBX segment with\nOBX-3.1=30959-1\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown lot number, OBX-5 MAY be populated with 'unknown'.",
                "sampleSegment": "OBX|nn|ST|30959-1^Vaccine Lot Number^LN|1|SKB Lot1787239817||||||F"
              }
            },
            "defaultValue": {
              "value": "SKB Lot1787239817"
            }
          },
          {
            "id": "8b6091eb-79b2-46ac-8748-8ed65838fa13",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 6,
            "name": "Vaccine Expiration Date",
            "description": "The expiration date for the vaccine administered",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC109",
                "identifier": "VAC109",
                "messageContext": "OBX segment with\nOBX-3.1=VAC109\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|VAC109^Vaccine Expiration Date^PHINQUESTION|1|20140131||||||F"
              }
            },
            "defaultValue": {
              "value": "20140131"
            }
          },
          {
            "id": "0815e827-e12e-45f8-914a-7464da9ae765",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 7,
            "name": "National Drug Code (NDC)",
            "description": "NDC from the vaccine's bar code can be used to obtain vaccine brand name and manufacturer.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC153",
                "identifier": "VAC153",
                "messageContext": "OBX segment with\nOBX-3.1=VAC153\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "Refer to the CDC Immunization Information Systems website for the NDC Crosswalk tables: http://www2a.cdc.gov/vaccines/iis/iisstandards/ndc_crosswalk.asp",
                "sampleSegment": "OBX|nn|ST|VAC153^National Drug Code (NDC)^PHINQUESTION|1|49281-0286-01||||||F"
              }
            },
            "defaultValue": {
              "value": "49281-0286-01"
            }
          },
          {
            "id": "8fc202b7-649d-4376-b4d2-42458cd3c713",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 8,
            "name": "Vaccination Record Identifier",
            "description": "Vaccination record identifier",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC102",
                "identifier": "VAC102",
                "messageContext": "OBX segment with\nOBX-3.1=VAC102\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|VAC102^Vaccination Record Identifier^PHINQUESTION|1|VAC1289182900TX01||||||F"
              }
            },
            "defaultValue": {
              "value": "VAC1289182900TX01"
            }
          },
          {
            "id": "ec5e641e-c43d-45b8-8c75-723cef6758f5",
            "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
            "guideInternalVersion": 5,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 9,
            "name": "Vaccine Event Information Source",
            "description": "The information source for this vaccination record",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_VaccineEventInformationSource_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC147",
                "identifier": "VAC147",
                "messageContext": "OBX segment with\nOBX-3.1=VAC147\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|VAC147^Vaccine Event Information Source^PHINQUESTION|1|00^New immunization record^NIP001||||||F"
              }
            },
            "defaultValue": {
              "value": "00"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "88a79779-b98e-45db-89b2-5646270fdec0",
        "guideId": "d5e61fc9-6b43-40a2-9215-9a733622a668",
        "ordinal": 18,
        "template": {
          "id": "6b7d2139-a669-401d-b1af-a4df199322e1",
          "internalVersion": 0,
          "name": "END Template",
          "status": "L"
        },
        "type": "Single",
        "name": "END: EPIDEMIOLOGIC INFORMATION SECTION",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [],
        "expanded": true
      }
    ],
    "columns": [
      {
        "label": "Category",
        "path": "$.category"
      },
      {
        "label": "Data Element (DE) Name",
        "path": "$.name"
      },
      {
        "label": "DE Identifier Sent in HL7 Message",
        "path": "$.mappings.hl7v251.identifier"
      },
      {
        "label": "DE Code System",
        "path": "$.codeSystem"
      },
      {
        "label": "Data Element Description",
        "path": "$.description"
      },
      {
        "label": "Data Type",
        "path": "$.dataType"
      },
      {
        "label": "CDC Priority",
        "path": "$.legacyPriority"
      },
      {
        "label": "May Repeat",
        "path": "$.mayRepeat"
      },
      {
        "label": "Value Set Name (VADS Hyperlink)",
        "path": "$.valueSetLink"
      },
      {
        "label": "Value Set Code",
        "path": "$.valueSetCode"
      },
      {
        "label": "HL7 Message Context",
        "path": "$.mappings.hl7v251.messageContext"
      },
      {
        "label": "HL7 Data Type",
        "path": "$.mappings.hl7v251.dataType"
      },
      {
        "label": "HL7 Usage",
        "path": "$.mappings.hl7v251.usage"
      },
      {
        "label": "HL7 Cardinality",
        "path": "$.mappings.hl7v251.cardinality"
      },
      {
        "label": "HL7 Implementation Notes",
        "path": "$.mappings.hl7v251.implementationNotes"
      },
      {
        "label": "Repeating Group Element",
        "path": "$.mappings.hl7v251.repeatingGroupElementType"
      },
      {
        "label": "Sample Segment",
        "path": "$.mappings.hl7v251.sampleSegment"
      },
      {
        "label": "Comments",
        "path": "$.comments"
      }
    ]
  }",
                string mmg when mmg.Contains("Varicella_MMG") => "{
    "id": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
    "type": "Guide",
    "guideStatus": "UserAcceptanceTesting",
    "name": "Varicella",
    "shortName": "",
    "description": "VERSION: Final varicella message mapping guide (MMG) version 3, release 1, May 4, 2018.",
    "isActive": true,
    "createdBy": "59d12ba5-db62-4a03-be09-f3c9457fb483",
    "ownedBy": "01c77a03-0ed9-4f38-af32-fc1679c3058d",
    "internalVersion": 12,
    "createdDate": "2018-01-30T15:13:29.4966761+00:00",
    "lastUpdatedDate": "2020-03-19T02:36:18.6532933+00:00",
    "publishVersion": "",
    "profileIdentifier": "Varicella_MMG_V3.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO",
    "blocks": [
      {
        "id": "5ba813c4-3c27-451d-83af-d8881953588a",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 1,
        "type": "Single",
        "name": "Message Header",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": false,
        "elements": [
          {
            "id": "2e8bec8d-942e-4c78-affb-f5fe720f068c",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 0,
            "blockId": "168bd18e-f1e5-4301-bbd7-c7ef4525c0d9",
            "ordinal": 1,
            "name": "Message Profile Identifier",
            "description": "Message Profile Identifiers provide a literal value to use for the references in MSH-21. MSH-21 will always contain a reference to the notification type in the \"PHINProfileID\" namespace and a reference to the implemented version of the Generic MMG in the \"PHINMsgMapID\" namespace. For conditions that have a condition-specific MMG, MSH-21 will also contain a reference to that MMG that is also in the \"PHINMsgMapID\" namespace.\n",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": true,
            "repetitions": 3,
            "mayRepeat": "Y/3",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT115",
                "identifier": "N/A: MSH-21",
                "messageContext": "MSH-21",
                "dataType": "EI",
                "segmentType": "MSH",
                "obrPosition": 1,
                "fieldPosition": 21,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[3..3]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "CONFORMANCE STATEMENT: Message Profile ID (MSH-21) for this version of the MMG SHALL contain the literal value: ‘NOTF_ORU_v3.0^PHINProfileID^2.16.840.1.114222.4.10.3^ISO~Generic_MMG_V2.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO~Varicella_MMG_V3.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO'\n\nRefer to Conformance Statement CN-009 and CN-010 in the National Condition Reporting Case Notification Message Structure Specification\\Profile Version 3.0.",
                "sampleSegment": "MSH|^~\\&|SendAppName^2.16.840.1.114222.TBD^ISO|Sending-Facility^2.16.840.1.114222.TBD^ISO|PHINCDS^2.16.840.1.114222.4.3.2.10^ISO|PHIN^2.16.840.1.114222^ISO|20140630120030.1234-0500||ORU^R01^ORU_R01|MESSAGE CONTROL ID|D|2.5.1|||||||||NOTF_ORU_v3.0^PHINProfileID^2.16.840.1.114222.4.10.3^ISO~Generic_MMG_V2.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO~Varicella_MMG_V3.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO"
              }
            },
            "defaultValue": {
              "value": "Varicella_MMG_V3.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO"
            }
          }
        ]
      },
      {
        "id": "280026b5-43c5-4173-9c62-41aba6d57057",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 2,
        "type": "Single",
        "name": "Subject Related",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "df2f791b-5189-404e-972d-01c513ec8f66",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 1,
            "name": "Local Subject ID",
            "description": "The local ID of the subject/entity",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM197",
                "identifier": "N/A: PID-3",
                "messageContext": "PID-3\nPatient Identifier List",
                "dataType": "CX",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 3,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "PID-3.1\nID Number is the local Subject ID from the sending system's internally assigned Subject ID; \n\nPID-3.4\nAssigning Authority format <localID&OID&ISO>  \n\nDoes not pass Variable ID  or label.",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppNamelocalID&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "GenV2_TC01"
            }
          },
          {
            "id": "918225f5-4ffd-47a1-b7b1-27635f5429f6",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 2,
            "name": "Birth Date",
            "description": "Patient’s date of birth",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM115",
                "identifier": "N/A: PID-7",
                "messageContext": "PID-7\nDate/Time of Birth",
                "dataType": "TS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 7,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, PID-7 MAY be populated with '99999999'",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "19640502"
            }
          },
          {
            "id": "e233acfc-301a-4293-a2c8-06002a77f3a3",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 3,
            "name": "Subject’s Sex",
            "description": "Subject’s current sex",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Sex_MFU",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM113",
                "identifier": "N/A: PID-8",
                "messageContext": "PID-8\nAdministrative Sex",
                "dataType": "IS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 8,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "F"
            }
          },
          {
            "id": "18a43f2c-ff15-406b-b9e1-afd8df5239ef",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 4,
            "name": "Race Category",
            "description": "Race category - Major OMB Race Categories. Detailed race information would be rolled up to these major OMB race categories.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": true,
            "mayRepeat": "Y",
            "valueSetCode": "PHVS_RaceCategory_CDC_NullFlavor",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM152",
                "identifier": "N/A: PID-10",
                "messageContext": "PID-10\nRace",
                "dataType": "CE",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 10,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..*]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "2106-3"
            }
          },
          {
            "id": "13a244d2-8c20-4ddf-9a6c-a81f3ca4046a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 5,
            "name": "Other Race Text",
            "description": "Other Race Text",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM154",
                "identifier": "32624-9",
                "messageContext": "OBX segment with \nOBX-3.1=32624-9\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|ST|32624-9^Other Race Text^LN||Place details Other Race here ||||||F"
              }
            },
            "defaultValue": {
              "value": "Apache"
            }
          },
          {
            "id": "7d65fc52-7022-4857-a2af-cfa0eb685b3e",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 6,
            "name": "Ethnic Group",
            "description": "Based on the self-identity of the subject as Hispanic or Latino",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_EthnicityGroup_CDC_Unk",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM155",
                "identifier": "N/A: PID-22",
                "messageContext": "PID-22\nEthnic Group",
                "dataType": "CE",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 22,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "2135-2"
            }
          },
          {
            "id": "8fbdd55e-b971-465a-8df9-fea6a2df1c5f",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 7,
            "name": "Country of Birth",
            "description": "Country of Birth",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_BirthCountry_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM126",
                "identifier": "78746-5",
                "messageContext": "OBX segment with \nOBX-3.1=78746-5\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|CWE|78746-5^Country of Birth^LN||USA^United States^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "UZB"
            }
          },
          {
            "id": "dd308509-acc9-4fc5-b9ed-d31b8770285f",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 8,
            "name": "Other Birth Place",
            "description": "Other Birth Place",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM304",
                "identifier": "21842-0",
                "messageContext": "OBX segment with \nOBX-3.1=21842-0\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|ST|21842-0^Other Birth Place^LN||Place details about Other Birth Place here||||||F"
              }
            },
            "defaultValue": {
              "value": "USSR"
            }
          },
          {
            "id": "07eac6c3-948b-49ae-9050-5e5373749b3a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 9,
            "name": "Country of Usual Residence",
            "description": "Where does the person usually live (defined as their residence).\n\nThis variable replaces the Foreign Resident variable mentioned in 11-SI-04 titled \"Revised Guidelines for Determining Residency for Disease Reporting\" located at http://c.ymcdn.com/sites/www.cste.org/resource/resmgr/PS/11-SI-04.pdf.\n\nCases with country of usual residence equal to the US, Puerto Rico, and US Virgin Islands as well as unknown and null responses will be included in the state-specific counts and rates.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Country_ISO_3166-1",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV501",
                "identifier": "77983-5",
                "messageContext": "OBX segment with\nOBX-3.1=77983-5\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|2|CWE|77983-5^Country of Usual Residence^LN||USA^UNITED STATES^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "USA"
            }
          },
          {
            "id": "457353eb-9da7-469d-b91b-e969b5f64492",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 10,
            "name": "Subject Address County",
            "description": "County of residence of the subject",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_County_FIPS_6-4",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM165",
                "identifier": "N/A: PID-11.9",
                "messageContext": "PID-11.9\nPatient Address  - County",
                "dataType": "IS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 9,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "The entire address construct (PID-11) may repeat per HL7, but only expecting the first instance to be populated and parsed.\n\nAddress county will be used in the annual summary and  it needs to be populated",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "48201"
            }
          },
          {
            "id": "c5b828bf-ee57-4ac1-bf66-fc71a7bd28b9",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 11,
            "name": "Subject Address State",
            "description": "State of residence of the subject",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_State_FIPS_5-2",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM162",
                "identifier": "N/A: PID-11.4",
                "messageContext": "PID-11.4\nPatient Address  - State=value from value set",
                "dataType": "ST",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 4,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "The entire address construct (PID-11) may repeat per HL7, but only expecting the first instance to be populated and parsed.",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "a779a11d-ad38-4bd4-bbdb-1555514b9fc4",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 12,
            "name": "Subject Address ZIP Code",
            "description": "ZIP Code of residence of the subject",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM163",
                "identifier": "N/A: PID-11.5",
                "messageContext": "PID-11.5\nPatient Address  - Postal Code=string up to 12 characters",
                "dataType": "ST",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 5,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "The entire address construct (PID-11) may repeat per HL7, but only expecting the first instance to be populated and parsed.",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "77018"
            }
          }
        ]
      },
      {
        "id": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 3,
        "type": "Single",
        "name": "Case Related",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "9928d4d6-eea0-4e3f-9e06-85cfb2c3199a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 1,
            "name": "Date of Illness Onset",
            "description": "Date of the beginning of the illness.  Reported date of the onset of symptoms of the condition being reported to the public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV137",
                "identifier": "11368-8",
                "messageContext": "OBX segment with \nOBX-3.1=11368-8\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|1|TS|11368-8^Date of Illness Onset^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140224"
            }
          },
          {
            "id": "93942d4e-63ec-46a6-a5cd-1e71d976d90d",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 2,
            "name": "Illness End Date",
            "description": "Date at which the disease or condition ends.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV138",
                "identifier": "77976-9",
                "messageContext": "OBX segment with \nOBX-3.1=77976-9\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|2|TS|77976-9^Illness End Date^LN||20140413||||||F"
              }
            },
            "defaultValue": {
              "value": "20140302"
            }
          },
          {
            "id": "1334f3fc-a02a-47b3-92d4-63153b11dd64",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 3,
            "name": "Illness Duration",
            "description": "Length of time this subject had this disease or condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV139",
                "identifier": "77977-7",
                "messageContext": "OBX segment with \nOBX-3.1=77977-7\nOBX-5.2=numeric value\nOBX-6=units value from INV140 value set;",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|3|SN|77977-7-7^Illness Duration^LN||^12|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "6"
            }
          },
          {
            "id": "abd9a2fc-03ad-418b-9819-6bedc955dbaa",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 4,
            "name": "Illness Duration Units",
            "description": "Unit of time used to describe the length of the illness or condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "relatedElementId": "1334f3fc-a02a-47b3-92d4-63153b11dd64",
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_DurationUnit_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV140",
                "identifier": "N/A: OBX-6",
                "messageContext": "OBX-6-Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Part of the INV139 Observation/OBX Segment.",
                "sampleSegment": "OBX|3|SN|77977-7^Illness Duration^LN||^12|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "d"
            }
          },
          {
            "id": "f3722238-af5e-4346-907d-736edaa47863",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 5,
            "name": "Pregnancy Status",
            "description": "Indicates whether the subject was pregnant at the time of the event.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV178",
                "identifier": "77996-7",
                "messageContext": "OBX segment with \nOBX-3.1=77996-7\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|4|CWE|77996-7^Pregnancy Status^LN||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "4018be44-a07b-47fc-a422-3b41cf59d670",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 6,
            "name": "Diagnosis Date",
            "description": "Earliest date of diagnosis (clinical or laboratory) of condition being reported to public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV136",
                "identifier": "77975-1",
                "messageContext": "OBX segment with \nOBX-3.1=77975-1\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|5|TS|77975-1^Diagnosis Date^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "bc126dea-f2d7-4c00-9e6e-a92e240e1ae8",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 7,
            "name": "Hospitalized",
            "description": "Was subject hospitalized because of this event?",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV128",
                "identifier": "77974-4",
                "messageContext": "OBX segment with \nOBX-3.1=77974-4\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|6|CWE|77974-4^Hospitalized^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "4283972a-8ac7-4c88-8cb6-cbe3057b8bc7",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 8,
            "name": "Admission Date",
            "description": "Subject’s most recent admission date to the hospital for the condition covered by the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV132",
                "identifier": "8656-1",
                "messageContext": "OBX segment with \nOBX-3.1=8656-1\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Use the most recent admission, in association with this instance of the case.",
                "sampleSegment": "OBX|7|TS|8656-1^Admission Date^LN||20131230||||||F"
              }
            },
            "defaultValue": {
              "value": "20140226"
            }
          },
          {
            "id": "e29fcb10-851e-4643-a447-c90e9a27bb8a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 9,
            "name": "Discharge Date",
            "description": "Subject's most recent discharge date from the hospital for the condition covered by the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV133",
                "identifier": "8649-6",
                "messageContext": "OBX segment with \nOBX-3.1=8649-6\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Use the most recent discharge, related to the admission represented by variable INV132.",
                "sampleSegment": "OBX|8|TS|8649-6^Discharge Date^LN||20140104||||||F"
              }
            },
            "defaultValue": {
              "value": "20140302"
            }
          },
          {
            "id": "1514b03e-e4fb-42f1-b63a-4e6add08d7c6",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 10,
            "name": "Duration of Hospital Stay in Days",
            "description": "Subject's duration of stay at the hospital for the condition covered by the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV134",
                "identifier": "78033-8",
                "messageContext": "OBX segment with \nOBX-3.1=78033-8\nOBX-5.2=numeric value",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Populate OBX-6 with d^day^UCUM.",
                "sampleSegment": "OBX|9|SN|78033-8^Duration of hospital stay in days^LN||^5|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "4"
            }
          },
          {
            "id": "2383f96f-098a-4af3-9ada-f6c6aab923af",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 11,
            "name": "Subject Died",
            "description": "Did the subject die from this illness or complications of this illness?",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV145",
                "identifier": "77978-5",
                "messageContext": "OBX segment with \nOBX-3.1=77978-5\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|10|CWE|77978-5^Subject Died^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "827d2f8f-eec9-49f0-9265-0fc681f120b5",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 12,
            "name": "Deceased Date",
            "description": "If the subject died from this illness or complications associated with this illness, indicate the date of death.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV146",
                "identifier": "N/A: PID-29",
                "messageContext": "PID-29 Patient Death Date and Time",
                "dataType": "TS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 29,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID -29 Sample Segment :\n\nPID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC|||||||20"
              }
            },
            "defaultValue": {
              "value": "20140302"
            }
          },
          {
            "id": "c30ce921-63d7-4981-833b-5b5c99c51bb3",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 13,
            "name": "Condition Code",
            "description": "Condition or event that constitutes the reason the notification is being sent.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "N/A",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV169",
                "identifier": "N/A: OBR-31",
                "messageContext": "OBR-31 Reason for Study in the OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
                "dataType": "CE",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 31,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Refer to the Event Code List of Nationally Notifiable Diseases and Other Conditions of Public Health Importance document for the relevant MMWR year.\n\nThis references can be found on the NNDSS Messaging Mapping Guide web site: http://wwwn.cdc.gov/nndss/mes",
                "sampleSegment": "OBR|1|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|68991-9^Epidemiologic Information^LN|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "11550"
            }
          },
          {
            "id": "6665e1dc-de3d-4e98-a4cc-cb26c4289a2e",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 14,
            "name": "Local Record ID",
            "description": "Sending system-assigned local ID of the case investigation with which the subject is associated.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV168",
                "identifier": "N/A: OBR-3",
                "messageContext": "OBR-3\nFiller Order Number  in the OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
                "dataType": "EI",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 3,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "OBR-3.1 is the internally assigned case/investigation ID.\n\nOBR-3.3 is the OID for sending application as assigning authority.\n\nOBR-3.4 is the literal value: 'ISO'.\n\nNational reporting jurisdiction (77968-6) and Local Record ID (INV168 in OBR-3) are used together to define a unique case in the CDC database.  The values for each of these data elements must remain the same when sending updates on a unique case.  Any changes to these data elements will cause the addition of a new case to the CDC database.  For more details, refer to the document on the MMG web site: http://wwwn.cdc.gov/nndss/document/Generic_Data_Elements_that_Define_a_Unique_Case.docx",
                "sampleSegment": "OBR|2|\"\"|CASE/Investigation ID^SendAppName^2.16.840.1.114222.TBD^ISO|EPIINFO^Epidemiologic Information^CDCPHINVS|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "GenV2_TC01"
            }
          },
          {
            "id": "313e6282-fa94-43d7-b276-0c9e29f9c091",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 15,
            "name": "State Case Identifier",
            "description": "States use this identifier to link NEDSS investigations back to their own state investigations.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV173",
                "identifier": "77993-4",
                "messageContext": "OBX segment with \nOBX-3.1=77993-4\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|ST|77993-4^State Case Identifier^LN||2014IN100000001||||||F"
              }
            },
            "defaultValue": {
              "value": "TX4321"
            }
          },
          {
            "id": "17c8098b-0945-4a20-ae3a-0b608964b98c",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 16,
            "name": "Legacy Case Identifier",
            "description": "CDC uses this identifier to link current case notifications to case notifications submitted by a previous system (NETSS, STD-MIS, etc.).",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV200",
                "identifier": "77997-5",
                "messageContext": "OBX segment with \nOBX-3.1=77997-5\nOBX-5=Legacy Case Identifier",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For a NETSS case ID, please use the following format:  \nCase ID(6) - State(2) - Site(3) - Year(4)\ne.g.,  CaseId01LAB2009.",
                "sampleSegment": "OBX|2|ST|77997-5^Legacy Case Identifier^LN||61528936181002006||||||F"
              }
            },
            "defaultValue": {
              "value": "48432148S012014"
            }
          },
          {
            "id": "b0fa71f1-71c0-4ecb-b2ea-7432f5890ba5",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 17,
            "name": "Age at Case Investigation",
            "description": "Subject age at time of case investigation",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV2001",
                "identifier": "77998-3",
                "messageContext": "OBX segment with \nOBX-3.1=77998-3\nOBX-5.2=numeric value\nOBX-6=units value from INV2002 value set;",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "AGE should populate the second component of the OBX.5 field.  In HL7, components are typically separated by the character ‘^’ (Caret).\n\nOBX-5.2 will contain '9999' for unknown Age at case investigation.",
                "sampleSegment": "OBX|3|SN|77998-3^Age at Case investigation^LN||^51|a^year^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "49"
            }
          },
          {
            "id": "6a1a06f1-e752-4f67-948c-851160d9f374",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 18,
            "name": "Age Unit at Case Investigation",
            "description": "Subject age unit at time of case investigation",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "relatedElementId": "b0fa71f1-71c0-4ecb-b2ea-7432f5890ba5",
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_AgeUnit_UCUM",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV2002",
                "identifier": "N/A: OBX-6",
                "messageContext": "OBX-6-Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Part of the INV2001 Observation/OBX Segment.",
                "sampleSegment": "OBX|3|SN|77998-3^Age at Case investigation^LN||^51|a^year^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "a"
            }
          },
          {
            "id": "55dd0919-8991-47cd-a946-788634c1d4a9",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 19,
            "name": "Case Disease Imported Code",
            "description": "Indication of where the disease/condition was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_DiseaseAcquiredJurisdiction_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV152",
                "identifier": "77982-7",
                "messageContext": "OBX segment with \nOBX-3.1=77982-7\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|4|CWE|77982-7^Case Disease Imported Code^LN||PHC246^Out of State^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC246"
            }
          },
          {
            "id": "7d1a4941-6a05-45b7-a671-74ea67a1b1d1",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 20,
            "name": "Imported Country",
            "description": "If the disease or condition was imported, indicates the country in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Country_ISO_3166-1",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV153",
                "identifier": "INV153",
                "messageContext": "OBX segment with \nOBX-3.1=INV153\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Three-letter country code",
                "sampleSegment": "OBX|5|CWE|INV153^Imported Country^PHINQUESTION||MEX^Mexico^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "USA"
            }
          },
          {
            "id": "1863f6dd-d646-47d5-b886-9080a8cfabc0",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 21,
            "name": "Imported State",
            "description": "If the disease or condition was imported, indicates the state in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_State_FIPS_5-2",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV154",
                "identifier": "INV154",
                "messageContext": "OBX segment with \nOBX-3.1=INV154\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Two-digit numeric FIPS code",
                "sampleSegment": "OBX|6|CWE|INV154^Imported State^PHINQUESTION||48^Texas^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "04"
            }
          },
          {
            "id": "d692f87d-4095-4777-bafb-7049cdc80d07",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 22,
            "name": "Imported City",
            "description": "If the disease or condition was imported, indicates the city in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_City_USGS_GNIS",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV155",
                "identifier": "INV155",
                "messageContext": "OBX segment with \nOBX-3.1=INV155\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "One-to-ten digit numeric GNIS Feature ID",
                "sampleSegment": "OBX|7|CWE|INV155^Imported City^PHINQUESTION||1350851^Abernathy^USGSGNIS||||||F"
              }
            },
            "defaultValue": {
              "value": "",
              "label": "Houston, TX, Harris"
            }
          },
          {
            "id": "bf98da0d-48ef-4bcb-aacc-e3f2a43ab276",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 23,
            "name": "Imported County",
            "description": "If the disease or condition was imported, contains the county of origin of the disease or condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_County_FIPS_6-4",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV156",
                "identifier": "INV156",
                "messageContext": "OBX segment with \nOBX-3.1=INV156\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Five-digit numeric FIPS code",
                "sampleSegment": "OBX|8|CWE|INV156^Imported County^PHINQUESTION||48303^Lubbock, TX^FIPS6_4||||||F"
              }
            },
            "defaultValue": {
              "value": "",
              "label": "Harris, TX"
            }
          }
        ]
      },
      {
        "id": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 4,
        "type": "Repeat",
        "name": "Repeating Variables for Disease Exposure",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "2cc47e98-8212-4ef1-948a-1e2fcf7309ca",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 1,
            "name": "Country of Exposure",
            "description": "Indicates the country in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Country_ISO_3166-1",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV502",
                "identifier": "77984-3",
                "messageContext": "OBX segment with \nOBX-3.1=77984-3\nOBX-4=obs sub-ID\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV153 (Imported Country) with INV502 (Country of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported fields for reports and publications.",
                "sampleSegment": "OBX|9|CWE|77984-3^Country of Exposure^LN|1|USA^United States^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "USA"
            }
          },
          {
            "id": "cd308f98-95c1-4d93-a9bd-52335c3d3486",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 2,
            "name": "State or Province of Exposure",
            "description": "Indicates the state (or Province) in which the disease was likely acquired.\n\nNote: If Country of exposure was US, populate with US State. If Country of exposure was Mexico, populate with Mexican State. If country of exposure was Canada, populated with Canadian Province. For all other countries, leave null.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_StateProvinceOfExposure_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV503",
                "identifier": "77985-0",
                "messageContext": "OBX segment with\nOBX-3.1=77985-0\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV154 (Imported State) with INV503 (State or Province of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace the imported field or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported fields for reports and publications.",
                "sampleSegment": "OBX|10|CWE|77985-0^State or Province of Exposure^LN|1|06^California^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "40e12cd8-156e-4205-9073-173bce6aef74",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 3,
            "name": "City of Exposure",
            "description": "Indicates the city in which the disease was likely acquired\n\nNote: If country of exposure is US, populate with US city. For all other cities, can be populated but not required.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV504",
                "identifier": "77986-8",
                "messageContext": "OBX segment with \nOBX-3.1=77986-8\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV155 (Imported City) with INV504 (City of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported field for reports and publications.",
                "sampleSegment": "OBX|11|ST|77986-8^City of Exposure^LN|1|Pasadena||||||F"
              }
            },
            "defaultValue": {
              "value": "Houston"
            }
          },
          {
            "id": "7cbc5158-8d8e-4a07-92d8-81186115b0b1",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 4,
            "name": "County of Exposure",
            "description": "Indicates the county in which the disease was likely acquired\n\nNote: If country of exposure is US, populate with US county.  Otherwise, leave null.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV505",
                "identifier": "77987-6",
                "messageContext": "OBX segment with \nOBX-3.1=77987-6\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV156 (Imported County) with INV505 (County of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported field for reports and publications.",
                "sampleSegment": "OBX|12|ST|77987-6^County of Exposure^LN|1|Los Angeles||||||F"
              }
            },
            "defaultValue": {
              "value": "Harris"
            }
          }
        ]
      },
      {
        "id": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 5,
        "type": "Single",
        "name": "Misc",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "47253d49-9f33-4574-97d4-734e1a646371",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 1,
            "name": "Transmission Mode",
            "description": "Code for the mechanism by which disease or condition was acquired by the subject of the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_CaseTransmissionMode_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV157",
                "identifier": "77989-2",
                "messageContext": "OBX segment with \nOBX-3.1=77989-2\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|13|CWE|77989-2^Transmission Mode^LN||420014008^Bloodborne Transmission^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "416086007"
            }
          },
          {
            "id": "85a02430-b77d-4027-8a97-20895cd61c55",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 2,
            "name": "Case Class Status Code",
            "description": "Status of the case/event as suspect, probable, confirmed, or not a case per CSTE/CDC/ surveillance case definitions.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_CaseClassStatus_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV163",
                "identifier": "77990-0",
                "messageContext": "OBX segment with \nOBX-3.1=77990-0\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|14|CWE|77990-0^Case Class Status Code^LN||410605003^Confirmed Present^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "410605003"
            }
          },
          {
            "id": "074a0eae-f5cb-4db7-84be-d855b1108675",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 3,
            "name": "Immediate National Notifiable Condition",
            "description": "Does this case meet the criteria for immediate (extremely urgent or urgent) notification to CDC? Refer to the 2015 list of NNC by type of notification category (extremely urgent, urgent, and standard) at the following link: http://wwwn.cdc.gov/nndss/document/NNC_2015_Notification_Requirements_By_Category.pdf",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT120",
                "identifier": "77965-2",
                "messageContext": "OBX segment with \nOBX-3.1=77965-2\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "If Immediate National Notifiable Condition = 'Y' (meaning the condition is immediately nationally notifiable), populate OBX.5 with 'Y^Yes^HL70136'.\n\nIf Immediate National Notifiable Condition= 'N' (meaning it is NOT immediately nationally notifiable), populate OBX.5 with 'N^No^HL70136'.\n\nIf Immediate National Notifiable Condition = 'U' (meaning it is not known whether the condition is immediately nationally notifiable or not), populate OBX.5 with 'UNK^Unknown^NULLFL'.",
                "sampleSegment": "OBX|15|CWE|77965-2^Immediate National Notifiable Condition^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "dfa5ee59-5af5-4c65-9f23-54c69b7ab086",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 4,
            "name": "Case Outbreak Indicator",
            "description": "Denotes whether the reported case was associated with an identified outbreak.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV150",
                "identifier": "77980-1",
                "messageContext": "OBX segment with \nOBX-3.1=77980-1\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|16|CWE|77980-1^Case Outbreak Indicator^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "b990f6de-497d-4ffb-89a4-e786075421d4",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 5,
            "name": "Case Outbreak Name",
            "description": "A state-assigned name for an identified outbreak.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV151",
                "identifier": "77981-9",
                "messageContext": "OBX segment with \nOBX-3.1=77981-9\nOBX-5=Case Outbreak Name (up to 199 characters)",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Note: that this is a locally-defined field.",
                "sampleSegment": "OBX|17|ST|77981-9^Case Outbreak Name^LN||HANSENOUTB1||||||F"
              }
            },
            "defaultValue": {
              "value": "HANSENOUTB1"
            }
          },
          {
            "id": "8b866406-5cad-4586-9284-7c0b7537e246",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 6,
            "name": "Notification Result Status",
            "description": "Status of the notification",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_ResultStatus_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT118",
                "identifier": "N/A: OBR-25",
                "messageContext": "OBR-25\nResult Status in the OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
                "dataType": "ID",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 25,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBR|2|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|EPIINFO^Epidemiologic Information^CDCPHINVS|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "F"
            }
          },
          {
            "id": "5f37a5f6-092e-4911-bcc2-f4016bd5908e",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 7,
            "name": "Jurisdiction Code",
            "description": "Identifier for the physical site from which the notification is being submitted.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV107",
                "identifier": "77969-4",
                "messageContext": "OBX segment with \nOBX-3.1=77969-4\nOBX-5=Jurisdiction (up to 199 characters)",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Note: that this is a locally-defined field",
                "sampleSegment": "OBX|18|ST|77969-4^Jurisdiction Code^LN||18||||||F"
              }
            },
            "defaultValue": {
              "value": "S01"
            }
          },
          {
            "id": "c5d4d7a0-123e-4718-835e-1ae09039f43a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 8,
            "name": "Reporting Source Type Code",
            "description": "Type of facility or provider associated with the source of information sent to Public Health.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_ReportingSourceType_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV112",
                "identifier": "48766-0",
                "messageContext": "OBX segment with \nOBX-3.1=48766-0\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|19|CWE|48766-0^Reporting Source Type Code^LN||1^Hospital^HL70406||||||F"
              }
            },
            "defaultValue": {
              "value": "1"
            }
          },
          {
            "id": "2559754c-ef80-4381-a94d-e906314a63e9",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 9,
            "name": "Reporting Source ZIP Code",
            "description": "ZIP Code of the reporting source for this case.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV118",
                "identifier": "52831-5",
                "messageContext": "OBX segment with \nOBX-3.1=52831-5\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|20|ST|52831-5^Reporting Source Zip Code^LN||47635||||||F"
              }
            },
            "defaultValue": {
              "value": "77018"
            }
          },
          {
            "id": "8f782b26-1227-4505-8e42-8be9e3d44aea",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 10,
            "name": "Binational Reporting Criteria",
            "description": "For cases meeting the binational criteria, select all the criteria which are met.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": true,
            "mayRepeat": "Y",
            "valueSetCode": "PHVS_BinationalReportingCriteria_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV515",
                "identifier": "77988-4",
                "messageContext": "OBX segment with \nOBX-3.1=77988-4\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..*]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|21|CWE|77988-4^Binational Reporting Criteria^LN||PHC1140^Exposure to a suspected product from Mexico or Canada^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC1140"
            }
          },
          {
            "id": "d219d4e1-a3fa-4689-8dc6-8545742643b1",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 11,
            "name": "Person Reporting to CDC - Name",
            "description": "Name of the person who is reporting the case to the CDC.  This is the person that CDC should contact in a state if there are questions regarding this case notification.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV190",
                "identifier": "74549-7",
                "messageContext": "OBX segment with \nOBX-3.1=74549-7\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|22|ST|74549-7^Person Reporting to CDC - Name^LN||Smith, John||||||F"
              }
            },
            "defaultValue": {
              "value": "Smith, John"
            }
          },
          {
            "id": "187044c2-c2a0-4c20-9a02-79b3b114968b",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 12,
            "name": "Person Reporting to CDC - Phone Number",
            "description": "Phone Number of the person who is reporting the case to the CDC.  This is the person that CDC should contact in a state if there are questions regarding this case notification.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV191",
                "identifier": "74548-9",
                "messageContext": "OBX segment with \nOBX-3.1=74548-9\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|23|ST|74548-9^Person Reporting to CDC-Phone Number^LN||(734)677-7777||||||F"
              }
            },
            "defaultValue": {
              "value": "444-321-1234"
            }
          },
          {
            "id": "04514ba0-4f17-4822-96ec-d07d0f97bf90",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 13,
            "name": "Person Reporting to CDC - Email",
            "description": "Email Address of the person reporting the case to the CDC. This is the person that CDC should contact in a state if there are questions regarding this case notification.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV193",
                "identifier": "74547-1",
                "messageContext": "OBX segment with \nOBX-3.1=74547-1\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|24|ST|74547-1^Person Reporting to CDC - Email^LN||xxx@yyy.org||||||F"
              }
            },
            "defaultValue": {
              "value": "jsmith@txdoh.org"
            }
          },
          {
            "id": "20f6160e-7b39-426e-aebf-1e76ce7c7856",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 14,
            "name": "Case Investigation Start Date",
            "description": "The date the case investigation was initiated.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV147",
                "identifier": "77979-3",
                "messageContext": "OBX segment with \nOBX-3.1=77979-3\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|25|DT|77979-3^Investigation State Date^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "e396d078-4e20-4830-8111-8cdc06fefce3",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 15,
            "name": "Date First Electronically Submitted",
            "description": "Date/time the notification was first electronically sent to CDC.  This value does not change after the original notification.",
            "comments": "",
            "status": "Final",
            "dataType": "DateTime",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT103",
                "identifier": "N/A: OBR-7",
                "messageContext": "OBR-7=date",
                "dataType": "TS",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 7,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Refer to Conformance Statement CN-017 in the PHIN Messaging Guide for Case Notification Reporting, Version 3.0, Release 1.",
                "sampleSegment": "OBR|1|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|68991-9^Epidemiologic Information^LN|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "20140227170100"
            }
          },
          {
            "id": "fff2da7c-79de-4582-8560-14cef5f71ccb",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 16,
            "name": "Date of Electronic Case Notification to CDC",
            "description": "Date/time this version of the electronic case notification was sent.  It will be the same value as NOT103 for the original notification.  For updates, this is the update/send date/time.",
            "comments": "",
            "status": "Final",
            "dataType": "DateTime",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT106",
                "identifier": "N/A: OBR-22",
                "messageContext": "OBR-22=date",
                "dataType": "TS",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 22,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Refer to Conformance Statement CN-018 in the PHIN Messaging Guide for Case Notification Reporting, Version 3.0, Release 1.",
                "sampleSegment": "OBR|1|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|68991-9^Epidemiologic Information^LN|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "20140227170100"
            }
          },
          {
            "id": "54ce917b-82c4-406c-ab82-871536892a20",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 17,
            "name": "Date Reported",
            "description": "Date that a health department first suspected the subject might have the condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV111",
                "identifier": "77995-9",
                "messageContext": "OBX segment with \nOBX-3.1=77995-9\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|26|DT|77995-9^Date Reported^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "5cd792cf-fc9a-4bb4-b6b3-90e08f59091d",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 18,
            "name": "Earliest Date Reported to County",
            "description": "Earliest date reported to county public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV120",
                "identifier": "77972-8",
                "messageContext": "OBX segment with \nOBX-3.1=77972-8\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|27|TS|77972-8^Earliest Date Reported to County^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "33ed2ea9-0e8e-44fc-96a3-a4de42e403bf",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 19,
            "name": "Earliest Date Reported to State",
            "description": "Earliest date reported to state public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV121",
                "identifier": "77973-6",
                "messageContext": "OBX segment with \nOBX-3.1=77973-6\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|28|TS|77973-6^Earliest Date reported to State^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "e5f0a1fa-53d4-4c5f-b63e-880e9c127ccf",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 20,
            "name": "MMWR Week",
            "description": "MMWR Week for which case information is to be counted for MMWR publication.",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV165",
                "identifier": "77991-8",
                "messageContext": "OBX segment with \nOBX-3.1=77991-8\nOBX-5.2=numeric value",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "WEEK should populate the second component of the OBX.5 field.",
                "sampleSegment": "OBX|29|SN|77991-8^MMWR Week^LN||^20||||||F"
              }
            },
            "defaultValue": {
              "value": "9"
            }
          },
          {
            "id": "d7fcf097-015e-42a0-8b11-1e795b5820eb",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 21,
            "name": "MMWR Year",
            "description": "MMWR Year (YYYY) for which case information is to be counted for MMWR publication.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV166",
                "identifier": "77992-6",
                "messageContext": "OBX segment with \nOBX-3.1=77992-6\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "CONFORMANCE STATEMENT:\nOBX-5=date SHALL be in YYYY format",
                "sampleSegment": "OBX|30|DT|77992-6^MMWR Year^LN||2014||||||F"
              }
            },
            "defaultValue": {
              "value": "2014"
            }
          },
          {
            "id": "300c94b0-2aa5-4174-834c-c2799ac843b8",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 22,
            "name": "Date CDC Was First Verbally Notified of This Case",
            "description": "Date the case of an Immediately National Notifiable Condition was first verbally reported to the CDC Emergency Operation Center or the CDC Subject Matter Expert responsible for this condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV176",
                "identifier": "77994-2",
                "messageContext": "OBX segment with \nOBX-3.1=77994-2\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|31|DT|77994-2^Date CDC was first verbally notified of this Case^LN||20130106||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "2a5d04d1-4fcf-43ba-8654-1dd2172978cf",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 23,
            "name": "Date First Reported to PHD",
            "description": "Date the report was first sent to the public health department (local, county or state) by reporter (physician, lab, etc.).",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV177",
                "identifier": "77970-2",
                "messageContext": "OBX segment with \nOBX-3.1=77970-2\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|32|DT|77970-2^Date First Reported to PHD^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "575f896d-c491-4605-9414-f0ca1cc446b8",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 24,
            "name": "Reporting State",
            "description": "State reporting the notification",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_State_FIPS_5-2",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT109",
                "identifier": "77966-0",
                "messageContext": "OBX segment with \nOBX-3.1=77966-0\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|33|CWE|77966-0^Reporting State^LN||18^Indiana^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "54d73684-6024-4040-a5de-37f01c4ab80a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 25,
            "name": "Reporting County",
            "description": "County reporting the notification",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_County_FIPS_6-4",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT113",
                "identifier": "77967-8",
                "messageContext": "OBX segment with \nOBX-3.1=77967-8\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|34|CWE|77967-8^Reporting County^LN||18097^Marion^FIPS6_4||||||F"
              }
            },
            "defaultValue": {
              "value": "48201"
            }
          },
          {
            "id": "69a1f2f9-7d4f-4887-90cb-f2cf23447094",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 26,
            "name": "National Reporting Jurisdiction",
            "description": "National jurisdiction reporting the notification to CDC",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_NationalReportingJurisdiction_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT116",
                "identifier": "77968-6",
                "messageContext": "OBX segment with \nOBX-3.1=77968-6\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "National reporting jurisdiction (77968-6) and Local Record ID (INV168 in OBR-3) are used together to define a unique case in the CDC database. The values for each of these data elements must remain the same when sending updates on a unique case.  Any changes to these data elements will cause the addition of a new case to the CDC database.  For more details, refer to the document on the MMG web site: http://wwwn.cdc.gov/nndss/document/Generic_Data_Elements_that_Define_a_Unique_Case.docx",
                "sampleSegment": "OBX|35|CWE|77968-6^National Reporting Jurisdiction^LN||18^Indiana^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "4ebe3e8d-a885-495e-883d-7a9e1d56c239",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 27,
            "name": "Comment",
            "description": "Use this field, if needed, to communicate anything unusual about this case, which is not already covered with the other data elements.  \n\nDo not send personally identifiable information to CDC in this field.",
            "comments": "",
            "status": "Final",
            "dataType": "LongText",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV886",
                "identifier": "77999-1",
                "messageContext": "OBX segment with \nOBX-3.1=77999-1\nOBX-5=Text String",
                "dataType": "TX",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Do not send personally identifiable information to CDC in this field.",
                "sampleSegment": "OBX|36|TX|77999-1^Comment Field^LN||Comment to communicate something unusual about this case which is not already covered with other data elements||||||F"
              }
            },
            "defaultValue": {
              "value": "No comments at this time"
            }
          }
        ]
      },
      {
        "id": "168bd18e-f1e5-4301-bbd7-c7ef4525c0d9",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 1,
        "type": "Single",
        "name": "MSH",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": false,
        "elements": [],
        "expanded": true
      },
      {
        "id": "eca939d2-ff3c-4d8d-933a-6cf3e4d227d9",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 2,
        "template": {
          "id": "a4e54874-8fdf-46c0-be08-f5327a1ede75",
          "internalVersion": 0,
          "name": "START Template",
          "status": "L"
        },
        "type": "Single",
        "name": "START: EPIDEMIOLOGIC INFORMATION SECTION: The observations in this section will be mapped under an \"Epidemiologic Information\" category OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [],
        "expanded": true
      },
      {
        "id": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 3,
        "type": "Single",
        "name": "Clinical Questions",
        "startingDescription": "START: Clinical Questions",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "1c377d60-ef66-43a6-ac27-7f104e4b9773",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 1,
            "name": "Total Number of Lesions",
            "description": "Choose the numeric range within which a count of the patient's lesions falls.",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "SCT",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_NumberOfLesions_VZ",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR100",
                "identifier": "300579006",
                "messageContext": "OBX segment with\nOBX-3.1=300579006\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|300579006^Total Number of Lesions^SCT||PHC222^<50^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC222"
            }
          },
          {
            "id": "97fc17fb-89b3-4547-aac6-1852205feb70",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 2,
            "name": "Specify Number of Lesions",
            "description": "If less than 50, specify number of lesions.",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "SCT",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR163",
                "identifier": "246206008",
                "messageContext": "OBX segment with\nOBX-3.1=246206008\nOBX-5.2=numeric value (see SN data type)",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown number of lesions, OBX-5 MAY be populated with '99'.",
                "sampleSegment": "OBX|nn|SN|246206008^Specify Number of Lesions^SCT||^35||||||F"
              }
            },
            "defaultValue": {
              "value": "35"
            }
          },
          {
            "id": "f7f1a742-b015-43bb-bedf-a22d9a04d2fb",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 3,
            "name": "Rash Onset Date",
            "description": "Date on which the physical manifestations of the illness—the rash—appeared",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR102",
                "identifier": "81268-5",
                "messageContext": "OBX segment with\nOBX-3.1=81268-5\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|81268-5^Rash Onset Date^LN||20140115||||||F"
              }
            },
            "defaultValue": {
              "value": "20140115"
            }
          },
          {
            "id": "bff373fc-4102-42e4-9c49-7a325fa3c400",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 4,
            "name": "Was the Rash Generalized",
            "description": "Was the rash generalized?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "SCT",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "725119006",
                "messageContext": "OBX segment with\nOBX-3.1=725119006\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|725119006^Was the Rash Generalized^SCT||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "bf15731a-59b1-4dd6-a129-0bbdce76924d",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 5,
            "name": "Body Region(s) of Rash",
            "description": "If rash was not generalized, specify the body region(s) where the rash occurred.",
            "category": "Clinical",
            "comments": "OBX|nn|CWE|364402001^Body Region(s) of Rash^SCT||PHC1438^Head/Face without eye involvement^CDCPHINVS~PHC1440^Neck/shoulder^CDCPHINVS||||||F",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "SCT",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": true,
            "mayRepeat": "Y",
            "valueSetCode": "PHVS_BodyRegionOfRash_VZ",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "364402001",
                "messageContext": "OBX segment with\nOBX-3.1=364402001\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..*]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "This is a 'select all that apply' data element.\n\nThe user should send all responses (values) for Body Region(s) of Rash that apply in OBX-5. \n\nOBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|364402001^Body Region(s) of Rash^SCT||PHC1440^Neck/shoulder^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC1440"
            }
          },
          {
            "id": "160dfe3b-12bc-4e74-86f4-b8ae24bc56bf",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 6,
            "name": "Character of Lesions",
            "description": "Character or presentation of the majority of lesions",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "SCT",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_CharacterofLesions_VZ",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "364637009",
                "messageContext": "OBX segment with\nOBX-3.1=364637009\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|364637009^Character of Lesions^SCT||263804000^Maculopapular^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "263804000"
            }
          },
          {
            "id": "6fb3c866-7c99-40e0-8c55-ffa973f0d8d0",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 7,
            "name": "Hemorrhagic Lesions",
            "description": "Were the lesions (filled with blood) hemorrhagic?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR115",
                "identifier": "INV911",
                "messageContext": "OBX segment with\nOBX-3.1=INV911\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV911^Hemorrhagic Lesions^PHINQUESTION||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "37c56170-278f-4a1d-b3f9-886cd8a08947",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 8,
            "name": "Itchy Lesions",
            "description": "Were the lesions itchy?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "SCT",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR116",
                "identifier": "418290006",
                "messageContext": "OBX segment with\nOBX-3.1=418290006\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|418290006^Itchy Lesions^SCT||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "dd3d55c5-2823-4528-9fbf-c8a8e4fb5020",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 9,
            "name": "Lesions Appear as Crops or Waves",
            "description": "Did the lesions appear as crops and/or waves?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR118",
                "identifier": "INV912",
                "messageContext": "OBX segment with\nOBX-3.1=INV912\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV912^Lesions Appear as Crops or Waves^PHINQUESTION||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "aa924df7-fcbc-4dd1-a85b-33472657b910",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 10,
            "name": "Crusted Lesions",
            "description": "Did the lesions crust/scab over?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR119",
                "identifier": "INV913",
                "messageContext": "OBX segment with\nOBX-3.1=INV913\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV913^Crusted Lesions^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "8b6f3a40-614e-44a0-aeaf-a44b925e3293",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 11,
            "name": "Rash Duration",
            "description": "How many days did the rash being reported in this investigation last (until all lesions crust or no new lesions appear)?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "81269-3",
                "messageContext": "OBX segment with\nOBX-3.1=81269-3\nOBX-5.2=numeric value (see SN data type)\nOBX-6=d^day^UCUM",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {
                  "6": "d^day^UCUM"
                },
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown rash duration, OBX-5 MAY be populated with '999'.",
                "sampleSegment": "OBX|nn|SN|81269-3^Rash Duration^LN||^35|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "35"
            }
          },
          {
            "id": "fa0e0729-4716-46ab-99cd-a6f858d087db",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 12,
            "name": "Fever",
            "description": "Did the subject have a measured temperature greater than two degrees above normal?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "SCT",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR122",
                "identifier": "386661006",
                "messageContext": "OBX segment with\nOBX-3.1=386661006\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|386661006^Fever^SCT||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "45de48d1-01f9-4159-8a31-1b07b9b4adfe",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 13,
            "name": "Date of Fever Onset",
            "description": "Indicates the date of fever onset",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR123",
                "identifier": "81266-9",
                "messageContext": "OBX segment with\nOBX-3.1=81266-9\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|81266-9^Date of Fever Onset^LN||20140115||||||F"
              }
            },
            "defaultValue": {
              "value": "20140115"
            }
          },
          {
            "id": "bb878d14-7463-4a60-a8e9-3756bb31ff64",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 14,
            "name": "Highest Measured Temperature",
            "description": "What was the subject's highest measured temperature during this illness?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR124",
                "identifier": "81265-1",
                "messageContext": "OBX segment with\nOBX-3.1=81265-1\nOBX-5.2=numeric value (see SN data type)\nOBX-6=units value from Temperature Units value set",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Expected values: 36.0-110.0, 999.9\n\nFor unknown temperature, OBX-5 MAY be populated with '999.9'.",
                "sampleSegment": "OBX|nn|SN|81265-1^Highest Measured Temperature^LN||^102.5|[degF]^degree Fahrenheit [temperature]^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "102.5"
            }
          },
          {
            "id": "7e659b65-89f8-4a8a-a549-9b962b808a3f",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 15,
            "name": "Temperature Units",
            "description": "Units for highest measured temperature",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": true,
            "relatedElementId": "bb878d14-7463-4a60-a8e9-3756bb31ff64",
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_TemperatureUnit_UCUM",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV2003",
                "identifier": "N/A: OBX-6",
                "messageContext": "OBX-6 Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Part of the 81265-1 Observation/OBX Segment",
                "sampleSegment": "OBX|nn|SN|81265-1^Highest Measured Temperature^LN||^102.5|[degF]^degree Fahrenheit [temperature]^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "[degF]"
            }
          },
          {
            "id": "33bfcc6a-c141-4408-a1ca-198c72e2d11e",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 16,
            "name": "Fever Duration",
            "description": "Total number of days fever lasted",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR125",
                "identifier": "81264-4",
                "messageContext": "OBX segment with\nOBX-3.1=81264-4\nOBX-5.2=numeric value (see SN data type)\nOBX-6=d^day^UCUM",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {
                  "6": "d^day^UCUM"
                },
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown fever duration, OBX-5 MAY be populated with '999'.",
                "sampleSegment": "OBX|nn|SN|81264-4^Fever Duration^LN||^3|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "3"
            }
          },
          {
            "id": "04853748-4704-4e63-ac66-557091e275e1",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 17,
            "name": "Patient Immunocompromised",
            "description": "Is patient immunocompromised due to medical condition or treatment?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "SCT",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR126",
                "identifier": "370388006",
                "messageContext": "OBX segment with\nOBX-3.1=370388006\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|370388006^Patient Immunocompromised^SCT||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "257384cf-d5b6-49ff-98e3-2d150c1bee2f",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 18,
            "name": "Immunocompromised Associated Condition or Treatment",
            "description": "If the patient is immunocompromised, what is the associated condition or treatment?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR127",
                "identifier": "INV933",
                "messageContext": "OBX segment with\nOBX-3.1=INV933\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown associated condition or treatment,  OBX-5 MAY be populated with 'unknown'.",
                "sampleSegment": "OBX|nn|ST|INV933^Immunocompromised Associated Condition or Treatment^PHINQUESTION||string up to 199 characters||||||F"
              }
            },
            "defaultValue": {
              "value": "string up to 199 characters"
            }
          },
          {
            "id": "168176dc-53c3-4c4d-b792-e521c7f129bc",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 19,
            "name": "Did the Patient Visit a Healthcare Provider During This Illness",
            "description": "Did the patient visit a healthcare provider during this illness?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR128",
                "identifier": "VAR128",
                "messageContext": "OBX segment with\nOBX-3.1=VAR128\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|VAR128^Did the Patient Visit a Healthcare Provider During This Illness^PHINQUESTION||UNK^Unknown^NULLFL||||||F"
              }
            },
            "defaultValue": {
              "value": "UNK"
            }
          },
          {
            "id": "0ebcd74c-59fe-4ef0-a3b0-667d9de568e1",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f90f658a-8c90-4061-ac13-9b4cfdb94817",
            "ordinal": 20,
            "name": "Reason for Hospitalization",
            "description": "If the subject was hospitalized because of this event, indicate the reason(s).",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": true,
            "mayRepeat": "Y",
            "valueSetCode": "PHVS_ReasonForHospitalization_VZ",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "86947-9",
                "messageContext": "OBX segment with\nOBX-3.1=86947-9\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..*]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "This is a 'select all that apply' data element.\n\nOBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|86947-9^Reason for Hospitalization^LN||PHC1504^Severe Varicella Presentation^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC1504"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "5165e28b-a6b4-4f5f-bcf6-1ac1a95710cd",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 4,
        "type": "RepeatParentChild",
        "name": "Complications Repeating Group",
        "startingDescription": "START: Complications Repeating Group",
        "endingDescription": "END: Complications Repeating Group",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "471b3da9-662b-4add-b14a-6fb6f8a1187f",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "5165e28b-a6b4-4f5f-bcf6-1ac1a95710cd",
            "ordinal": 1,
            "name": "Type of Complications",
            "description": "Complications associated with the illness being reported",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Complications_VZ",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "67187-5",
                "messageContext": "OBX segment with\nOBX-3.1=67187-5\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|67187-5^Type of Complications^LN|1|233604007^Pneumonia^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "233604007"
            }
          },
          {
            "id": "4e44e633-e667-4e5e-8822-2615f9691a2a",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "5165e28b-a6b4-4f5f-bcf6-1ac1a95710cd",
            "ordinal": 2,
            "name": "Type of Complications Indicator",
            "description": "Indicator for associated complication",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "INV920",
                "messageContext": "OBX segment with\nOBX-3.1=INV920\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV920^Type of Complications Indicator^PHINQUESTION|1|Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "b3320d55-f5dd-4671-a795-f2b2860f1642",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 5,
        "type": "Single",
        "name": "Clinical Questions",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": false,
        "elements": [
          {
            "id": "0def0a28-04e1-4993-908f-6f93a141ead6",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "b3320d55-f5dd-4671-a795-f2b2860f1642",
            "ordinal": 1,
            "name": "Chest X-ray for Pneumonia",
            "description": "Result of chest x-ray for pneumonia",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_PosNegUnkNotDone_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "INV923",
                "messageContext": "OBX segment with\nOBX-3.1=INV923\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV923^Chest X-ray for Pneumonia^PHINQUESTION||260385009^Negative^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "260385009"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "ed4e75d5-a3d7-4589-896e-d07117b53e36",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 6,
        "type": "Single",
        "name": "Clinical Footer",
        "startingDescription": "END: Clinical Questions",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [],
        "expanded": true
      },
      {
        "id": "3ec3d710-8d1c-41de-84e2-1285142eaa04",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 7,
        "type": "Single",
        "name": "Treatment Questions",
        "startingDescription": "START: Treatment Questions",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "a21f5b4a-041c-4272-88b7-367672c71b8f",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "3ec3d710-8d1c-41de-84e2-1285142eaa04",
            "ordinal": 1,
            "name": "Antiviral Medication",
            "description": "Was the patient treated with antivirals for this condition?",
            "category": "Treatment",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR139",
                "identifier": "VAR139",
                "messageContext": "OBX segment with\nOBX-3.1=VAR139\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|VAR139^Antiviral Medication^PHINQUESTION||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "a7489fba-58cb-4c55-afd4-5cdcf041e5f6",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 8,
        "type": "RepeatParentChild",
        "name": "Antiviral Treatment Repeating Group",
        "startingDescription": "START: Antiviral Treatment Repeating Group",
        "endingDescription": "END: Antiviral Treatment Repeating Group",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "0752c163-fd04-4ac0-96a5-302cf76bccc2",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "a7489fba-58cb-4c55-afd4-5cdcf041e5f6",
            "ordinal": 1,
            "name": "Medication Administered",
            "description": "What treatment did the patient receive?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_MedicationReceived _VZ",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR140",
                "identifier": "29303-5",
                "messageContext": "OBX segment with\nOBX-3.1=29303-5\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|29303-5^Medication Administered^LN|1|281^Acyclovir^RXNORM||||||F"
              }
            },
            "defaultValue": {
              "value": "281"
            }
          },
          {
            "id": "890611b8-f84c-4b90-ad95-e852a1376964",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "a7489fba-58cb-4c55-afd4-5cdcf041e5f6",
            "ordinal": 2,
            "name": "Date Treatment or Therapy Started",
            "description": "Date the treatment was initiated",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR141",
                "identifier": "86948-7",
                "messageContext": "OBX segment with\nOBX-3.1=86948-7\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|86948-7^Date Treatment or Therapy Started^LN|1|20140319||||||F"
              }
            },
            "defaultValue": {
              "value": "20140319"
            }
          },
          {
            "id": "470dabb6-c68b-45a1-933b-54f840838947",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "a7489fba-58cb-4c55-afd4-5cdcf041e5f6",
            "ordinal": 3,
            "name": "Treatment Duration",
            "description": "Number of days the patient actually took the treatment referenced",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "67453-1",
                "messageContext": "OBX segment with\nOBX-3.1=67453-1\nOBX-4=obs sub-ID\nOBX-5.2=numeric value (see SN data type)\nOBX-6=d^day^UCUM",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {
                  "6": "d^day^UCUM"
                },
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown treatment duration, OBX-5 MAY be populated with '999'.",
                "sampleSegment": "OBX|nn|SN|67453-1^Treatment Duration^LN|1|^10|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "10"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "9c471ac7-232b-4379-b567-c6ef7b07068d",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 9,
        "type": "Single",
        "name": "Case Information",
        "startingDescription": "END: Treatment Questions",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "1d178240-3822-4524-b154-719b3499fd1e",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "9c471ac7-232b-4379-b567-c6ef7b07068d",
            "ordinal": 1,
            "name": "Diagnosed with Varicella Before",
            "description": "Has this patient ever been diagnosed with varicella before?",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR150",
                "identifier": "VAR150",
                "messageContext": "OBX segment with\nOBX-3.1=VAR150\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|VAR150^Diagnosed with Varicella Before^PHINQUESTION||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "d15f8c7d-2875-40f7-b838-76426aa0a25c",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "9c471ac7-232b-4379-b567-c6ef7b07068d",
            "ordinal": 2,
            "name": "Age at Previous Diagnosis",
            "description": "If this patient has ever been diagnosed with varicella before, what was the age at diagnosis?",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR151",
                "identifier": "INV934",
                "messageContext": "OBX segment with\nOBX-3.1=INV934\nOBX-5.2=numeric value (see SN data type)\nOBX-6=a^years^UCUM",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {
                  "6": "a^years^UCUM"
                },
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown age at diagnosis, OBX-5 MAY be populated with '999'.",
                "sampleSegment": "OBX|nn|SN|INV934^Age at Previous Diagnosis^PHINQUESTION||^5|a^years^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "5"
            }
          },
          {
            "id": "cbd9cfbc-b154-4536-a509-f3ca0bcd2516",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "9c471ac7-232b-4379-b567-c6ef7b07068d",
            "ordinal": 3,
            "name": "Age Units",
            "description": "Age type (units for age at diagnosis)",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "relatedElementId": "d15f8c7d-2875-40f7-b838-76426aa0a25c",
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_AgeUnit_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV2072",
                "identifier": "N/A: OBX-6",
                "messageContext": "OBX-6 Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Part of the INV934 Observation/OBX Segment",
                "sampleSegment": "OBX|nn|SN|INV934^Age at Previous Diagnosis^PHINQUESTION||^5|a^years^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": ""
            }
          },
          {
            "id": "b9a1b09a-45e5-4fe3-a1c2-e312bc5c7b88",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "9c471ac7-232b-4379-b567-c6ef7b07068d",
            "ordinal": 4,
            "name": "Previous Case Diagnosed By",
            "description": "Who diagnosed previous case?",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_DiagnosedBy_VZ",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR152",
                "identifier": "VAR152",
                "messageContext": "OBX segment with\nOBX-3.1=VAR152\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|VAR152^Previous Case Diagnosed By^PHINQUESTION||OTH^other^NULLFL||||||F"
              }
            },
            "defaultValue": {
              "value": "OTH"
            }
          },
          {
            "id": "d2d51612-d1cf-47e1-8421-b7976ce33f98",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "9c471ac7-232b-4379-b567-c6ef7b07068d",
            "ordinal": 5,
            "name": "Is this case epi-linked to another confirmed or probable case",
            "description": "Is this case epi-linked to another confirmed or probable varicella case or a herpes zoster case?",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR154",
                "identifier": "VAR154",
                "messageContext": "OBX segment with\nOBX-3.1=VAR154\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|VAR154^Is this case epi-linked to another confirmed or probable case^PHINQUESTION||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "c32ebdd9-8e1a-497b-9bd0-51d0c75d64f4",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "9c471ac7-232b-4379-b567-c6ef7b07068d",
            "ordinal": 6,
            "name": "Type of Case This Case is Epi-linked to",
            "description": "If this case is epi-linked to another confirmed or probable varicella case or a herpes zoster case, indicate which type of case.",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_EpilinkedCaseType_VZ",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR155",
                "identifier": "VAR155",
                "messageContext": "OBX segment with\nOBX-3.1=VAR155\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|VAR155^Type of Case This Case is Epi-linked to^PHINQUESTION||PHC166^Confirmed Varicella Case^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC166"
            }
          },
          {
            "id": "4f13407f-ea42-4c16-92e9-87f8636b49a3",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "9c471ac7-232b-4379-b567-c6ef7b07068d",
            "ordinal": 7,
            "name": "Transmission Setting",
            "description": "What was the transmission setting where the condition was acquired?",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_TransmissionSetting_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR156",
                "identifier": "81267-7",
                "messageContext": "OBX segment with\nOBX-3.1=81267-7\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|81267-7^Transmission Setting^LN||C1510656^Athletics^UML||||||F"
              }
            },
            "defaultValue": {
              "value": "C1510656"
            }
          },
          {
            "id": "f0357dc2-360c-44cc-92e1-c094cd33a826",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "9c471ac7-232b-4379-b567-c6ef7b07068d",
            "ordinal": 8,
            "name": "Case Patient a Healthcare Worker",
            "description": "Was the case patient a healthcare provider (HCP) at illness onset?",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "SCT",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR158",
                "identifier": "223366009",
                "messageContext": "OBX segment with\nOBX-3.1=223366009\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|223366009^Case Patient a Healthcare Worker^SCT||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "a580d504-d3e9-42be-a545-2428214526a0",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "9c471ac7-232b-4379-b567-c6ef7b07068d",
            "ordinal": 9,
            "name": "Number of Weeks Gestation at Onset of Illness",
            "description": "If the case-patient was pregnant at time of illness onset, specify the number of weeks gestation at onset of illness (1-45 weeks).",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR159",
                "identifier": "81270-1",
                "messageContext": "OBX segment with\nOBX-3.1=81270-1\nOBX-5.2=numeric value (see SN data type)\nOBX-6=w^week^UCUM",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {
                  "6": "w^week^UCUM"
                },
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown gestational age, OBX-5 MAY be populated with '99'.",
                "sampleSegment": "OBX|nn|SN|81270-1^Number of Weeks Gestation at Onset of Illness^LN||^37|w^week^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "37"
            }
          },
          {
            "id": "6254d222-e9cc-4c5b-87e9-3a6b0ae72cdf",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "9c471ac7-232b-4379-b567-c6ef7b07068d",
            "ordinal": 10,
            "name": "Trimester at Onset of Illness",
            "description": "If the case-patient was pregnant at time of illness onset, indicate trimester of gestation at time of disease.",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_PregnancyTrimester_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR160",
                "identifier": "81271-9",
                "messageContext": "OBX segment with\nOBX-3.1=81271-9\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|81271-9^Trimester at Onset of Illness^LN||255246003^First trimester^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "255246003"
            }
          },
          {
            "id": "257d6a57-2c9f-429a-aa29-39ac52519f78",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "9c471ac7-232b-4379-b567-c6ef7b07068d",
            "ordinal": 11,
            "name": "Patient Address City",
            "description": "Patient address city",
            "category": "Demographics",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "N/A: PID -11.3",
                "messageContext": "PID-11.3\nPatient Address - City",
                "dataType": "ST",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 3,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown patient address city, PID-11.3 MAY be populated with 'unknown'.",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppNamelocalID&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^Conyers^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "Conyers"
            }
          },
          {
            "id": "87627d8f-4f2d-492e-814d-8eaa0878f293",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "9c471ac7-232b-4379-b567-c6ef7b07068d",
            "ordinal": 12,
            "name": "Case Investigation Status Code",
            "description": "Case investigation status code",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_CaseInvestigationStatus_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV109",
                "identifier": "INV109",
                "messageContext": "OBX segment with\nOBX-3.1=INV109\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|INV109^Case Investigation Status Code^PHINQUESTION||29179001^Closed^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "29179001"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "0ccae8e2-752d-459a-9d03-8fa893e86693",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 10,
        "template": {
          "id": "3a140b31-092a-4c47-b09b-31ad1c16f27e",
          "internalVersion": 2,
          "name": "Industry and Occupation",
          "status": "L"
        },
        "type": "Repeat",
        "name": "Industry and Occupation Repeating Group",
        "startingDescription": "START: Industry and Occupation Repeating Group",
        "endingDescription": "END: Industry and Occupation Repeating Group",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "e83000bf-fdab-4894-b91e-e181571320e9",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "0ccae8e2-752d-459a-9d03-8fa893e86693",
            "ordinal": 1,
            "name": "Current Occupation",
            "description": "This data element is used to capture the narrative text of a subject's current occupation.",
            "category": "Demographics",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "85658-3",
                "identifier": "85658-3",
                "messageContext": "OBX segment with\nOBX-3.1=85658-3\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|85658-3^Current Occupation^LN|1|Medical Technologist||||||F"
              }
            },
            "defaultValue": {
              "value": "Medical Technologist"
            }
          },
          {
            "id": "96c0e36d-dfcd-4ae6-a14b-5531cc67cd13",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "0ccae8e2-752d-459a-9d03-8fa893e86693",
            "ordinal": 2,
            "name": "Current Occupation Standardized",
            "description": "This data element is used to capture the CDC NIOSH standard occupation code based upon the narrative text of a subject's current occupation.\n\n(The National Institute for Occupational Safety and Health (NIOSH) has developed a web-based software tool designed to translate industry and occupation text to standardized Industry and Occupation codes.  The NIOSH Industry and Occupational Computerized Coding System (NIOCCS) is available here:  http://www.cdc.gov/niosh/topics/coding/overview.html",
            "category": "Demographics",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Occupation_CDC_Census2010",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "85659-1",
                "identifier": "85659-1",
                "messageContext": "OBX segment with\nOBX-3.1=85659-1\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CE|85659-1^Current Occupation Standardized^LN|1|3300^Clinical laboratory technologists and technicians^CDCOCCUPATION2010||||||F"
              }
            },
            "defaultValue": {
              "value": "3300"
            }
          },
          {
            "id": "ce18c48f-bc47-4952-84af-47b6a3b7c80f",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "0ccae8e2-752d-459a-9d03-8fa893e86693",
            "ordinal": 3,
            "name": "Current Industry",
            "description": "This data element is used to capture the narrative text of subject's current industry.",
            "category": "Demographics",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "85078-4",
                "identifier": "85078-4",
                "messageContext": "OBX segment with\nOBX-3.1=85078-4\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|85078-4^Current Industry^LN|1|Hospital lab||||||F"
              }
            },
            "defaultValue": {
              "value": "Hospital lab"
            }
          },
          {
            "id": "c69a07de-16bb-45f7-b77c-168ca9a023f8",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "0ccae8e2-752d-459a-9d03-8fa893e86693",
            "ordinal": 4,
            "name": "Current Industry Standardized",
            "description": "This data element is used to capture the CDC NIOSH standard industry code based upon the narrative text of a subject's current industry.  \n\n(The National Institute for Occupational Safety and Health (NIOSH) has developed a web-based software tool designed to translate industry and occupation text to standardized Industry and Occupation codes.  The NIOSH Industry and Occupational Computerized Coding System (NIOCCS) is available here:  http://www.cdc.gov/niosh/topics/coding/overview.html",
            "category": "Demographics",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Industry_CDC_Census2010",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "85657-5",
                "identifier": "85657-5",
                "messageContext": "OBX segment with\nOBX-3.1=85657-5\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CE|85657-5^Current Industry Standardized^LN|1|8190^Hospitals^CDCINDUSTRY2010||||||F"
              }
            },
            "defaultValue": {
              "value": "8190"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "f5aa7938-6f3e-4f5d-8031-a44a5d3fac65",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 11,
        "type": "Single",
        "name": "Interpretive Laboratory Questions",
        "startingDescription": "START: Interpretive Laboratory Questions",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "067a457d-bb29-4a13-a88e-ca9d308f1ff4",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f5aa7938-6f3e-4f5d-8031-a44a5d3fac65",
            "ordinal": 1,
            "name": "Laboratory Testing Performed",
            "description": "Was laboratory testing done to confirm the diagnosis?",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR170",
                "identifier": "LAB630",
                "messageContext": "OBX segment with\nOBX-3.1=LAB630\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|LAB630^Laboratory Testing Performed^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "1edb75d6-e380-4e97-b1b1-d2cd2d2626fc",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f5aa7938-6f3e-4f5d-8031-a44a5d3fac65",
            "ordinal": 2,
            "name": "Laboratory Confirmed",
            "description": "Was the case laboratory confirmed?",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "INV164",
                "messageContext": "OBX segment with\nOBX-3.1=INV164\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV164^Laboratory Confirmed^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "0a4be3a9-dc42-4e36-90d5-784f211b01c3",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "f5aa7938-6f3e-4f5d-8031-a44a5d3fac65",
            "ordinal": 3,
            "name": "Specimen Sent to CDC",
            "description": "Was a specimen sent to CDC for testing?",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "82314-6",
                "messageContext": "OBX segment with\nOBX-3.1=82314-6\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|82314-6^Specimen Sent to CDC^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "08b140fa-5f51-4885-9004-b812cb7ce644",
        "guideId": "c87e525a-196d-47d3-94fc-4e5d7c7c0bff",
        "ordinal": 12,
        "template": {
          "id": "c87e525a-196d-47d3-94fc-4e5d7c7c0bff",
          "internalVersion": 4,
          "name": "VPD Lab Message Linkage",
          "status": "L",
          "blockId": "08b140fa-5f51-4885-9004-b812cb7ce644"
        },
        "type": "Repeat",
        "name": "VPD Linkage",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "1eb2afb6-0af1-4336-875c-f5d2c4d72234",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 4,
            "blockId": "08b140fa-5f51-4885-9004-b812cb7ce644",
            "ordinal": 1,
            "name": "VPD Lab Message Reference Laboratory",
            "description": "Vaccine Preventable Disease (VPD) reference laboratory that will be used along with the patient identifier and specimen identifier to uniquely identify a VPD lab message",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "LAB143",
                "messageContext": "OBX segment with\nOBX-3.1=LAB143\nOBX-4=obs sub-ID\nOBX-5=the OID or CLIA number for the VPD lab shown on the lab report or from MSH-4.2 in the VPD lab message",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "LAB143, LAB598, and LAB125 data elements are used to link  the Case Notification to a specific VPD message.\n\nVPD reference lab refers to one of the reference labs funded by the CDC NCIRD to provide enhanced capacity for molecular and serologic testing in a shared service model.\n\nNote: Always use the linkage to the most recent VPD reference lab test result",
                "sampleSegment": "OBX|nn|ST|LAB143^VPD Lab Message Reference Laboratory^PHINQUESTION|1|2.16.840.1.114222.4.1.10100||||||F"
              }
            },
            "defaultValue": {
              "value": "2.16.840.1.114222.4.1.10100"
            }
          },
          {
            "id": "36d36831-fdfa-4847-9f68-152bfb49adce",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 4,
            "blockId": "08b140fa-5f51-4885-9004-b812cb7ce644",
            "ordinal": 2,
            "name": "VPD Lab Message Patient Identifier",
            "description": "VPD lab message patient Identifier that will be used along with the reference laboratory and specimen identifier to uniquely identify a VPD lab message",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "LAB598",
                "messageContext": "OBX segment with\nOBX-3.1=LAB598\nOBX-4=obs sub-ID\nOBX-5=the patient identifier assigned by the VPD reference lab shown on the lab report or from PID-3 in the VPD lab message",
                "dataType": "CX",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "If testing was done at a VPD reference lab, send the patient ID assigned by the VPD reference lab including the assigning authority in order to link to the correct lab result for the patient.\n\nNote: Always use the linkage to the most recent VPD reference lab test result",
                "sampleSegment": "OBX|nn|CX|LAB598^VPD Lab Message Patient Identifier^PHINQUESTION|1|Y009990xx^^^&2.16.840.1.114222.4.1.10100&ISO||||||F"
              }
            },
            "defaultValue": {
              "value": "Y009990xx^^^&2.16.840.1.114222.4.1.10100&ISO"
            }
          },
          {
            "id": "5bb377ef-522e-48b0-98ff-6239a4e455cf",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 4,
            "blockId": "08b140fa-5f51-4885-9004-b812cb7ce644",
            "ordinal": 3,
            "name": "VPD Lab Message Specimen Identifier",
            "description": "VPD lab message specimen identifier that will be used along with the patient identifier and reference laboratory to uniquely identify a VPD lab message",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "LAB125",
                "messageContext": "OBX segment with\nOBX-3.1=LAB125\nOBX-4=obs sub-ID\nOBX-5=the specimen identifier assigned by the VPD reference lab shown on the lab report or from SPM-2.2 in the VPD lab message",
                "dataType": "CX",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "If testing was done at a VPD reference lab, send the filler specimen IDs assigned by the VPD reference lab including the assigning authority in order to link to the correct lab result for the patient.\n\nNote: Always use the linkage to the most recent VPD reference lab test result",
                "sampleSegment": "OBX|nn|CX|LAB125^VPD Lab Message Specimen Identifier^PHINQUESTION|1|Y009990xx-01^^^&2.16.840.1.114222.4.1.10100&ISO||||||F"
              }
            },
            "defaultValue": {
              "value": "Y009990xx-01^^^&2.16.840.1.114222.4.1.10100&ISO"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 13,
        "template": {
          "id": "ac8c96d4-d222-4e9a-b479-5815eb5e6e65",
          "internalVersion": 1,
          "name": "Epi Lab Block",
          "status": "U"
        },
        "type": "RepeatParentChild",
        "name": "Epidemiology Laboratory Repeating Group Section",
        "startingDescription": "START: Epidemiology Laboratory Repeating Group Section",
        "endingDescription": "END: Epidemiology Laboratory Repeating Group Section",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "46235f48-c656-4118-9589-cfbbc8b4d65b",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 1,
            "name": "Test Type",
            "description": "Epidemiologic interpretation of the type of test(s) performed for this case.",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_LabTestType_VZ",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV290",
                "identifier": "INV290",
                "messageContext": "OBX segment with\nOBX-3.1=INV290\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|INV290^Test Type^PHINQUESTION|1|11483-5^Varicella Zoster Virus PCR^LN||||||F"
              }
            },
            "defaultValue": {
              "value": "11483-5"
            }
          },
          {
            "id": "ce95e33c-b803-4428-bd19-99e58bde8945",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 2,
            "name": "Test Result",
            "description": "Epidemiologic interpretation of the results of the test(s) performed for this case. This is a qualitative test result.  (e.g. positive, detected, negative)",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_LabTestInterpretation_VZ",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV291",
                "identifier": "INV291",
                "messageContext": "OBX segment with\nOBX-3.1=INV291\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response. \n\nPlease use OBX-5.9  \"Other, please specify\" text response to report results for test type, avidity.",
                "sampleSegment": "OBX|nn|CWE|INV291^Test Result^PHINQUESTION|1|10828004^Positive^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "10828004"
            }
          },
          {
            "id": "048e8187-1aa0-43cc-9629-fc6206378472",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 3,
            "name": "Test Result Quantitative",
            "description": "Quantitative Test Result Value",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB628",
                "identifier": "LAB628",
                "messageContext": "OBX segment with\nOBX-3.1=LAB628\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|LAB628^Test Result Quantitative^PHINQUESTION|1|10||||||F"
              }
            },
            "defaultValue": {
              "value": "10"
            }
          },
          {
            "id": "95ef7134-f721-4a42-ad6a-455e35c53195",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 4,
            "name": "Result Units",
            "description": "Units of measure for the Quantitative Test Result Value",
            "category": "Laboratory",
            "comments": "Sample segment:\nOBX|nn|CWE|LAB115^Result Units^PHINQUESTION|4|mg/dL^MilliGrams Per Deci Liter [Mass Concentration Units]^UCUM||||||F",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_UnitsOfMeasure_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB115",
                "identifier": "LAB115",
                "messageContext": "OBX segment with\nOBX-3.1=LAB115\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|LAB115^Result Units^PHINQUESTION|1|mg/dL^MilliGrams Per Deci Liter [Mass Concentration Units]^UCUM||||||F"
              }
            },
            "defaultValue": {
              "value": "mg/dL"
            }
          },
          {
            "id": "926fb037-04c3-4dbf-8e5d-da5adaba04ba",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 5,
            "name": "Specimen Source",
            "description": "This indicates the source of the specimen tested.",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "SpecimenTypeVPD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "31208-2",
                "messageContext": "OBX segment with\nOBX-3.1=31208-2\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|31208-2^Specimen Source^LN|1|PHC227^Buccal Swab^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC227"
            }
          },
          {
            "id": "c94d7a1b-b4e8-4487-b8aa-fad74c5006f3",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 6,
            "name": "Specimen Collection Date/Time",
            "description": "Date of collection of laboratory specimen used for diagnosis of health event reported in this case report. Time of collection is an optional addition to date.",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "DateTime",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "68963-8",
                "messageContext": "OBX segment with\nOBX-3.1=68963-8\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "Send as much information as known with\nYYYYMMDD as a minimum.\n\nFor unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|68963-8^Specimen Collection Date/Time^LN|1|||||||F"
              }
            },
            "defaultValue": {
              "value": ""
            }
          },
          {
            "id": "2aae324d-48b1-4443-9a9c-ef1eb04ecb34",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 7,
            "name": "Date Specimen Sent to CDC",
            "description": "Date specimen sent to CDC.",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "85930-6",
                "messageContext": "OBX segment with\nOBX-3.1=85930-6\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "Send as much information as known with\nYYYYMMDD as a minimum. \n\nFor unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|85930-6^Date Specimen Sent to CDC^LN|1|||||||F"
              }
            },
            "defaultValue": {
              "value": ""
            }
          },
          {
            "id": "b08aaccb-7344-4897-829e-6d303c96abea",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 8,
            "name": "Performing Laboratory Type",
            "description": "Performing laboratory type",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_PerformingLaboratoryType_VPD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB606",
                "identifier": "82771-7",
                "messageContext": "OBX segment with\nOBX-3.1=82771-7\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|82771-7^Performing Laboratory Type^LN|1|PHC1316^VPD Testing Laboratory^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC1316"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "03d3e2df-6dfb-4cd7-a852-6bc92b17411c",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 14,
        "type": "Single",
        "name": "Epi Lab Footer",
        "startingDescription": "END: Interpretive Laboratory Questions",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [],
        "expanded": true
      },
      {
        "id": "0382d803-6605-4041-8953-430f6117ff27",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 15,
        "type": "Single",
        "name": "Interpretive Vaccine History Questions",
        "startingDescription": "START: Interpretive Vaccine History Questions",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "ba205776-af41-43a8-bf9d-052c5710e802",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "0382d803-6605-4041-8953-430f6117ff27",
            "ordinal": 1,
            "name": "Did the Subject Ever Receive a Vaccine Against This Disease",
            "description": "Did the subject ever receive a vaccine against this disease?",
            "category": "Vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR101",
                "identifier": "VAC126",
                "messageContext": "OBX segment with\nOBX-3.1=VAC126\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|VAC126^Did the Subject Ever Receive a Vaccine Against This Disease^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "1b520497-d45b-404e-9815-6e78143ff210",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "0382d803-6605-4041-8953-430f6117ff27",
            "ordinal": 2,
            "name": "Number of Doses Received On or After 1st Birthday",
            "description": "The number of vaccine doses against this disease which the subject received on or after their first birthday",
            "category": "Vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAR147",
                "identifier": "VAC129",
                "messageContext": "OBX segment with\nOBX-3.1=VAC129\nOBX-5.2=numeric value (see SN data type)",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown number of doses, OBX-5.2 MAY be populated with '99'.",
                "sampleSegment": "OBX|nn|SN|VAC129^Number of Doses Received On or After 1st Birthday^PHINQUESTION||^3||||||F"
              }
            },
            "defaultValue": {
              "value": "3"
            }
          },
          {
            "id": "0f014118-c44f-409d-aea7-17766250c272",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "0382d803-6605-4041-8953-430f6117ff27",
            "ordinal": 3,
            "name": "Date of Last Dose Prior to Illness Onset",
            "description": "Date of last vaccine dose against this disease prior to illness onset",
            "category": "Vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "VAC142",
                "messageContext": "OBX segment with\nOBX-3.1=VAC142\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|VAC142^Date of Last Dose Prior to Illness Onset^PHINQUESTION||20140319||||||F"
              }
            },
            "defaultValue": {
              "value": "20140319"
            }
          },
          {
            "id": "afa1f601-a69e-4031-89e7-46283c2681b8",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "0382d803-6605-4041-8953-430f6117ff27",
            "ordinal": 4,
            "name": "Vaccination Doses Prior to Onset",
            "description": "Number of vaccine doses against this disease prior to illness onset",
            "category": "Vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "82745-1",
                "messageContext": "OBX segment with\nOBX-3.1=82745-1\nOBX-5.2=numeric value (see SN data type)",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown number of doses, OBX-5 MAY be populated with '99'.",
                "sampleSegment": "OBX|nn|SN|82745-1^Vaccination Doses Prior to Onset^LN||^5||||||F"
              }
            },
            "defaultValue": {
              "value": "5"
            }
          },
          {
            "id": "4e95d4e1-58bc-417e-9e3a-d175eb1f77b7",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "0382d803-6605-4041-8953-430f6117ff27",
            "ordinal": 5,
            "name": "Vaccinated per ACIP Recommendations",
            "description": "Was subject vaccinated as recommended by the Advisory Committee on Immunization Practices (ACIP)?",
            "category": "Vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "VAC148",
                "messageContext": "OBX segment with\nOBX-3.1=VAC148\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "This data element is used for all cases. For example, a case might not have received a vaccine because they were too young per ACIP schedules.",
                "sampleSegment": "OBX|nn|CWE|VAC148^Vaccinated per ACIP Recommendations^PHINQUESTION||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "aab5a3ac-f8e4-4582-819e-9cf1f1a035b5",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "0382d803-6605-4041-8953-430f6117ff27",
            "ordinal": 6,
            "name": "Reason Not Vaccinated Per ACIP Recommendations",
            "description": "Reason subject not vaccinated as recommended by ACIP",
            "category": "Vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_VaccineNotGivenReasons_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "VAC149",
                "messageContext": "OBX segment with\nOBX-3.1=VAC149\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "This data element is used if VAC126 = NO or unknown, or VAC148 = NO or unknown.\n\nOBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|VAC149^Reason Not Vaccinated Per ACIP Recommendations^PHINQUESTION||PHC96^Religious exemption^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC96"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 16,
        "template": {
          "id": "774a5b91-177b-4e12-8e6d-e64242b9f504",
          "internalVersion": 1,
          "name": "Vaccine History",
          "status": "U"
        },
        "type": "RepeatParentChild",
        "name": "Vaccination History Repeating Group Section to specify the detailed vaccine record information - Repeats for each vaccine dose.",
        "startingDescription": "START: Preferred Vaccination History Repeating Group Section to specify the detailed vaccine record information - Repeats for each vaccine dose.\nNOTE: Include findings in this section related to the condition being reported in this case notification.",
        "endingDescription": "END: Preferred Vaccination History Repeating Group Section",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "8e0b0b63-8c7e-437c-9657-4745bf938c0e",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 1,
            "name": "Vaccine Type",
            "description": "The type of vaccine administered for the condition being reported",
            "comments": "(a) \"Vaccine Administered (Hepatitis A\"\n- Subset of Hepatitis A Vaccines used for reference purpose only).\n \n(b) \"Vaccines administered (CVX)\" \n- List of all CVX vaccine codes would be used for message validation.",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_VaccinesAdministered_VZ",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC101",
                "identifier": "30956-7",
                "messageContext": "OBX segment with\nOBX-3.1=30956-7\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|30956-7^Vaccine Type^LN|1|21^Varicella Vaccine^CVX||||||F"
              }
            },
            "defaultValue": {
              "value": "21"
            }
          },
          {
            "id": "7beb8dd6-a256-4c4b-9037-8915682228a9",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 2,
            "name": "Vaccine Administered Date",
            "description": "The date that the vaccine was administered",
            "comments": "For Hep A = Last dose received date",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC103",
                "identifier": "30952-6",
                "messageContext": "OBX segment with\nOBX-3.1=30952-6\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|30952-6^Vaccine Administered Date^LN|1|20110225||||||F"
              }
            },
            "defaultValue": {
              "value": "20110225"
            }
          },
          {
            "id": "c7dab0cd-9d38-4636-8e5e-d8ddd3a5fff9",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 3,
            "name": "Vaccine Dose Number",
            "description": "The dose number in a series",
            "comments": "* For Hep A Vaccine = Last vaccine dose in series administered to the patient.\n* For Hep A Vaccine, Dose # is not applicable or collected for Immune globulin.",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "30973-2",
                "messageContext": "OBX segment with\nOBX-3.1=30973-2\nOBX-4=obs sub-ID\nOBX-5.2=numeric value (see SN data type)",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown dose number, OBX-5 MAY be populated with '99'.",
                "sampleSegment": "OBX|nn|SN|30973-2^Vaccine Dose Number^LN|1|^2||||||F"
              }
            },
            "defaultValue": {
              "value": "2"
            }
          },
          {
            "id": "3748e3c5-ac40-4e3d-b8a9-fc5eb7643f0a",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 4,
            "name": "Vaccine Manufacturer",
            "description": "The company which manufactured the vaccine",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_ManufacturersOfVaccinesMVX_CDC_NIP",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC107",
                "identifier": "30957-5",
                "messageContext": "OBX segment with\nOBX-3.1=30957-5\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|30957-5^Vaccine Manufacturer^LN|1|SKB^GlaxoSmithKline^MVX||||||F"
              }
            },
            "defaultValue": {
              "value": "SKB"
            }
          },
          {
            "id": "5a860f85-19da-4324-8052-78f3dbf776ce",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 5,
            "name": "Vaccine Lot Number",
            "description": "The lot number for the vaccine administered",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "VAC108",
                "identifier": "30959-1",
                "messageContext": "OBX segment with\nOBX-3.1=30959-1\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown lot number, OBX-5 MAY be populated with 'unknown'.",
                "sampleSegment": "OBX|nn|ST|30959-1^Vaccine Lot Number^LN|1|SKB Lot1787239817||||||F"
              }
            },
            "defaultValue": {
              "value": "SKB Lot1787239817"
            }
          },
          {
            "id": "8b6091eb-79b2-46ac-8748-8ed65838fa13",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 6,
            "name": "Vaccine Expiration Date",
            "description": "The expiration date for the vaccine administered",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "VAC109",
                "messageContext": "OBX segment with\nOBX-3.1=VAC109\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|VAC109^Vaccine Expiration Date^PHINQUESTION|1|20140131||||||F"
              }
            },
            "defaultValue": {
              "value": "20140131"
            }
          },
          {
            "id": "0815e827-e12e-45f8-914a-7464da9ae765",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 7,
            "name": "National Drug Code (NDC)",
            "description": "NDC from the vaccine's bar code can be used to obtain vaccine brand name and manufacturer.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "VAC153",
                "messageContext": "OBX segment with\nOBX-3.1=VAC153\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "Refer to the CDC Immunization Information Systems website for the NDC Crosswalk tables: http://www2a.cdc.gov/vaccines/iis/iisstandards/ndc_crosswalk.asp\n\nFor unknown NDC, OBX-5 MAY be populated with 'unknown'.",
                "sampleSegment": "OBX|nn|ST|VAC153^National Drug Code (NDC)^PHINQUESTION|1|String up to 199 characters||||||F"
              }
            },
            "defaultValue": {
              "value": "String up to 199 characters"
            }
          },
          {
            "id": "8fc202b7-649d-4376-b4d2-42458cd3c713",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 8,
            "name": "Vaccination Record Identifier",
            "description": "Vaccination record identifier",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "VAC102",
                "messageContext": "OBX segment with\nOBX-3.1=VAC102\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown vaccination record identifier, OBX-5 MAY be populated with 'unknown'.",
                "sampleSegment": "OBX|nn|ST|VAC102^Vaccination Record Identifier^PHINQUESTION|1|VAC1289182900TX01||||||F"
              }
            },
            "defaultValue": {
              "value": "VAC1289182900TX01"
            }
          },
          {
            "id": "ec5e641e-c43d-45b8-8c75-723cef6758f5",
            "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
            "guideInternalVersion": 0,
            "blockId": "e1a20aa8-dc5b-4179-9094-e13c6d14c6ff",
            "ordinal": 9,
            "name": "Vaccine Event Information Source",
            "description": "The information source for this vaccination record",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_VaccineEventInformationSource_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "VAC147",
                "messageContext": "OBX segment with\nOBX-3.1=VAC147\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|VAC147^Vaccine Event Information Source^PHINQUESTION|1|00^New immunization record^NIP001||||||F"
              }
            },
            "defaultValue": {
              "value": "00"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "a2ba1b75-9eef-472e-b305-3ac3dd869b9e",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 17,
        "type": "Single",
        "name": "Vaccine Footer",
        "startingDescription": "END: Interpretive Vaccine History Questions",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [],
        "expanded": true
      },
      {
        "id": "88a79779-b98e-45db-89b2-5646270fdec0",
        "guideId": "6f8a85a0-5ac0-4146-b99c-af353b7d24fa",
        "ordinal": 18,
        "template": {
          "id": "6b7d2139-a669-401d-b1af-a4df199322e1",
          "internalVersion": 0,
          "name": "END Template",
          "status": "L"
        },
        "type": "Single",
        "name": "END: EPIDEMIOLOGIC INFORMATION SECTION",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [],
        "expanded": true
      }
    ],
    "columns": [
      {
        "label": "Category",
        "path": "$.category"
      },
      {
        "label": "Data Element (DE) Name",
        "path": "$.name"
      },
      {
        "label": "DE Identifier Sent in HL7 Message",
        "path": "$.mappings.hl7v251.identifier"
      },
      {
        "label": "DE Code System",
        "path": "$.codeSystem"
      },
      {
        "label": "Data Element Description",
        "path": "$.description"
      },
      {
        "label": "Data Type",
        "path": "$.dataType"
      },
      {
        "label": "CDC Priority",
        "path": "$.legacyPriority"
      },
      {
        "label": "May Repeat",
        "path": "$.mayRepeat"
      },
      {
        "label": "Value Set Name (VADS Hyperlink)",
        "path": "$.valueSetLink"
      },
      {
        "label": "Value Set Code",
        "path": "$.valueSetCode"
      },
      {
        "label": "HL7 Message Context",
        "path": "$.mappings.hl7v251.messageContext"
      },
      {
        "label": "HL7 Data Type",
        "path": "$.mappings.hl7v251.dataType"
      },
      {
        "label": "HL7 Usage",
        "path": "$.mappings.hl7v251.usage"
      },
      {
        "label": "HL7 Cardinality",
        "path": "$.mappings.hl7v251.cardinality"
      },
      {
        "label": "HL7 Implementation Notes",
        "path": "$.mappings.hl7v251.implementationNotes"
      },
      {
        "label": "Repeating Group Element",
        "path": "$.mappings.hl7v251.repeatingGroupElementType"
      },
      {
        "label": "Sample Segment",
        "path": "$.mappings.hl7v251.sampleSegment"
      },
      {
        "label": "Comments",
        "path": "$.comments"
      }
    ],
    "templates": [
      {
        "id": "c87e525a-196d-47d3-94fc-4e5d7c7c0bff",
        "internalVersion": 4,
        "name": "VPD Lab Message Linkage",
        "status": "L"
      }
    ]
 }",
                string mmg when mmg.Contains("Trichinellosis_MMG_V1.0") => "{
    "id": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
    "type": "Guide",
    "guideStatus": "UserAcceptanceTesting",
    "name": "Trichinellosis",
    "shortName": "",
    "description": "The trichinellosis case notification MMG v1 is a specification for a unified message. This guide, in combination with the generic individual case notification MMG v2, describes the content (i.e., data elements and valid values) of HL7 case notification messages and the instructions for using the message mapping specification (see References section) in order to submit HL7 case notifications for trichinellosis to the Centers for Disease Control and Prevention (CDC).\n\nThis trichinellosis case notification MMG v1 needs to be used in conjunction with generic individual case notification MMG v2 to construct a complete case notification message for nationally notifiable diseases and conditions with disease-specific data elements.\n\nThe intended audiences for this document are the state/local health departments, CDC programs and other public health-related organizations interested in using the HL7 V2.5.1 case notification message specification for transmitting their data elements to CDC.",
    "isActive": true,
    "createdBy": "01c77a03-0ed9-4f38-af32-fc1679c3058d",
    "ownedBy": "12d27d38-ee1d-4858-ba74-8f5c4e7871dd",
    "internalVersion": 112,
    "createdDate": "2018-01-31T13:57:12.7530186+00:00",
    "lastUpdatedDate": "2020-05-06T15:06:05.1308159+00:00",
    "publishVersion": "",
    "profileIdentifier": "Trichinellosis_MMG_V1.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO",
    "blocks": [
      {
        "id": "5ba813c4-3c27-451d-83af-d8881953588a",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 1,
        "type": "Single",
        "name": "Message Header",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": false,
        "elements": [
          {
            "id": "2e8bec8d-942e-4c78-affb-f5fe720f068c",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 99,
            "blockId": "03402d45-a5d3-4892-907b-74dc5884fa59",
            "ordinal": 1,
            "name": "Message Profile Identifier",
            "description": "Message Profile Identifiers provide a literal value to use for the references in MSH-21.  MSH-21 will always contain a reference to the notification type in the \"PHINProfileID\" namespace and a reference to the implemented version of the Generic MMG in the \"PHINMsgMapID\" namespace.  For conditions that have a condition-specific MMG, MSH-21 will also contain a reference to that MMG that is also in the \"PHINMsgMapID\" namespace.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "U",
            "isRepeat": true,
            "repetitions": 3,
            "mayRepeat": "Y/3",
            "valueSetCode": "N/A",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT115",
                "identifier": "N/A: MSH-21",
                "messageContext": "MSH-21",
                "dataType": "EI",
                "segmentType": "MSH",
                "obrPosition": 1,
                "fieldPosition": 21,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[3..3]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "CONFORMANCE STATEMENT: Message Profile ID (MSH-21) for this version of the MMG SHALL contain the literal value: ‘NOTF_ORU_v3.0^PHINProfileID^2.16.840.1.114222.4.10.3^ISO~Generic_MMG_V2.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO~Trichinellosis_MMG_V1.0.",
                "sampleSegment": "MSH|^~\\&|SendAppName^2.16.840.1.114222.TBD^ISO|Sending-Facility^2.16.840.1.114222.TBD^ISO|PHINCDS^2.16.840.1.114222.4.3.2.10^ISO|PHIN^2.16.840.1.114222^ISO|20140630120030.1234-0500||ORU^R01^ORU_R01|MESSAGE CONTROL ID|D|2.5.1|||||||||NOTF_ORU_v3.0^PHINProfileID^2.16.840.1.114222.4.10.3^ISO~Generic_MMG_V2.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO~Trichinellosis _MMG_V1.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO"
              }
            },
            "defaultValue": {
              "value": "MSH|^~\\&|SendAppName^2.16.840.1.114222.TBD^ISO|Sending-Facility^2.16.840.1.114222.TBD^ISO|PHINCDS^2.16.840.1.114222.4.3.2.10^ISO|PHIN^2.16.840.1.114222^ISO|20140630120030.1234-0500||ORU^R01^ORU_R01|MESSAGE CONTROL ID|D|2.5.1|||||||||NOTF_ORU_v3.0^PHINProfileID^2.16.840.1.114222.4.10.3^ISO~Generic_MMG_V2.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO~Trichinellosis_MMG_V1.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO"
            }
          }
        ]
      },
      {
        "id": "280026b5-43c5-4173-9c62-41aba6d57057",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 2,
        "type": "Single",
        "name": "Subject Related",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "df2f791b-5189-404e-972d-01c513ec8f66",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 1,
            "name": "Local Subject ID",
            "description": "The local ID of the subject/entity",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM197",
                "identifier": "N/A: PID-3",
                "messageContext": "PID-3\nPatient Identifier List",
                "dataType": "CX",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 3,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "PID-3.1\nID Number is the local Subject ID from the sending system's internally assigned Subject ID; \n\nPID-3.4\nAssigning Authority format <localID&OID&ISO>  \n\nDoes not pass Variable ID  or label.",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppNamelocalID&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "GenV2_TC01"
            }
          },
          {
            "id": "918225f5-4ffd-47a1-b7b1-27635f5429f6",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 2,
            "name": "Birth Date",
            "description": "Patient’s date of birth",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM115",
                "identifier": "N/A: PID-7",
                "messageContext": "PID-7\nDate/Time of Birth",
                "dataType": "TS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 7,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, PID-7 MAY be populated with '99999999'",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "19640502"
            }
          },
          {
            "id": "e233acfc-301a-4293-a2c8-06002a77f3a3",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 3,
            "name": "Subject’s Sex",
            "description": "Subject’s current sex",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Sex_MFU",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM113",
                "identifier": "N/A: PID-8",
                "messageContext": "PID-8\nAdministrative Sex",
                "dataType": "IS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 8,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "F"
            }
          },
          {
            "id": "18a43f2c-ff15-406b-b9e1-afd8df5239ef",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 4,
            "name": "Race Category",
            "description": "Race category - Major OMB Race Categories. Detailed race information would be rolled up to these major OMB race categories.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": true,
            "mayRepeat": "Y",
            "valueSetCode": "PHVS_RaceCategory_CDC_NullFlavor",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM152",
                "identifier": "N/A: PID-10",
                "messageContext": "PID-10\nRace",
                "dataType": "CE",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 10,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..*]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "2106-3"
            }
          },
          {
            "id": "13a244d2-8c20-4ddf-9a6c-a81f3ca4046a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 5,
            "name": "Other Race Text",
            "description": "Other Race Text",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM154",
                "identifier": "32624-9",
                "messageContext": "OBX segment with \nOBX-3.1=32624-9\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|ST|32624-9^Other Race Text^LN||Place details Other Race here ||||||F"
              }
            },
            "defaultValue": {
              "value": "Apache"
            }
          },
          {
            "id": "7d65fc52-7022-4857-a2af-cfa0eb685b3e",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 6,
            "name": "Ethnic Group",
            "description": "Based on the self-identity of the subject as Hispanic or Latino",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_EthnicityGroup_CDC_Unk",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM155",
                "identifier": "N/A: PID-22",
                "messageContext": "PID-22\nEthnic Group",
                "dataType": "CE",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 22,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "2135-2"
            }
          },
          {
            "id": "8fbdd55e-b971-465a-8df9-fea6a2df1c5f",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 7,
            "name": "Country of Birth",
            "description": "Country of Birth",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_BirthCountry_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM126",
                "identifier": "78746-5",
                "messageContext": "OBX segment with \nOBX-3.1=78746-5\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|CWE|78746-5^Country of Birth^LN||USA^United States^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "UZB"
            }
          },
          {
            "id": "dd308509-acc9-4fc5-b9ed-d31b8770285f",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 8,
            "name": "Other Birth Place",
            "description": "Other Birth Place",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM304",
                "identifier": "21842-0",
                "messageContext": "OBX segment with \nOBX-3.1=21842-0\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|ST|21842-0^Other Birth Place^LN||Place details about Other Birth Place here||||||F"
              }
            },
            "defaultValue": {
              "value": "USSR"
            }
          },
          {
            "id": "07eac6c3-948b-49ae-9050-5e5373749b3a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 9,
            "name": "Country of Usual Residence",
            "description": "Where does the person usually live (defined as their residence).\n\nThis variable replaces the Foreign Resident variable mentioned in 11-SI-04 titled \"Revised Guidelines for Determining Residency for Disease Reporting\" located at http://c.ymcdn.com/sites/www.cste.org/resource/resmgr/PS/11-SI-04.pdf.\n\nCases with country of usual residence equal to the US, Puerto Rico, and US Virgin Islands as well as unknown and null responses will be included in the state-specific counts and rates.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Country_ISO_3166-1",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV501",
                "identifier": "77983-5",
                "messageContext": "OBX segment with\nOBX-3.1=77983-5\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|2|CWE|77983-5^Country of Usual Residence^LN||USA^UNITED STATES^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "USA"
            }
          },
          {
            "id": "457353eb-9da7-469d-b91b-e969b5f64492",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 10,
            "name": "Subject Address County",
            "description": "County of residence of the subject",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_County_FIPS_6-4",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM165",
                "identifier": "N/A: PID-11.9",
                "messageContext": "PID-11.9\nPatient Address  - County",
                "dataType": "IS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 9,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "The entire address construct (PID-11) may repeat per HL7, but only expecting the first instance to be populated and parsed.\n\nAddress county will be used in the annual summary and  it needs to be populated",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "48201"
            }
          },
          {
            "id": "c5b828bf-ee57-4ac1-bf66-fc71a7bd28b9",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 11,
            "name": "Subject Address State",
            "description": "State of residence of the subject",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_State_FIPS_5-2",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM162",
                "identifier": "N/A: PID-11.4",
                "messageContext": "PID-11.4\nPatient Address  - State=value from value set",
                "dataType": "ST",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 4,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "The entire address construct (PID-11) may repeat per HL7, but only expecting the first instance to be populated and parsed.",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "a779a11d-ad38-4bd4-bbdb-1555514b9fc4",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 12,
            "name": "Subject Address ZIP Code",
            "description": "ZIP Code of residence of the subject",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM163",
                "identifier": "N/A: PID-11.5",
                "messageContext": "PID-11.5\nPatient Address  - Postal Code=string up to 12 characters",
                "dataType": "ST",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 5,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "The entire address construct (PID-11) may repeat per HL7, but only expecting the first instance to be populated and parsed.",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "77018"
            }
          }
        ]
      },
      {
        "id": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 3,
        "type": "Single",
        "name": "Case Related",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "9928d4d6-eea0-4e3f-9e06-85cfb2c3199a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 1,
            "name": "Date of Illness Onset",
            "description": "Date of the beginning of the illness.  Reported date of the onset of symptoms of the condition being reported to the public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV137",
                "identifier": "11368-8",
                "messageContext": "OBX segment with \nOBX-3.1=11368-8\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|1|TS|11368-8^Date of Illness Onset^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140224"
            }
          },
          {
            "id": "93942d4e-63ec-46a6-a5cd-1e71d976d90d",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 2,
            "name": "Illness End Date",
            "description": "Date at which the disease or condition ends.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV138",
                "identifier": "77976-9",
                "messageContext": "OBX segment with \nOBX-3.1=77976-9\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|2|TS|77976-9^Illness End Date^LN||20140413||||||F"
              }
            },
            "defaultValue": {
              "value": "20140302"
            }
          },
          {
            "id": "1334f3fc-a02a-47b3-92d4-63153b11dd64",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 3,
            "name": "Illness Duration",
            "description": "Length of time this subject had this disease or condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV139",
                "identifier": "77977-7",
                "messageContext": "OBX segment with \nOBX-3.1=77977-7\nOBX-5.2=numeric value\nOBX-6=units value from INV140 value set;",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|3|SN|77977-7-7^Illness Duration^LN||^12|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "6"
            }
          },
          {
            "id": "abd9a2fc-03ad-418b-9819-6bedc955dbaa",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 4,
            "name": "Illness Duration Units",
            "description": "Unit of time used to describe the length of the illness or condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "relatedElementId": "1334f3fc-a02a-47b3-92d4-63153b11dd64",
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_DurationUnit_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV140",
                "identifier": "N/A: OBX-6",
                "messageContext": "OBX-6-Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Part of the INV139 Observation/OBX Segment.",
                "sampleSegment": "OBX|3|SN|77977-7^Illness Duration^LN||^12|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "d"
            }
          },
          {
            "id": "f3722238-af5e-4346-907d-736edaa47863",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 5,
            "name": "Pregnancy Status",
            "description": "Indicates whether the subject was pregnant at the time of the event.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV178",
                "identifier": "77996-7",
                "messageContext": "OBX segment with \nOBX-3.1=77996-7\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|4|CWE|77996-7^Pregnancy Status^LN||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "4018be44-a07b-47fc-a422-3b41cf59d670",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 6,
            "name": "Diagnosis Date",
            "description": "Earliest date of diagnosis (clinical or laboratory) of condition being reported to public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV136",
                "identifier": "77975-1",
                "messageContext": "OBX segment with \nOBX-3.1=77975-1\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|5|TS|77975-1^Diagnosis Date^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "bc126dea-f2d7-4c00-9e6e-a92e240e1ae8",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 7,
            "name": "Hospitalized",
            "description": "Was subject hospitalized because of this event?",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV128",
                "identifier": "77974-4",
                "messageContext": "OBX segment with \nOBX-3.1=77974-4\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|6|CWE|77974-4^Hospitalized^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "4283972a-8ac7-4c88-8cb6-cbe3057b8bc7",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 8,
            "name": "Admission Date",
            "description": "Subject’s most recent admission date to the hospital for the condition covered by the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV132",
                "identifier": "8656-1",
                "messageContext": "OBX segment with \nOBX-3.1=8656-1\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Use the most recent admission, in association with this instance of the case.",
                "sampleSegment": "OBX|7|TS|8656-1^Admission Date^LN||20131230||||||F"
              }
            },
            "defaultValue": {
              "value": "20140226"
            }
          },
          {
            "id": "e29fcb10-851e-4643-a447-c90e9a27bb8a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 9,
            "name": "Discharge Date",
            "description": "Subject's most recent discharge date from the hospital for the condition covered by the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV133",
                "identifier": "8649-6",
                "messageContext": "OBX segment with \nOBX-3.1=8649-6\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Use the most recent discharge, related to the admission represented by variable INV132.",
                "sampleSegment": "OBX|8|TS|8649-6^Discharge Date^LN||20140104||||||F"
              }
            },
            "defaultValue": {
              "value": "20140302"
            }
          },
          {
            "id": "1514b03e-e4fb-42f1-b63a-4e6add08d7c6",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 10,
            "name": "Duration of Hospital Stay in Days",
            "description": "Subject's duration of stay at the hospital for the condition covered by the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV134",
                "identifier": "78033-8",
                "messageContext": "OBX segment with \nOBX-3.1=78033-8\nOBX-5.2=numeric value",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Populate OBX-6 with d^day^UCUM.",
                "sampleSegment": "OBX|9|SN|78033-8^Duration of hospital stay in days^LN||^5|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "4"
            }
          },
          {
            "id": "2383f96f-098a-4af3-9ada-f6c6aab923af",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 11,
            "name": "Subject Died",
            "description": "Did the subject die from this illness or complications of this illness?",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV145",
                "identifier": "77978-5",
                "messageContext": "OBX segment with \nOBX-3.1=77978-5\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|10|CWE|77978-5^Subject Died^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "827d2f8f-eec9-49f0-9265-0fc681f120b5",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 12,
            "name": "Deceased Date",
            "description": "If the subject died from this illness or complications associated with this illness, indicate the date of death.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV146",
                "identifier": "N/A: PID-29",
                "messageContext": "PID-29 Patient Death Date and Time",
                "dataType": "TS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 29,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID -29 Sample Segment :\n\nPID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC|||||||20"
              }
            },
            "defaultValue": {
              "value": "20140302"
            }
          },
          {
            "id": "c30ce921-63d7-4981-833b-5b5c99c51bb3",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 13,
            "name": "Condition Code",
            "description": "Condition or event that constitutes the reason the notification is being sent.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "N/A",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV169",
                "identifier": "N/A: OBR-31",
                "messageContext": "OBR-31 Reason for Study in the OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
                "dataType": "CE",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 31,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Refer to the Event Code List of Nationally Notifiable Diseases and Other Conditions of Public Health Importance document for the relevant MMWR year.\n\nThis references can be found on the NNDSS Messaging Mapping Guide web site: http://wwwn.cdc.gov/nndss/mes",
                "sampleSegment": "OBR|1|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|68991-9^Epidemiologic Information^LN|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "11550"
            }
          },
          {
            "id": "6665e1dc-de3d-4e98-a4cc-cb26c4289a2e",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 14,
            "name": "Local Record ID",
            "description": "Sending system-assigned local ID of the case investigation with which the subject is associated.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV168",
                "identifier": "N/A: OBR-3",
                "messageContext": "OBR-3\nFiller Order Number  in the OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
                "dataType": "EI",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 3,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "OBR-3.1 is the internally assigned case/investigation ID.\n\nOBR-3.3 is the OID for sending application as assigning authority.\n\nOBR-3.4 is the literal value: 'ISO'.\n\nNational reporting jurisdiction (77968-6) and Local Record ID (INV168 in OBR-3) are used together to define a unique case in the CDC database.  The values for each of these data elements must remain the same when sending updates on a unique case.  Any changes to these data elements will cause the addition of a new case to the CDC database.  For more details, refer to the document on the MMG web site: http://wwwn.cdc.gov/nndss/document/Generic_Data_Elements_that_Define_a_Unique_Case.docx",
                "sampleSegment": "OBR|2|\"\"|CASE/Investigation ID^SendAppName^2.16.840.1.114222.TBD^ISO|EPIINFO^Epidemiologic Information^CDCPHINVS|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "GenV2_TC01"
            }
          },
          {
            "id": "313e6282-fa94-43d7-b276-0c9e29f9c091",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 15,
            "name": "State Case Identifier",
            "description": "States use this identifier to link NEDSS investigations back to their own state investigations.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV173",
                "identifier": "77993-4",
                "messageContext": "OBX segment with \nOBX-3.1=77993-4\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|ST|77993-4^State Case Identifier^LN||2014IN100000001||||||F"
              }
            },
            "defaultValue": {
              "value": "TX4321"
            }
          },
          {
            "id": "17c8098b-0945-4a20-ae3a-0b608964b98c",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 16,
            "name": "Legacy Case Identifier",
            "description": "CDC uses this identifier to link current case notifications to case notifications submitted by a previous system (NETSS, STD-MIS, etc.).",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV200",
                "identifier": "77997-5",
                "messageContext": "OBX segment with \nOBX-3.1=77997-5\nOBX-5=Legacy Case Identifier",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For a NETSS case ID, please use the following format:  \nCase ID(6) - State(2) - Site(3) - Year(4)\ne.g.,  CaseId01LAB2009.",
                "sampleSegment": "OBX|2|ST|77997-5^Legacy Case Identifier^LN||61528936181002006||||||F"
              }
            },
            "defaultValue": {
              "value": "48432148S012014"
            }
          },
          {
            "id": "b0fa71f1-71c0-4ecb-b2ea-7432f5890ba5",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 17,
            "name": "Age at Case Investigation",
            "description": "Subject age at time of case investigation",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV2001",
                "identifier": "77998-3",
                "messageContext": "OBX segment with \nOBX-3.1=77998-3\nOBX-5.2=numeric value\nOBX-6=units value from INV2002 value set;",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "AGE should populate the second component of the OBX.5 field.  In HL7, components are typically separated by the character ‘^’ (Caret).\n\nOBX-5.2 will contain '9999' for unknown Age at case investigation.",
                "sampleSegment": "OBX|3|SN|77998-3^Age at Case investigation^LN||^51|a^year^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "49"
            }
          },
          {
            "id": "6a1a06f1-e752-4f67-948c-851160d9f374",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 18,
            "name": "Age Unit at Case Investigation",
            "description": "Subject age unit at time of case investigation",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "relatedElementId": "b0fa71f1-71c0-4ecb-b2ea-7432f5890ba5",
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_AgeUnit_UCUM",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV2002",
                "identifier": "N/A: OBX-6",
                "messageContext": "OBX-6-Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Part of the INV2001 Observation/OBX Segment.",
                "sampleSegment": "OBX|3|SN|77998-3^Age at Case investigation^LN||^51|a^year^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "a"
            }
          },
          {
            "id": "55dd0919-8991-47cd-a946-788634c1d4a9",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 19,
            "name": "Case Disease Imported Code",
            "description": "Indication of where the disease/condition was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_DiseaseAcquiredJurisdiction_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV152",
                "identifier": "77982-7",
                "messageContext": "OBX segment with \nOBX-3.1=77982-7\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|4|CWE|77982-7^Case Disease Imported Code^LN||PHC246^Out of State^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC246"
            }
          },
          {
            "id": "7d1a4941-6a05-45b7-a671-74ea67a1b1d1",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 20,
            "name": "Imported Country",
            "description": "If the disease or condition was imported, indicates the country in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Country_ISO_3166-1",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV153",
                "identifier": "INV153",
                "messageContext": "OBX segment with \nOBX-3.1=INV153\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Three-letter country code",
                "sampleSegment": "OBX|5|CWE|INV153^Imported Country^PHINQUESTION||MEX^Mexico^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "USA"
            }
          },
          {
            "id": "1863f6dd-d646-47d5-b886-9080a8cfabc0",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 21,
            "name": "Imported State",
            "description": "If the disease or condition was imported, indicates the state in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_State_FIPS_5-2",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV154",
                "identifier": "INV154",
                "messageContext": "OBX segment with \nOBX-3.1=INV154\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Two-digit numeric FIPS code",
                "sampleSegment": "OBX|6|CWE|INV154^Imported State^PHINQUESTION||48^Texas^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "04"
            }
          },
          {
            "id": "d692f87d-4095-4777-bafb-7049cdc80d07",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 22,
            "name": "Imported City",
            "description": "If the disease or condition was imported, indicates the city in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_City_USGS_GNIS",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV155",
                "identifier": "INV155",
                "messageContext": "OBX segment with \nOBX-3.1=INV155\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "One-to-ten digit numeric GNIS Feature ID",
                "sampleSegment": "OBX|7|CWE|INV155^Imported City^PHINQUESTION||1350851^Abernathy^USGSGNIS||||||F"
              }
            },
            "defaultValue": {
              "value": "",
              "label": "Houston, TX, Harris"
            }
          },
          {
            "id": "bf98da0d-48ef-4bcb-aacc-e3f2a43ab276",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 23,
            "name": "Imported County",
            "description": "If the disease or condition was imported, contains the county of origin of the disease or condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_County_FIPS_6-4",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV156",
                "identifier": "INV156",
                "messageContext": "OBX segment with \nOBX-3.1=INV156\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Five-digit numeric FIPS code",
                "sampleSegment": "OBX|8|CWE|INV156^Imported County^PHINQUESTION||48303^Lubbock, TX^FIPS6_4||||||F"
              }
            },
            "defaultValue": {
              "value": "",
              "label": "Harris, TX"
            }
          }
        ]
      },
      {
        "id": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 4,
        "type": "Repeat",
        "name": "Repeating Variables for Disease Exposure",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "2cc47e98-8212-4ef1-948a-1e2fcf7309ca",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 1,
            "name": "Country of Exposure",
            "description": "Indicates the country in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Country_ISO_3166-1",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV502",
                "identifier": "77984-3",
                "messageContext": "OBX segment with \nOBX-3.1=77984-3\nOBX-4=obs sub-ID\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV153 (Imported Country) with INV502 (Country of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported fields for reports and publications.",
                "sampleSegment": "OBX|9|CWE|77984-3^Country of Exposure^LN|1|USA^United States^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "USA"
            }
          },
          {
            "id": "cd308f98-95c1-4d93-a9bd-52335c3d3486",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 2,
            "name": "State or Province of Exposure",
            "description": "Indicates the state (or Province) in which the disease was likely acquired.\n\nNote: If Country of exposure was US, populate with US State. If Country of exposure was Mexico, populate with Mexican State. If country of exposure was Canada, populated with Canadian Province. For all other countries, leave null.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_StateProvinceOfExposure_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV503",
                "identifier": "77985-0",
                "messageContext": "OBX segment with\nOBX-3.1=77985-0\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV154 (Imported State) with INV503 (State or Province of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace the imported field or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported fields for reports and publications.",
                "sampleSegment": "OBX|10|CWE|77985-0^State or Province of Exposure^LN|1|06^California^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "40e12cd8-156e-4205-9073-173bce6aef74",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 3,
            "name": "City of Exposure",
            "description": "Indicates the city in which the disease was likely acquired\n\nNote: If country of exposure is US, populate with US city. For all other cities, can be populated but not required.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV504",
                "identifier": "77986-8",
                "messageContext": "OBX segment with \nOBX-3.1=77986-8\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV155 (Imported City) with INV504 (City of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported field for reports and publications.",
                "sampleSegment": "OBX|11|ST|77986-8^City of Exposure^LN|1|Pasadena||||||F"
              }
            },
            "defaultValue": {
              "value": "Houston"
            }
          },
          {
            "id": "7cbc5158-8d8e-4a07-92d8-81186115b0b1",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 4,
            "name": "County of Exposure",
            "description": "Indicates the county in which the disease was likely acquired\n\nNote: If country of exposure is US, populate with US county.  Otherwise, leave null.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV505",
                "identifier": "77987-6",
                "messageContext": "OBX segment with \nOBX-3.1=77987-6\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV156 (Imported County) with INV505 (County of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported field for reports and publications.",
                "sampleSegment": "OBX|12|ST|77987-6^County of Exposure^LN|1|Los Angeles||||||F"
              }
            },
            "defaultValue": {
              "value": "Harris"
            }
          }
        ]
      },
      {
        "id": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 5,
        "type": "Single",
        "name": "Misc",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "47253d49-9f33-4574-97d4-734e1a646371",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 1,
            "name": "Transmission Mode",
            "description": "Code for the mechanism by which disease or condition was acquired by the subject of the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_CaseTransmissionMode_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV157",
                "identifier": "77989-2",
                "messageContext": "OBX segment with \nOBX-3.1=77989-2\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|13|CWE|77989-2^Transmission Mode^LN||420014008^Bloodborne Transmission^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "416086007"
            }
          },
          {
            "id": "85a02430-b77d-4027-8a97-20895cd61c55",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 2,
            "name": "Case Class Status Code",
            "description": "Status of the case/event as suspect, probable, confirmed, or not a case per CSTE/CDC/ surveillance case definitions.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_CaseClassStatus_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV163",
                "identifier": "77990-0",
                "messageContext": "OBX segment with \nOBX-3.1=77990-0\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|14|CWE|77990-0^Case Class Status Code^LN||410605003^Confirmed Present^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "410605003"
            }
          },
          {
            "id": "074a0eae-f5cb-4db7-84be-d855b1108675",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 3,
            "name": "Immediate National Notifiable Condition",
            "description": "Does this case meet the criteria for immediate (extremely urgent or urgent) notification to CDC? Refer to the 2015 list of NNC by type of notification category (extremely urgent, urgent, and standard) at the following link: http://wwwn.cdc.gov/nndss/document/NNC_2015_Notification_Requirements_By_Category.pdf",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT120",
                "identifier": "77965-2",
                "messageContext": "OBX segment with \nOBX-3.1=77965-2\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "If Immediate National Notifiable Condition = 'Y' (meaning the condition is immediately nationally notifiable), populate OBX.5 with 'Y^Yes^HL70136'.\n\nIf Immediate National Notifiable Condition= 'N' (meaning it is NOT immediately nationally notifiable), populate OBX.5 with 'N^No^HL70136'.\n\nIf Immediate National Notifiable Condition = 'U' (meaning it is not known whether the condition is immediately nationally notifiable or not), populate OBX.5 with 'UNK^Unknown^NULLFL'.",
                "sampleSegment": "OBX|15|CWE|77965-2^Immediate National Notifiable Condition^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "dfa5ee59-5af5-4c65-9f23-54c69b7ab086",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 4,
            "name": "Case Outbreak Indicator",
            "description": "Denotes whether the reported case was associated with an identified outbreak.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV150",
                "identifier": "77980-1",
                "messageContext": "OBX segment with \nOBX-3.1=77980-1\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|16|CWE|77980-1^Case Outbreak Indicator^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "b990f6de-497d-4ffb-89a4-e786075421d4",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 5,
            "name": "Case Outbreak Name",
            "description": "A state-assigned name for an identified outbreak.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV151",
                "identifier": "77981-9",
                "messageContext": "OBX segment with \nOBX-3.1=77981-9\nOBX-5=Case Outbreak Name (up to 199 characters)",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Note: that this is a locally-defined field.",
                "sampleSegment": "OBX|17|ST|77981-9^Case Outbreak Name^LN||HANSENOUTB1||||||F"
              }
            },
            "defaultValue": {
              "value": "HANSENOUTB1"
            }
          },
          {
            "id": "8b866406-5cad-4586-9284-7c0b7537e246",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 6,
            "name": "Notification Result Status",
            "description": "Status of the notification",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_ResultStatus_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT118",
                "identifier": "N/A: OBR-25",
                "messageContext": "OBR-25\nResult Status in the OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
                "dataType": "ID",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 25,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBR|2|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|EPIINFO^Epidemiologic Information^CDCPHINVS|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "F"
            }
          },
          {
            "id": "5f37a5f6-092e-4911-bcc2-f4016bd5908e",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 7,
            "name": "Jurisdiction Code",
            "description": "Identifier for the physical site from which the notification is being submitted.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV107",
                "identifier": "77969-4",
                "messageContext": "OBX segment with \nOBX-3.1=77969-4\nOBX-5=Jurisdiction (up to 199 characters)",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Note: that this is a locally-defined field",
                "sampleSegment": "OBX|18|ST|77969-4^Jurisdiction Code^LN||18||||||F"
              }
            },
            "defaultValue": {
              "value": "S01"
            }
          },
          {
            "id": "c5d4d7a0-123e-4718-835e-1ae09039f43a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 8,
            "name": "Reporting Source Type Code",
            "description": "Type of facility or provider associated with the source of information sent to Public Health.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_ReportingSourceType_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV112",
                "identifier": "48766-0",
                "messageContext": "OBX segment with \nOBX-3.1=48766-0\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|19|CWE|48766-0^Reporting Source Type Code^LN||1^Hospital^HL70406||||||F"
              }
            },
            "defaultValue": {
              "value": "1"
            }
          },
          {
            "id": "2559754c-ef80-4381-a94d-e906314a63e9",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 9,
            "name": "Reporting Source ZIP Code",
            "description": "ZIP Code of the reporting source for this case.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV118",
                "identifier": "52831-5",
                "messageContext": "OBX segment with \nOBX-3.1=52831-5\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|20|ST|52831-5^Reporting Source Zip Code^LN||47635||||||F"
              }
            },
            "defaultValue": {
              "value": "77018"
            }
          },
          {
            "id": "8f782b26-1227-4505-8e42-8be9e3d44aea",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 10,
            "name": "Binational Reporting Criteria",
            "description": "For cases meeting the binational criteria, select all the criteria which are met.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": true,
            "mayRepeat": "Y",
            "valueSetCode": "PHVS_BinationalReportingCriteria_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV515",
                "identifier": "77988-4",
                "messageContext": "OBX segment with \nOBX-3.1=77988-4\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..*]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|21|CWE|77988-4^Binational Reporting Criteria^LN||PHC1140^Exposure to a suspected product from Mexico or Canada^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC1140"
            }
          },
          {
            "id": "d219d4e1-a3fa-4689-8dc6-8545742643b1",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 11,
            "name": "Person Reporting to CDC - Name",
            "description": "Name of the person who is reporting the case to the CDC.  This is the person that CDC should contact in a state if there are questions regarding this case notification.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV190",
                "identifier": "74549-7",
                "messageContext": "OBX segment with \nOBX-3.1=74549-7\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|22|ST|74549-7^Person Reporting to CDC - Name^LN||Smith, John||||||F"
              }
            },
            "defaultValue": {
              "value": "Smith, John"
            }
          },
          {
            "id": "187044c2-c2a0-4c20-9a02-79b3b114968b",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 12,
            "name": "Person Reporting to CDC - Phone Number",
            "description": "Phone Number of the person who is reporting the case to the CDC.  This is the person that CDC should contact in a state if there are questions regarding this case notification.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV191",
                "identifier": "74548-9",
                "messageContext": "OBX segment with \nOBX-3.1=74548-9\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|23|ST|74548-9^Person Reporting to CDC-Phone Number^LN||(734)677-7777||||||F"
              }
            },
            "defaultValue": {
              "value": "444-321-1234"
            }
          },
          {
            "id": "04514ba0-4f17-4822-96ec-d07d0f97bf90",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 13,
            "name": "Person Reporting to CDC - Email",
            "description": "Email Address of the person reporting the case to the CDC. This is the person that CDC should contact in a state if there are questions regarding this case notification.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV193",
                "identifier": "74547-1",
                "messageContext": "OBX segment with \nOBX-3.1=74547-1\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|24|ST|74547-1^Person Reporting to CDC - Email^LN||xxx@yyy.org||||||F"
              }
            },
            "defaultValue": {
              "value": "jsmith@txdoh.org"
            }
          },
          {
            "id": "20f6160e-7b39-426e-aebf-1e76ce7c7856",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 14,
            "name": "Case Investigation Start Date",
            "description": "The date the case investigation was initiated.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV147",
                "identifier": "77979-3",
                "messageContext": "OBX segment with \nOBX-3.1=77979-3\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|25|DT|77979-3^Investigation State Date^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "e396d078-4e20-4830-8111-8cdc06fefce3",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 15,
            "name": "Date First Electronically Submitted",
            "description": "Date/time the notification was first electronically sent to CDC.  This value does not change after the original notification.",
            "comments": "",
            "status": "Final",
            "dataType": "DateTime",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT103",
                "identifier": "N/A: OBR-7",
                "messageContext": "OBR-7=date",
                "dataType": "TS",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 7,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Refer to Conformance Statement CN-017 in the PHIN Messaging Guide for Case Notification Reporting, Version 3.0, Release 1.",
                "sampleSegment": "OBR|1|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|68991-9^Epidemiologic Information^LN|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "20140227170100"
            }
          },
          {
            "id": "fff2da7c-79de-4582-8560-14cef5f71ccb",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 16,
            "name": "Date of Electronic Case Notification to CDC",
            "description": "Date/time this version of the electronic case notification was sent.  It will be the same value as NOT103 for the original notification.  For updates, this is the update/send date/time.",
            "comments": "",
            "status": "Final",
            "dataType": "DateTime",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT106",
                "identifier": "N/A: OBR-22",
                "messageContext": "OBR-22=date",
                "dataType": "TS",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 22,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Refer to Conformance Statement CN-018 in the PHIN Messaging Guide for Case Notification Reporting, Version 3.0, Release 1.",
                "sampleSegment": "OBR|1|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|68991-9^Epidemiologic Information^LN|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "20140227170100"
            }
          },
          {
            "id": "54ce917b-82c4-406c-ab82-871536892a20",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 17,
            "name": "Date Reported",
            "description": "Date that a health department first suspected the subject might have the condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV111",
                "identifier": "77995-9",
                "messageContext": "OBX segment with \nOBX-3.1=77995-9\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|26|DT|77995-9^Date Reported^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "5cd792cf-fc9a-4bb4-b6b3-90e08f59091d",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 18,
            "name": "Earliest Date Reported to County",
            "description": "Earliest date reported to county public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV120",
                "identifier": "77972-8",
                "messageContext": "OBX segment with \nOBX-3.1=77972-8\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|27|TS|77972-8^Earliest Date Reported to County^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "33ed2ea9-0e8e-44fc-96a3-a4de42e403bf",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 19,
            "name": "Earliest Date Reported to State",
            "description": "Earliest date reported to state public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV121",
                "identifier": "77973-6",
                "messageContext": "OBX segment with \nOBX-3.1=77973-6\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|28|TS|77973-6^Earliest Date reported to State^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "e5f0a1fa-53d4-4c5f-b63e-880e9c127ccf",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 20,
            "name": "MMWR Week",
            "description": "MMWR Week for which case information is to be counted for MMWR publication.",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV165",
                "identifier": "77991-8",
                "messageContext": "OBX segment with \nOBX-3.1=77991-8\nOBX-5.2=numeric value",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "WEEK should populate the second component of the OBX.5 field.",
                "sampleSegment": "OBX|29|SN|77991-8^MMWR Week^LN||^20||||||F"
              }
            },
            "defaultValue": {
              "value": "9"
            }
          },
          {
            "id": "d7fcf097-015e-42a0-8b11-1e795b5820eb",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 21,
            "name": "MMWR Year",
            "description": "MMWR Year (YYYY) for which case information is to be counted for MMWR publication.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV166",
                "identifier": "77992-6",
                "messageContext": "OBX segment with \nOBX-3.1=77992-6\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "CONFORMANCE STATEMENT:\nOBX-5=date SHALL be in YYYY format",
                "sampleSegment": "OBX|30|DT|77992-6^MMWR Year^LN||2014||||||F"
              }
            },
            "defaultValue": {
              "value": "2014"
            }
          },
          {
            "id": "300c94b0-2aa5-4174-834c-c2799ac843b8",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 22,
            "name": "Date CDC Was First Verbally Notified of This Case",
            "description": "Date the case of an Immediately National Notifiable Condition was first verbally reported to the CDC Emergency Operation Center or the CDC Subject Matter Expert responsible for this condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV176",
                "identifier": "77994-2",
                "messageContext": "OBX segment with \nOBX-3.1=77994-2\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|31|DT|77994-2^Date CDC was first verbally notified of this Case^LN||20130106||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "2a5d04d1-4fcf-43ba-8654-1dd2172978cf",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 23,
            "name": "Date First Reported to PHD",
            "description": "Date the report was first sent to the public health department (local, county or state) by reporter (physician, lab, etc.).",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV177",
                "identifier": "77970-2",
                "messageContext": "OBX segment with \nOBX-3.1=77970-2\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|32|DT|77970-2^Date First Reported to PHD^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "575f896d-c491-4605-9414-f0ca1cc446b8",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 24,
            "name": "Reporting State",
            "description": "State reporting the notification",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_State_FIPS_5-2",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT109",
                "identifier": "77966-0",
                "messageContext": "OBX segment with \nOBX-3.1=77966-0\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|33|CWE|77966-0^Reporting State^LN||18^Indiana^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "54d73684-6024-4040-a5de-37f01c4ab80a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 25,
            "name": "Reporting County",
            "description": "County reporting the notification",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_County_FIPS_6-4",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT113",
                "identifier": "77967-8",
                "messageContext": "OBX segment with \nOBX-3.1=77967-8\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|34|CWE|77967-8^Reporting County^LN||18097^Marion^FIPS6_4||||||F"
              }
            },
            "defaultValue": {
              "value": "48201"
            }
          },
          {
            "id": "69a1f2f9-7d4f-4887-90cb-f2cf23447094",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 26,
            "name": "National Reporting Jurisdiction",
            "description": "National jurisdiction reporting the notification to CDC",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_NationalReportingJurisdiction_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT116",
                "identifier": "77968-6",
                "messageContext": "OBX segment with \nOBX-3.1=77968-6\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "National reporting jurisdiction (77968-6) and Local Record ID (INV168 in OBR-3) are used together to define a unique case in the CDC database. The values for each of these data elements must remain the same when sending updates on a unique case.  Any changes to these data elements will cause the addition of a new case to the CDC database.  For more details, refer to the document on the MMG web site: http://wwwn.cdc.gov/nndss/document/Generic_Data_Elements_that_Define_a_Unique_Case.docx",
                "sampleSegment": "OBX|35|CWE|77968-6^National Reporting Jurisdiction^LN||18^Indiana^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "4ebe3e8d-a885-495e-883d-7a9e1d56c239",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 27,
            "name": "Comment",
            "description": "Use this field, if needed, to communicate anything unusual about this case, which is not already covered with the other data elements.  \n\nDo not send personally identifiable information to CDC in this field.",
            "comments": "",
            "status": "Final",
            "dataType": "LongText",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV886",
                "identifier": "77999-1",
                "messageContext": "OBX segment with \nOBX-3.1=77999-1\nOBX-5=Text String",
                "dataType": "TX",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Do not send personally identifiable information to CDC in this field.",
                "sampleSegment": "OBX|36|TX|77999-1^Comment Field^LN||Comment to communicate something unusual about this case which is not already covered with other data elements||||||F"
              }
            },
            "defaultValue": {
              "value": "No comments at this time"
            }
          }
        ]
      },
      {
        "id": "03402d45-a5d3-4892-907b-74dc5884fa59",
        "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
        "ordinal": 1,
        "type": "Single",
        "name": "Message Profile Section",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": false,
        "elements": [],
        "expanded": false
      },
      {
        "id": "eca939d2-ff3c-4d8d-933a-6cf3e4d227d9",
        "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
        "ordinal": 2,
        "template": {
          "id": "a4e54874-8fdf-46c0-be08-f5327a1ede75",
          "internalVersion": 0,
          "name": "START Template",
          "status": "L"
        },
        "type": "Single",
        "name": "START: EPIDEMIOLOGIC INFORMATION SECTION: The observations in this section will be mapped under an \"Epidemiologic Information\" category OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [],
        "expanded": false
      },
      {
        "id": "74194acd-453f-44e0-b581-e9ef2193286a",
        "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
        "ordinal": 3,
        "type": "RepeatParentChild",
        "name": "EPi Section_Signs and Symptoms",
        "startingDescription": "START: Signs and Symptoms Repeating Group",
        "endingDescription": "END: Signs and Symptoms Repeating Group",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "c683d2cf-7e63-4808-9138-89153052d8bf",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "74194acd-453f-44e0-b581-e9ef2193286a",
            "ordinal": 1,
            "name": "Signs and Symptoms",
            "description": "Signs and symptoms associated with Trichinellosis",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_SignsSymptoms_Trich",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "56831-1",
                "messageContext": "OBX segment with\nOBX-3.1=56831-1\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|56831-1^Signs and Symptoms^LN|1|386661006^Fever^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "386661006"
            }
          },
          {
            "id": "3f495e37-a840-478d-92e3-e445763c8ed3",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "74194acd-453f-44e0-b581-e9ef2193286a",
            "ordinal": 2,
            "name": "Signs and Symptoms Indicator",
            "description": "Indicator for associated signs and symptoms",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "INV919",
                "messageContext": "OBX segment with\nOBX-3.1=INV919\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV919^Signs and Symptoms Indicator^PHINQUESTION|1|Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          }
        ],
        "expanded": false
      },
      {
        "id": "b051e822-3e84-4979-8b45-b5181ae375b2",
        "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
        "ordinal": 4,
        "type": "Single",
        "name": "Epi_",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": false,
        "elements": [
          {
            "id": "125ee46c-54a1-4ea4-9a10-2e30256c4385",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "b051e822-3e84-4979-8b45-b5181ae375b2",
            "ordinal": 1,
            "name": "Highest Measured Temperature",
            "description": "What was the subject's highest measured temperature during this illness?",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "N/A",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV202",
                "identifier": "81265-1",
                "messageContext": "OBX segment with\nOBX-3.1=81265-1\nOBX-5.2=numeric value (see SN data type)\nOBX-6=units value from Temperature Units value set",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Expected values: 36.0-110.0, 999.9\n\nFor unknown temperature, OBX-5 MAY be populated with '999.9'.",
                "sampleSegment": "OBX|nn|SN|81265-1^Highest Measured Temperature^LN||^106|[degF]^degree Fahrenheit [temperature]^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "106"
            }
          },
          {
            "id": "6498da6f-abba-4141-8eb1-617fa1ab4884",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "b051e822-3e84-4979-8b45-b5181ae375b2",
            "ordinal": 2,
            "name": "Temperature Units",
            "description": "Units for highest measured temperature",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "relatedElementId": "125ee46c-54a1-4ea4-9a10-2e30256c4385",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_TemperatureUnit_UCUM",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV2003",
                "identifier": "N/A: OBX-6 for 81265-1",
                "messageContext": "OBX-6 Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|SN|81265-1^Highest Measured Temperature^LN||^106|[degF]^degree Fahrenheit [temperature]^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "[degF]"
            }
          },
          {
            "id": "b78671da-411a-49cc-bc37-5e4bb39c6b25",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "b051e822-3e84-4979-8b45-b5181ae375b2",
            "ordinal": 3,
            "name": "Eosinophilia Testing Performed",
            "description": "Was testing performed for eosinophilia?",
            "category": "Clinical",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "",
                "identifier": "LAB711",
                "messageContext": "OBX segment with\nOBX-3.1=LAB711\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|LAB711^Eosinophilia Testing Performed^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "6f7b9d32-d385-4c34-850e-e91e75953e94",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "b051e822-3e84-4979-8b45-b5181ae375b2",
            "ordinal": 4,
            "name": "Eosinophil Number",
            "description": "Eosinophil value (absolute number or percentage)",
            "comments": "Ask the if the program would like to add the following language for description:\nEosinophil value (absolute number or percentage)",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB665",
                "identifier": "LAB665",
                "messageContext": "OBX segment with\nOBX-3.1=LAB665\nOBX-5.2=numeric value (see SN data type)\nOBX-6=units value from Eosinophil Unit value set",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|SN|LAB665^Eosinophil Number^PHINQUESTION||^50|{cells}/uL^#/µl (count/microliter)^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "50"
            }
          },
          {
            "id": "c65891d9-7e24-416c-a061-99d62a73d6b2",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "b051e822-3e84-4979-8b45-b5181ae375b2",
            "ordinal": 5,
            "name": "Eosinophil Unit",
            "description": "Units for eosinophil value",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "relatedElementId": "6f7b9d32-d385-4c34-850e-e91e75953e94",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_EosinophilUnits_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A: OBX-6",
                "identifier": "N/A: OBX-6 for LAB665",
                "messageContext": "OBX-6 Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|SN|LAB665^Eosinophil Number^PHINQUESTION||^50|{cells}/uL^#/µl (count/microliter)^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "{cells}/uL"
            }
          },
          {
            "id": "add37d77-73fa-44f6-8492-4e75810b6cfc",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "b051e822-3e84-4979-8b45-b5181ae375b2",
            "ordinal": 6,
            "name": "Epi-Linked",
            "description": "Is this case epi-linked to another confirmed or probable case?",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV217",
                "identifier": "INV217",
                "messageContext": "OBX segment with\nOBX-3.1=INV217\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV217^Epi-Linked^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "18ba98b0-7c6f-40ec-9046-d0eafe8bb419",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "b051e822-3e84-4979-8b45-b5181ae375b2",
            "ordinal": 7,
            "name": "Travel",
            "description": "In the eight weeks before symptom onset or diagnosis (use earlier date), did the subject travel out of their state or country of residence?",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "SCT",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "",
                "identifier": "420008001",
                "messageContext": "OBX segment with\nOBX-3.1=420008001\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|420008001^Travel^SCT||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          }
        ],
        "expanded": false
      },
      {
        "id": "5f670bfa-70d8-4808-81bb-379933951793",
        "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
        "ordinal": 5,
        "type": "RepeatParentChild",
        "name": "Travel Repeating Group",
        "startingDescription": "START: Travel History Repeating Group",
        "endingDescription": "END: Travel History Repeating Group",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "fad6bcc9-1309-4aa0-9675-d56b38eba0ce",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "5f670bfa-70d8-4808-81bb-379933951793",
            "ordinal": 1,
            "name": "International Destination(s) of Recent Travel",
            "description": "List any international destinations of recent travel",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Country_ISO_3166-1",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "TRAVEL05",
                "identifier": "82764-2",
                "messageContext": "OBX segment with\nOBX-3.1=82764-2\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.\n\nA value in response to the data elements 'International Destination(s) of Recent Travel' OR 'Travel State' should be populated in the message for each instance of the travel repeating group.",
                "sampleSegment": "OBX|nn|CWE|82764-2^International Destination(s) of Recent Travel^LN|1|MEX^MEXICO^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "MEX"
            }
          },
          {
            "id": "22ca972f-8bd5-4297-98b4-e43bcdac2e32",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "5f670bfa-70d8-4808-81bb-379933951793",
            "ordinal": 2,
            "name": "Travel State",
            "description": "Domestic destination, state traveled to",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_State_FIPS_5-2",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "",
                "identifier": "82754-3",
                "messageContext": "OBX segment with\nOBX-3.1=82754-3\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "A value in response to the data elements 'International Destination(s) of Recent Travel' OR 'Travel State' should be populated in the message for each instance of the travel repeating group.",
                "sampleSegment": "OBX|nn|CWE|82754-3^Travel State^LN|1|08^Colorado^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "08"
            }
          },
          {
            "id": "c869931b-2e75-4ad3-afff-77515bbea687",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "5f670bfa-70d8-4808-81bb-379933951793",
            "ordinal": 3,
            "name": "Date of Arrival to Travel Destination",
            "description": "Date of arrival to travel destination",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "",
                "identifier": "TRAVEL06",
                "messageContext": "OBX segment with\nOBX-3.1=TRAVEL06\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|TRAVEL06^Date of Arrival to Travel Destination^PHINQUESTION|1|20150404||||||F"
              }
            },
            "defaultValue": {
              "value": "20150404"
            }
          },
          {
            "id": "f109fdd9-d33f-4ac0-aac5-a6e06f9aaaab",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "5f670bfa-70d8-4808-81bb-379933951793",
            "ordinal": 4,
            "name": "Date of Departure from Travel Destination",
            "description": "Date of departure from travel destination",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "",
                "identifier": "TRAVEL07",
                "messageContext": "OBX segment with\nOBX-3.1=TRAVEL07\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|TRAVEL07^Date of Departure from Travel Destination^PHINQUESTION|1|20150411||||||F"
              }
            },
            "defaultValue": {
              "value": "20150411"
            }
          }
        ],
        "expanded": false
      },
      {
        "id": "4ea13026-fc9b-4edd-92b2-dca468625f18",
        "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
        "ordinal": 6,
        "type": "RepeatParentChild",
        "name": "Food Exposure",
        "startingDescription": "START: Food Exposure History Repeating Group",
        "endingDescription": "END: Food Exposure History Repeating Group",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "82b8b2c6-e58c-4ad1-a284-65f95dc24765",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "4ea13026-fc9b-4edd-92b2-dca468625f18",
            "ordinal": 1,
            "name": "Suspect Meat Type",
            "description": "Specify type of suspect meat consumed [i.e., meat item(s) consumed in the eight weeks before symptom onset or diagnosis (use earlier date) suspected of making the person ill]",
            "comments": "Does the program want to reduce the redundancy in the description. Remove phrase.",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_MeatConsumedType_Trich",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV1009",
                "identifier": "INV1009",
                "messageContext": "OBX segment with\nOBX-3.1=INV1009\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|INV1009^Suspect Meat Type^PHINQUESTION|1|B2406^Bear meat^LANGUAL||||||F"
              }
            },
            "defaultValue": {
              "value": "B2406"
            }
          },
          {
            "id": "31050998-ff82-4705-bc3c-d77fb13c99e1",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "4ea13026-fc9b-4edd-92b2-dca468625f18",
            "ordinal": 2,
            "name": "Consumed Date",
            "description": "Date suspected meat was eaten",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV967",
                "identifier": "INV967",
                "messageContext": "OBX segment with\nOBX-3.1=INV967\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|INV967^Consumed Date^PHINQUESTION|1|20150202||||||F"
              }
            },
            "defaultValue": {
              "value": "20150202"
            }
          },
          {
            "id": "71e94a43-78a2-4689-9a8e-b98de6d95f18",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "4ea13026-fc9b-4edd-92b2-dca468625f18",
            "ordinal": 3,
            "name": "Meat Preparation",
            "description": "Meat preparation (further food processing)",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_FoodProcessingMethod_Trich",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV968",
                "identifier": "INV968",
                "messageContext": "OBX segment with\nOBX-3.1=INV968\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|INV968^Meat Preparation^PHINQUESTION|1|A0769^dried jerky^LANGUAL||||||F"
              }
            },
            "defaultValue": {
              "value": "A0769"
            }
          },
          {
            "id": "4ee320bd-b06f-44f2-ace6-cd0af5254a65",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "4ea13026-fc9b-4edd-92b2-dca468625f18",
            "ordinal": 4,
            "name": "Where Meat Obtained",
            "description": "Where was the suspected meat obtained?",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_MeatPurchaseInfo_Trich",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV969",
                "identifier": "INV969",
                "messageContext": "OBX segment with\nOBX-3.1=INV969\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|INV969^Where Meat Obtained^PHINQUESTION|1|224842003^Butcher shop^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "224842003"
            }
          },
          {
            "id": "13a0fc76-28fa-4e1f-92f7-adf55683f1d9",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "4ea13026-fc9b-4edd-92b2-dca468625f18",
            "ordinal": 5,
            "name": "Cooking Method",
            "description": "Method of cooking",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_FoodCookingMethod_Trich",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV970",
                "identifier": "INV970",
                "messageContext": "OBX segment with\nOBX-3.1=INV970\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.\n\nThe method of cooking could have occurred prior to or after purchasing the meat.",
                "sampleSegment": "OBX|nn|CWE|INV970^Cooking Method^PHINQUESTION|1|G0029^Fried^LANGUAL||||||F"
              }
            },
            "defaultValue": {
              "value": "G0029"
            }
          },
          {
            "id": "52743189-e93d-4e57-ba2f-c8f0c7151e19",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "4ea13026-fc9b-4edd-92b2-dca468625f18",
            "ordinal": 6,
            "name": "Larva in Suspect Meat",
            "description": "Was larva observed in suspected meat by microscopy?",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_PresentAbsentUnkNotExamined_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV971",
                "identifier": "INV971",
                "messageContext": "OBX segment with\nOBX-3.1=INV971\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV971^Larva in Suspect Meat^PHINQUESTION|1|2667000^Absent^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "2667000"
            }
          },
          {
            "id": "ccf40c5a-fa96-4327-9b11-4425c6c7ed62",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "4ea13026-fc9b-4edd-92b2-dca468625f18",
            "ordinal": 7,
            "name": "Where Suspect Meat Tested",
            "description": "Where was the suspected meat tested?",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_PerformingLaboratoryType_Trich",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "",
                "identifier": "INV972",
                "messageContext": "OBX segment with\nOBX-3.1=INV972\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|INV972^Where Suspect Meat Tested^PHINQUESTION|1|PHC645^Commercial Laboratory^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC645"
            }
          },
          {
            "id": "dc45597d-5adf-415d-8df1-33536cd44c3e",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "4ea13026-fc9b-4edd-92b2-dca468625f18",
            "ordinal": 8,
            "name": "Meat Comments",
            "description": "Use this field, if needed, to communicate anything unusual about the suspect meat, which is not already covered with the other data elements (e.g., additional details about where eaten, if consumed while traveling outside of the U.S., where wild game was hunted, if meat was stored frozen and/or if leftovers are available for testing, etc.).",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV973",
                "identifier": "INV973",
                "messageContext": "OBX segment with\nOBX-3.1=INV973\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|INV973^Meat Comments^PHINQUESTION|1|I ate mixed ground meat including pork and beef.||||||F"
              }
            },
            "defaultValue": {
              "value": "I ate mixed ground meat including pork and beef."
            }
          }
        ],
        "expanded": false
      },
      {
        "id": "0ccae8e2-752d-459a-9d03-8fa893e86693",
        "guideId": "3a140b31-092a-4c47-b09b-31ad1c16f27e",
        "ordinal": 7,
        "template": {
          "id": "3a140b31-092a-4c47-b09b-31ad1c16f27e",
          "internalVersion": 4,
          "name": "Industry and Occupation",
          "status": "L",
          "blockId": "0ccae8e2-752d-459a-9d03-8fa893e86693"
        },
        "type": "Repeat",
        "name": "Industry and Occupation Repeating Group",
        "startingDescription": "START: Industry and Occupation Repeating Group",
        "endingDescription": "END: Industry and Occupation Repeating Group",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "e83000bf-fdab-4894-b91e-e181571320e9",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 2,
            "blockId": "0ccae8e2-752d-459a-9d03-8fa893e86693",
            "ordinal": 1,
            "name": "Current Occupation",
            "description": "This data element is used to capture the narrative text of a subject's current occupation.",
            "category": "Demographics",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "85658-3",
                "identifier": "85658-3",
                "messageContext": "OBX segment with\nOBX-3.1=85658-3\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|85658-3^Current Occupation^LN|1|Medical Technologist||||||F"
              }
            },
            "defaultValue": {
              "value": "Medical Technologist"
            }
          },
          {
            "id": "96c0e36d-dfcd-4ae6-a14b-5531cc67cd13",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 2,
            "blockId": "0ccae8e2-752d-459a-9d03-8fa893e86693",
            "ordinal": 2,
            "name": "Current Occupation Standardized",
            "description": "This data element is used to capture the CDC NIOSH standard occupation code based upon the narrative text of a subject's current occupation.\n\n(The National Institute for Occupational Safety and Health (NIOSH) has developed a web-based software tool designed to translate industry and occupation text to standardized Industry and Occupation codes.  The NIOSH Industry and Occupational Computerized Coding System (NIOCCS) is available here:  http://www.cdc.gov/niosh/topics/coding/overview.html",
            "category": "Demographics",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Occupation_CDC_Census2010",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "85659-1",
                "identifier": "85659-1",
                "messageContext": "OBX segment with\nOBX-3.1=85659-1\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CE|85659-1^Current Occupation Standardized^LN|1|3300^Clinical laboratory technologists and technicians^CDCOCCUPATION2010||||||F"
              }
            },
            "defaultValue": {
              "value": "3300"
            }
          },
          {
            "id": "ce18c48f-bc47-4952-84af-47b6a3b7c80f",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 2,
            "blockId": "0ccae8e2-752d-459a-9d03-8fa893e86693",
            "ordinal": 3,
            "name": "Current Industry",
            "description": "This data element is used to capture the narrative text of subject's current industry.",
            "category": "Demographics",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "85078-4",
                "identifier": "85078-4",
                "messageContext": "OBX segment with\nOBX-3.1=85078-4\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|85078-4^Current Industry^LN|1|Hospital lab||||||F"
              }
            },
            "defaultValue": {
              "value": "Hospital lab"
            }
          },
          {
            "id": "c69a07de-16bb-45f7-b77c-168ca9a023f8",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 2,
            "blockId": "0ccae8e2-752d-459a-9d03-8fa893e86693",
            "ordinal": 4,
            "name": "Current Industry Standardized",
            "description": "This data element is used to capture the CDC NIOSH standard industry code based upon the narrative text of a subject's current industry.  \n\n(The National Institute for Occupational Safety and Health (NIOSH) has developed a web-based software tool designed to translate industry and occupation text to standardized Industry and Occupation codes.  The NIOSH Industry and Occupational Computerized Coding System (NIOCCS) is available here:  http://www.cdc.gov/niosh/topics/coding/overview.html",
            "category": "Demographics",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Industry_CDC_Census2010",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "85657-5",
                "identifier": "85657-5",
                "messageContext": "OBX segment with\nOBX-3.1=85657-5\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CE|85657-5^Current Industry Standardized^LN|1|8190^Hospitals^CDCINDUSTRY2010||||||F"
              }
            },
            "defaultValue": {
              "value": "8190"
            }
          }
        ],
        "expanded": false
      },
      {
        "id": "a2340671-e933-41f3-8a95-c33a3cbfd2c3",
        "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
        "ordinal": 8,
        "template": {
          "id": "ac8c96d4-d222-4e9a-b479-5815eb5e6e65",
          "internalVersion": 1,
          "name": "Epi Lab Block",
          "status": "U"
        },
        "type": "RepeatParentChild",
        "name": "Epidemiology Laboratory Repeating Group Section",
        "startingDescription": "START: Epidemiology Laboratory Repeating Group Section",
        "endingDescription": "END: Epidemiology Laboratory Repeating Group Section",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "46235f48-c656-4118-9589-cfbbc8b4d65b",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "a2340671-e933-41f3-8a95-c33a3cbfd2c3",
            "ordinal": 1,
            "name": "Test Type",
            "description": "Epidemiologic interpretation of the type of test(s) performed for this case.",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_LabTestType_Trich",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV290",
                "identifier": "INV290",
                "messageContext": "OBX segment with\nOBX-3.1=INV290\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|INV290^Test Type^PHINQUESTION|1|LAB668^Muscle Biopsy^PHINQUESTION||||||F"
              }
            },
            "defaultValue": {
              "value": "LAB668"
            }
          },
          {
            "id": "ce95e33c-b803-4428-bd19-99e58bde8945",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "a2340671-e933-41f3-8a95-c33a3cbfd2c3",
            "ordinal": 2,
            "name": "Test Result",
            "description": "Epidemiologic interpretation of the results of the test(s) performed for this case. This is a qualitative test result.  (e.g, positive, detected, negative)",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_LabTestInterpretation_Trich",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV291",
                "identifier": "INV291",
                "messageContext": "OBX segment with\nOBX-3.1=INV291\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV291^Test Result^PHINQUESTION|1|260385009^Negative^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "260385009"
            }
          },
          {
            "id": "048e8187-1aa0-43cc-9629-fc6206378472",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "a2340671-e933-41f3-8a95-c33a3cbfd2c3",
            "ordinal": 3,
            "name": "Test Result Quantitative",
            "description": "Quantitative Test Result Value",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB628",
                "identifier": "LAB628",
                "messageContext": "OBX segment with\nOBX-3.1=LAB628\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|LAB628^Test Result Quantitative^PHINQUESTION|1|10||||||F"
              }
            },
            "defaultValue": {
              "value": "10"
            }
          },
          {
            "id": "cd1cdaee-1368-49b2-bdba-bdb67e3c4e61",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "a2340671-e933-41f3-8a95-c33a3cbfd2c3",
            "ordinal": 4,
            "name": "Specimen Type",
            "description": "This indicates the type of specimen tested.",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_SpecimenType_Trich",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "66746-9",
                "messageContext": "OBX segment with\nOBX-3.1=66746-9\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|66746-9^Specimen Type^LN|1|119297000^Blood^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "119297000"
            }
          },
          {
            "id": "c94d7a1b-b4e8-4487-b8aa-fad74c5006f3",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "a2340671-e933-41f3-8a95-c33a3cbfd2c3",
            "ordinal": 5,
            "name": "Specimen Collection Date/Time",
            "description": "Date of collection of laboratory specimen used for diagnosis of health event reported in this case report. Time of collection is an optional addition to date.",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "DateTime",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "68963-8",
                "messageContext": "OBX segment with\nOBX-3.1=68963-8\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|TS|68963-8^Specimen Collection Date/Time^LN|1|20150205||||||F"
              }
            },
            "defaultValue": {
              "value": "20150205"
            }
          },
          {
            "id": "7e3d9802-f4d9-4229-8f3a-0793e3bae444",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "a2340671-e933-41f3-8a95-c33a3cbfd2c3",
            "ordinal": 6,
            "name": "Specimen Analyzed Date/Time",
            "description": "The date the specimen/isolate was tested. Time of analysis is an optional addition to date.",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "DateTime",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "45375-3",
                "messageContext": "OBX segment with\nOBX-3.1=45375-3\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|TS|45375-3^Specimen Analyzed Date/Time^LN|1|20150205||||||F"
              }
            },
            "defaultValue": {
              "value": "20150205"
            }
          },
          {
            "id": "b08aaccb-7344-4897-829e-6d303c96abea",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "a2340671-e933-41f3-8a95-c33a3cbfd2c3",
            "ordinal": 7,
            "name": "Performing Laboratory Type",
            "description": "Performing laboratory type",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_PerformingLaboratoryType_Trich",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB606",
                "identifier": "82771-7",
                "messageContext": "OBX segment with\nOBX-3.1=82771-7\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|82771-7^Performing Laboratory Type^LN|1|PHC412^CDC Lab ^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC412"
            }
          },
          {
            "id": "36d89c17-d6cb-4c43-8a45-e9256d52b2cc",
            "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
            "guideInternalVersion": 99,
            "blockId": "a2340671-e933-41f3-8a95-c33a3cbfd2c3",
            "ordinal": 8,
            "name": "Strain Type",
            "description": "If the specimen was sent for strain identification, indicate the strain.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_StrainType_Trich",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "",
                "identifier": "LAB508",
                "messageContext": "OBX segment with\nOBX-3.1=LAB508\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|LAB508^Strain Type^PHINQUESTION|1|264435007^T. spiralis^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "264435007"
            }
          }
        ],
        "expanded": false
      },
      {
        "id": "88a79779-b98e-45db-89b2-5646270fdec0",
        "guideId": "2cd11e2e-1f65-4336-95a6-8e3abaec9232",
        "ordinal": 9,
        "template": {
          "id": "6b7d2139-a669-401d-b1af-a4df199322e1",
          "internalVersion": 0,
          "name": "END Template",
          "status": "L"
        },
        "type": "Single",
        "name": "END: EPIDEMIOLOGIC INFORMATION SECTION",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [],
        "expanded": false
      }
    ],
    "columns": [
      {
        "label": "Category",
        "path": "$.category"
      },
      {
        "label": "Data Element (DE) Name",
        "path": "$.name"
      },
      {
        "label": "DE Identifier Sent in HL7 Message",
        "path": "$.mappings.hl7v251.identifier"
      },
      {
        "label": "DE Code System",
        "path": "$.codeSystem"
      },
      {
        "label": "Data Element Description",
        "path": "$.description"
      },
      {
        "label": "Data Type",
        "path": "$.dataType"
      },
      {
        "label": "CDC Priority",
        "path": "$.legacyPriority"
      },
      {
        "label": "May Repeat",
        "path": "$.mayRepeat"
      },
      {
        "label": "Value Set Name (VADS Hyperlink)",
        "path": "$.valueSetLink"
      },
      {
        "label": "Value Set Code",
        "path": "$.valueSetCode"
      },
      {
        "label": "HL7 Message Context",
        "path": "$.mappings.hl7v251.messageContext"
      },
      {
        "label": "HL7 Data Type",
        "path": "$.mappings.hl7v251.dataType"
      },
      {
        "label": "HL7 Usage",
        "path": "$.mappings.hl7v251.usage"
      },
      {
        "label": "HL7 Cardinality",
        "path": "$.mappings.hl7v251.cardinality"
      },
      {
        "label": "HL7 Implementation Notes",
        "path": "$.mappings.hl7v251.implementationNotes"
      },
      {
        "label": "Repeating Group Element",
        "path": "$.mappings.hl7v251.repeatingGroupElementType"
      },
      {
        "label": "Sample Segment",
        "path": "$.mappings.hl7v251.sampleSegment"
      },
      {
        "label": "Comments",
        "path": "$.comments"
      }
    ],
    "templates": [
      {
        "id": "3a140b31-092a-4c47-b09b-31ad1c16f27e",
        "internalVersion": 4,
        "name": "Industry and Occupation",
        "status": "L"
      }
    ]
  }",
                string mmg when mmg.Contains("STD_MMG_V1.0") => "{
    "id": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
    "type": "Guide",
    "guideStatus": "UserAcceptanceTesting",
    "name": "STD",
    "shortName": "STD",
    "description": "The sexually transmitted diseases (STD) case notification MMG v1 is a specification for a unified message. This guide, in combination with the generic individual case notification MMG v2, describes the content (i.e., data elements and valid values) of HL7 case notification messages and the instructions for using the message mapping specification (see References section) in order to submit HL7 case notifications for STDto the Centers for Disease Control and Prevention (CDC).\n\nThis STD case notification MMG v1 needs to be used in conjunction with generic individual case notification MMG v2 to construct a complete case notification message for nationally notifiable diseases and conditions with disease-specific data elements.\n\nThe intended audiences for this document are the state/local health departments, CDC programs and other public health-related organizations interested in using the HL7 V2.5.1 case notification message specification for transmitting their data elements to CDC.",
    "isActive": true,
    "createdBy": "01c77a03-0ed9-4f38-af32-fc1679c3058d",
    "ownedBy": "d44e5b35-ee4f-46db-a617-716486f661aa",
    "internalVersion": 39,
    "createdDate": "2018-04-17T12:53:06.8421732+00:00",
    "lastUpdatedDate": "2020-06-02T23:08:23.001922+00:00",
    "publishVersion": "1.0",
    "profileIdentifier": "STD_MMG_V1.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO",
    "blocks": [
      {
        "id": "5ba813c4-3c27-451d-83af-d8881953588a",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 1,
        "type": "Single",
        "name": "Message Header",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": false,
        "elements": [
          {
            "id": "2e8bec8d-942e-4c78-affb-f5fe720f068c",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 15,
            "blockId": "5943e529-36e6-4533-9ff4-ad28a3983d12",
            "ordinal": 1,
            "name": "Message Profile Identifier",
            "description": "Message Profile Identifiers provide a literal value to use for the references in MSH-21.  MSH-21 will always contain a reference to the notification type in the \"PHINProfileID\" namespace and a reference to the implemented version of the Generic MMG in the \"PHINMsgMapID\" namespace.  For conditions that have a condition-specific MMG, MSH-21 will also contain a reference to that MMG that is also in the \"PHINMsgMapID\" namespace.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": true,
            "repetitions": 3,
            "mayRepeat": "Y/3",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT115",
                "identifier": "N/A: MSH-21",
                "messageContext": "MSH-21",
                "dataType": "EI",
                "segmentType": "MSH",
                "obrPosition": 1,
                "fieldPosition": 21,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[3..3]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "CONFORMANCE STATEMENT: Message Profile ID (MSH-21) for this version of the MMG SHALL contain the literal value: ‘NOTF_ORU_v3.0^PHINProfileID^2.16.840.1.114222.4.10.3^ISO~Generic_MMG_V2.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO~STD_MMG_V1.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO'\n\nRefer to Conformance Statement CN-009 and CN-010 in the National Condition Reporting Case Notification Message Structure Specification\\Profile Version 3.0.",
                "sampleSegment": "MSH|^~\\&|SendAppName^2.16.840.1.114222.TBD^ISO|Sending-Facility^2.16.840.1.114222.TBD^ISO|PHINCDS^2.16.840.1.114222.4.3.2.10^ISO|PHIN^2.16.840.1.114222^ISO|20140630120030.1234-0500||ORU^R01^ORU_R01|MESSAGE CONTROL ID|D|2.5.1|||||||||NOTF_ORU_v3.0^PHINProfileID^2.16.840.1.114222.4.10.3^ISO~Generic_MMG_V2.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO~STD_MMG_V1.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO"
              }
            },
            "defaultValue": {
              "value": "STD_MMG_V1.0^PHINMsgMapID^2.16.840.1.114222.4.10.4^ISO"
            }
          }
        ]
      },
      {
        "id": "280026b5-43c5-4173-9c62-41aba6d57057",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 2,
        "type": "Single",
        "name": "Subject Related",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "df2f791b-5189-404e-972d-01c513ec8f66",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 1,
            "name": "Local Subject ID",
            "description": "The local ID of the subject/entity",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM197",
                "identifier": "N/A: PID-3",
                "messageContext": "PID-3\nPatient Identifier List",
                "dataType": "CX",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 3,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "PID-3.1\nID Number is the local Subject ID from the sending system's internally assigned Subject ID; \n\nPID-3.4\nAssigning Authority format <localID&OID&ISO>  \n\nDoes not pass Variable ID  or label.",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppNamelocalID&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "GenV2_TC01"
            }
          },
          {
            "id": "918225f5-4ffd-47a1-b7b1-27635f5429f6",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 2,
            "name": "Birth Date",
            "description": "Patient’s date of birth",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM115",
                "identifier": "N/A: PID-7",
                "messageContext": "PID-7\nDate/Time of Birth",
                "dataType": "TS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 7,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, PID-7 MAY be populated with '99999999'",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "19640502"
            }
          },
          {
            "id": "e233acfc-301a-4293-a2c8-06002a77f3a3",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 3,
            "name": "Subject’s Sex",
            "description": "Subject’s current sex",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Sex_MFU",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM113",
                "identifier": "N/A: PID-8",
                "messageContext": "PID-8\nAdministrative Sex",
                "dataType": "IS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 8,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "F"
            }
          },
          {
            "id": "18a43f2c-ff15-406b-b9e1-afd8df5239ef",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 4,
            "name": "Race Category",
            "description": "Race category - Major OMB Race Categories. Detailed race information would be rolled up to these major OMB race categories.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": true,
            "mayRepeat": "Y",
            "valueSetCode": "PHVS_RaceCategory_CDC_NullFlavor",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM152",
                "identifier": "N/A: PID-10",
                "messageContext": "PID-10\nRace",
                "dataType": "CE",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 10,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..*]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "2106-3"
            }
          },
          {
            "id": "13a244d2-8c20-4ddf-9a6c-a81f3ca4046a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 5,
            "name": "Other Race Text",
            "description": "Other Race Text",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM154",
                "identifier": "32624-9",
                "messageContext": "OBX segment with \nOBX-3.1=32624-9\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|ST|32624-9^Other Race Text^LN||Place details Other Race here ||||||F"
              }
            },
            "defaultValue": {
              "value": "Apache"
            }
          },
          {
            "id": "7d65fc52-7022-4857-a2af-cfa0eb685b3e",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 6,
            "name": "Ethnic Group",
            "description": "Based on the self-identity of the subject as Hispanic or Latino",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_EthnicityGroup_CDC_Unk",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM155",
                "identifier": "N/A: PID-22",
                "messageContext": "PID-22\nEthnic Group",
                "dataType": "CE",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 22,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "2135-2"
            }
          },
          {
            "id": "8fbdd55e-b971-465a-8df9-fea6a2df1c5f",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 7,
            "name": "Country of Birth",
            "description": "Country of Birth",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_BirthCountry_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM126",
                "identifier": "78746-5",
                "messageContext": "OBX segment with \nOBX-3.1=78746-5\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|CWE|78746-5^Country of Birth^LN||USA^United States^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "UZB"
            }
          },
          {
            "id": "dd308509-acc9-4fc5-b9ed-d31b8770285f",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 8,
            "name": "Other Birth Place",
            "description": "Other Birth Place",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM304",
                "identifier": "21842-0",
                "messageContext": "OBX segment with \nOBX-3.1=21842-0\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|ST|21842-0^Other Birth Place^LN||Place details about Other Birth Place here||||||F"
              }
            },
            "defaultValue": {
              "value": "USSR"
            }
          },
          {
            "id": "07eac6c3-948b-49ae-9050-5e5373749b3a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 9,
            "name": "Country of Usual Residence",
            "description": "Where does the person usually live (defined as their residence).\n\nThis variable replaces the Foreign Resident variable mentioned in 11-SI-04 titled \"Revised Guidelines for Determining Residency for Disease Reporting\" located at http://c.ymcdn.com/sites/www.cste.org/resource/resmgr/PS/11-SI-04.pdf.\n\nCases with country of usual residence equal to the US, Puerto Rico, and US Virgin Islands as well as unknown and null responses will be included in the state-specific counts and rates.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Country_ISO_3166-1",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV501",
                "identifier": "77983-5",
                "messageContext": "OBX segment with\nOBX-3.1=77983-5\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|2|CWE|77983-5^Country of Usual Residence^LN||USA^UNITED STATES^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "USA"
            }
          },
          {
            "id": "457353eb-9da7-469d-b91b-e969b5f64492",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 10,
            "name": "Subject Address County",
            "description": "County of residence of the subject",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_County_FIPS_6-4",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM165",
                "identifier": "N/A: PID-11.9",
                "messageContext": "PID-11.9\nPatient Address  - County",
                "dataType": "IS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 9,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "The entire address construct (PID-11) may repeat per HL7, but only expecting the first instance to be populated and parsed.\n\nAddress county will be used in the annual summary and  it needs to be populated",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "48201"
            }
          },
          {
            "id": "c5b828bf-ee57-4ac1-bf66-fc71a7bd28b9",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 11,
            "name": "Subject Address State",
            "description": "State of residence of the subject",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_State_FIPS_5-2",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM162",
                "identifier": "N/A: PID-11.4",
                "messageContext": "PID-11.4\nPatient Address  - State=value from value set",
                "dataType": "ST",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 4,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "The entire address construct (PID-11) may repeat per HL7, but only expecting the first instance to be populated and parsed.",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "a779a11d-ad38-4bd4-bbdb-1555514b9fc4",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "280026b5-43c5-4173-9c62-41aba6d57057",
            "ordinal": 12,
            "name": "Subject Address ZIP Code",
            "description": "ZIP Code of residence of the subject",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM163",
                "identifier": "N/A: PID-11.5",
                "messageContext": "PID-11.5\nPatient Address  - Postal Code=string up to 12 characters",
                "dataType": "ST",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 5,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "The entire address construct (PID-11) may repeat per HL7, but only expecting the first instance to be populated and parsed.",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "77018"
            }
          }
        ]
      },
      {
        "id": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 3,
        "type": "Single",
        "name": "Case Related",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "9928d4d6-eea0-4e3f-9e06-85cfb2c3199a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 1,
            "name": "Date of Illness Onset",
            "description": "Date of the beginning of the illness.  Reported date of the onset of symptoms of the condition being reported to the public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV137",
                "identifier": "11368-8",
                "messageContext": "OBX segment with \nOBX-3.1=11368-8\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|1|TS|11368-8^Date of Illness Onset^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140224"
            }
          },
          {
            "id": "93942d4e-63ec-46a6-a5cd-1e71d976d90d",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 2,
            "name": "Illness End Date",
            "description": "Date at which the disease or condition ends.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV138",
                "identifier": "77976-9",
                "messageContext": "OBX segment with \nOBX-3.1=77976-9\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|2|TS|77976-9^Illness End Date^LN||20140413||||||F"
              }
            },
            "defaultValue": {
              "value": "20140302"
            }
          },
          {
            "id": "1334f3fc-a02a-47b3-92d4-63153b11dd64",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 3,
            "name": "Illness Duration",
            "description": "Length of time this subject had this disease or condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV139",
                "identifier": "77977-7",
                "messageContext": "OBX segment with \nOBX-3.1=77977-7\nOBX-5.2=numeric value\nOBX-6=units value from INV140 value set;",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|3|SN|77977-7-7^Illness Duration^LN||^12|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "6"
            }
          },
          {
            "id": "abd9a2fc-03ad-418b-9819-6bedc955dbaa",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 4,
            "name": "Illness Duration Units",
            "description": "Unit of time used to describe the length of the illness or condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "relatedElementId": "1334f3fc-a02a-47b3-92d4-63153b11dd64",
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_DurationUnit_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV140",
                "identifier": "N/A: OBX-6",
                "messageContext": "OBX-6-Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Part of the INV139 Observation/OBX Segment.",
                "sampleSegment": "OBX|3|SN|77977-7^Illness Duration^LN||^12|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "d"
            }
          },
          {
            "id": "f3722238-af5e-4346-907d-736edaa47863",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 5,
            "name": "Pregnancy Status",
            "description": "Indicates whether the subject was pregnant at the time of the event.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV178",
                "identifier": "77996-7",
                "messageContext": "OBX segment with \nOBX-3.1=77996-7\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|4|CWE|77996-7^Pregnancy Status^LN||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "4018be44-a07b-47fc-a422-3b41cf59d670",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 6,
            "name": "Diagnosis Date",
            "description": "Earliest date of diagnosis (clinical or laboratory) of condition being reported to public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV136",
                "identifier": "77975-1",
                "messageContext": "OBX segment with \nOBX-3.1=77975-1\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|5|TS|77975-1^Diagnosis Date^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "bc126dea-f2d7-4c00-9e6e-a92e240e1ae8",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 7,
            "name": "Hospitalized",
            "description": "Was subject hospitalized because of this event?",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV128",
                "identifier": "77974-4",
                "messageContext": "OBX segment with \nOBX-3.1=77974-4\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|6|CWE|77974-4^Hospitalized^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "4283972a-8ac7-4c88-8cb6-cbe3057b8bc7",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 8,
            "name": "Admission Date",
            "description": "Subject’s most recent admission date to the hospital for the condition covered by the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV132",
                "identifier": "8656-1",
                "messageContext": "OBX segment with \nOBX-3.1=8656-1\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Use the most recent admission, in association with this instance of the case.",
                "sampleSegment": "OBX|7|TS|8656-1^Admission Date^LN||20131230||||||F"
              }
            },
            "defaultValue": {
              "value": "20140226"
            }
          },
          {
            "id": "e29fcb10-851e-4643-a447-c90e9a27bb8a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 9,
            "name": "Discharge Date",
            "description": "Subject's most recent discharge date from the hospital for the condition covered by the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV133",
                "identifier": "8649-6",
                "messageContext": "OBX segment with \nOBX-3.1=8649-6\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Use the most recent discharge, related to the admission represented by variable INV132.",
                "sampleSegment": "OBX|8|TS|8649-6^Discharge Date^LN||20140104||||||F"
              }
            },
            "defaultValue": {
              "value": "20140302"
            }
          },
          {
            "id": "1514b03e-e4fb-42f1-b63a-4e6add08d7c6",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 10,
            "name": "Duration of Hospital Stay in Days",
            "description": "Subject's duration of stay at the hospital for the condition covered by the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV134",
                "identifier": "78033-8",
                "messageContext": "OBX segment with \nOBX-3.1=78033-8\nOBX-5.2=numeric value",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Populate OBX-6 with d^day^UCUM.",
                "sampleSegment": "OBX|9|SN|78033-8^Duration of hospital stay in days^LN||^5|d^day^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "4"
            }
          },
          {
            "id": "2383f96f-098a-4af3-9ada-f6c6aab923af",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 11,
            "name": "Subject Died",
            "description": "Did the subject die from this illness or complications of this illness?",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV145",
                "identifier": "77978-5",
                "messageContext": "OBX segment with \nOBX-3.1=77978-5\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|10|CWE|77978-5^Subject Died^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "827d2f8f-eec9-49f0-9265-0fc681f120b5",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 12,
            "name": "Deceased Date",
            "description": "If the subject died from this illness or complications associated with this illness, indicate the date of death.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV146",
                "identifier": "N/A: PID-29",
                "messageContext": "PID-29 Patient Death Date and Time",
                "dataType": "TS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 29,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "PID -29 Sample Segment :\n\nPID|1||LocalPatID1DEM197^^^SendAppName&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097|||||||||||2135-2^Hispanic or Latino^CDCREC|||||||20"
              }
            },
            "defaultValue": {
              "value": "20140302"
            }
          },
          {
            "id": "c30ce921-63d7-4981-833b-5b5c99c51bb3",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 13,
            "name": "Condition Code",
            "description": "Condition or event that constitutes the reason the notification is being sent.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "N/A",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV169",
                "identifier": "N/A: OBR-31",
                "messageContext": "OBR-31 Reason for Study in the OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
                "dataType": "CE",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 31,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Refer to the Event Code List of Nationally Notifiable Diseases and Other Conditions of Public Health Importance document for the relevant MMWR year.\n\nThis references can be found on the NNDSS Messaging Mapping Guide web site: http://wwwn.cdc.gov/nndss/mes",
                "sampleSegment": "OBR|1|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|68991-9^Epidemiologic Information^LN|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "11550"
            }
          },
          {
            "id": "6665e1dc-de3d-4e98-a4cc-cb26c4289a2e",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 14,
            "name": "Local Record ID",
            "description": "Sending system-assigned local ID of the case investigation with which the subject is associated.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV168",
                "identifier": "N/A: OBR-3",
                "messageContext": "OBR-3\nFiller Order Number  in the OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
                "dataType": "EI",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 3,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "OBR-3.1 is the internally assigned case/investigation ID.\n\nOBR-3.3 is the OID for sending application as assigning authority.\n\nOBR-3.4 is the literal value: 'ISO'.\n\nNational reporting jurisdiction (77968-6) and Local Record ID (INV168 in OBR-3) are used together to define a unique case in the CDC database.  The values for each of these data elements must remain the same when sending updates on a unique case.  Any changes to these data elements will cause the addition of a new case to the CDC database.  For more details, refer to the document on the MMG web site: http://wwwn.cdc.gov/nndss/document/Generic_Data_Elements_that_Define_a_Unique_Case.docx",
                "sampleSegment": "OBR|2|\"\"|CASE/Investigation ID^SendAppName^2.16.840.1.114222.TBD^ISO|EPIINFO^Epidemiologic Information^CDCPHINVS|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "GenV2_TC01"
            }
          },
          {
            "id": "313e6282-fa94-43d7-b276-0c9e29f9c091",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 15,
            "name": "State Case Identifier",
            "description": "States use this identifier to link NEDSS investigations back to their own state investigations.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV173",
                "identifier": "77993-4",
                "messageContext": "OBX segment with \nOBX-3.1=77993-4\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|1|ST|77993-4^State Case Identifier^LN||2014IN100000001||||||F"
              }
            },
            "defaultValue": {
              "value": "TX4321"
            }
          },
          {
            "id": "17c8098b-0945-4a20-ae3a-0b608964b98c",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 16,
            "name": "Legacy Case Identifier",
            "description": "CDC uses this identifier to link current case notifications to case notifications submitted by a previous system (NETSS, STD-MIS, etc.).",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV200",
                "identifier": "77997-5",
                "messageContext": "OBX segment with \nOBX-3.1=77997-5\nOBX-5=Legacy Case Identifier",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For a NETSS case ID, please use the following format:  \nCase ID(6) - State(2) - Site(3) - Year(4)\ne.g.,  CaseId01LAB2009.",
                "sampleSegment": "OBX|2|ST|77997-5^Legacy Case Identifier^LN||61528936181002006||||||F"
              }
            },
            "defaultValue": {
              "value": "48432148S012014"
            }
          },
          {
            "id": "b0fa71f1-71c0-4ecb-b2ea-7432f5890ba5",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 17,
            "name": "Age at Case Investigation",
            "description": "Subject age at time of case investigation",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV2001",
                "identifier": "77998-3",
                "messageContext": "OBX segment with \nOBX-3.1=77998-3\nOBX-5.2=numeric value\nOBX-6=units value from INV2002 value set;",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "AGE should populate the second component of the OBX.5 field.  In HL7, components are typically separated by the character ‘^’ (Caret).\n\nOBX-5.2 will contain '9999' for unknown Age at case investigation.",
                "sampleSegment": "OBX|3|SN|77998-3^Age at Case investigation^LN||^51|a^year^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "49"
            }
          },
          {
            "id": "6a1a06f1-e752-4f67-948c-851160d9f374",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 18,
            "name": "Age Unit at Case Investigation",
            "description": "Subject age unit at time of case investigation",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "relatedElementId": "b0fa71f1-71c0-4ecb-b2ea-7432f5890ba5",
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_AgeUnit_UCUM",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV2002",
                "identifier": "N/A: OBX-6",
                "messageContext": "OBX-6-Units",
                "dataType": "CE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 6,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Part of the INV2001 Observation/OBX Segment.",
                "sampleSegment": "OBX|3|SN|77998-3^Age at Case investigation^LN||^51|a^year^UCUM|||||F"
              }
            },
            "defaultValue": {
              "value": "a"
            }
          },
          {
            "id": "55dd0919-8991-47cd-a946-788634c1d4a9",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 19,
            "name": "Case Disease Imported Code",
            "description": "Indication of where the disease/condition was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_DiseaseAcquiredJurisdiction_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV152",
                "identifier": "77982-7",
                "messageContext": "OBX segment with \nOBX-3.1=77982-7\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|4|CWE|77982-7^Case Disease Imported Code^LN||PHC246^Out of State^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC246"
            }
          },
          {
            "id": "7d1a4941-6a05-45b7-a671-74ea67a1b1d1",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 20,
            "name": "Imported Country",
            "description": "If the disease or condition was imported, indicates the country in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Country_ISO_3166-1",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV153",
                "identifier": "INV153",
                "messageContext": "OBX segment with \nOBX-3.1=INV153\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Three-letter country code",
                "sampleSegment": "OBX|5|CWE|INV153^Imported Country^PHINQUESTION||MEX^Mexico^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "USA"
            }
          },
          {
            "id": "1863f6dd-d646-47d5-b886-9080a8cfabc0",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 21,
            "name": "Imported State",
            "description": "If the disease or condition was imported, indicates the state in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_State_FIPS_5-2",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV154",
                "identifier": "INV154",
                "messageContext": "OBX segment with \nOBX-3.1=INV154\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Two-digit numeric FIPS code",
                "sampleSegment": "OBX|6|CWE|INV154^Imported State^PHINQUESTION||48^Texas^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "04"
            }
          },
          {
            "id": "d692f87d-4095-4777-bafb-7049cdc80d07",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 22,
            "name": "Imported City",
            "description": "If the disease or condition was imported, indicates the city in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_City_USGS_GNIS",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV155",
                "identifier": "INV155",
                "messageContext": "OBX segment with \nOBX-3.1=INV155\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "One-to-ten digit numeric GNIS Feature ID",
                "sampleSegment": "OBX|7|CWE|INV155^Imported City^PHINQUESTION||1350851^Abernathy^USGSGNIS||||||F"
              }
            },
            "defaultValue": {
              "value": "",
              "label": "Houston, TX, Harris"
            }
          },
          {
            "id": "bf98da0d-48ef-4bcb-aacc-e3f2a43ab276",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "64c5e4c8-2dee-4ec1-b3f2-141db90e15bf",
            "ordinal": 23,
            "name": "Imported County",
            "description": "If the disease or condition was imported, contains the county of origin of the disease or condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_County_FIPS_6-4",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV156",
                "identifier": "INV156",
                "messageContext": "OBX segment with \nOBX-3.1=INV156\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Five-digit numeric FIPS code",
                "sampleSegment": "OBX|8|CWE|INV156^Imported County^PHINQUESTION||48303^Lubbock, TX^FIPS6_4||||||F"
              }
            },
            "defaultValue": {
              "value": "",
              "label": "Harris, TX"
            }
          }
        ]
      },
      {
        "id": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 4,
        "type": "Repeat",
        "name": "Repeating Variables for Disease Exposure",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "2cc47e98-8212-4ef1-948a-1e2fcf7309ca",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 1,
            "name": "Country of Exposure",
            "description": "Indicates the country in which the disease was likely acquired.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_Country_ISO_3166-1",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV502",
                "identifier": "77984-3",
                "messageContext": "OBX segment with \nOBX-3.1=77984-3\nOBX-4=obs sub-ID\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV153 (Imported Country) with INV502 (Country of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported fields for reports and publications.",
                "sampleSegment": "OBX|9|CWE|77984-3^Country of Exposure^LN|1|USA^United States^ISO3166_1||||||F"
              }
            },
            "defaultValue": {
              "value": "USA"
            }
          },
          {
            "id": "cd308f98-95c1-4d93-a9bd-52335c3d3486",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 2,
            "name": "State or Province of Exposure",
            "description": "Indicates the state (or Province) in which the disease was likely acquired.\n\nNote: If Country of exposure was US, populate with US State. If Country of exposure was Mexico, populate with Mexican State. If country of exposure was Canada, populated with Canadian Province. For all other countries, leave null.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_StateProvinceOfExposure_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV503",
                "identifier": "77985-0",
                "messageContext": "OBX segment with\nOBX-3.1=77985-0\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV154 (Imported State) with INV503 (State or Province of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace the imported field or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported fields for reports and publications.",
                "sampleSegment": "OBX|10|CWE|77985-0^State or Province of Exposure^LN|1|06^California^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "40e12cd8-156e-4205-9073-173bce6aef74",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 3,
            "name": "City of Exposure",
            "description": "Indicates the city in which the disease was likely acquired\n\nNote: If country of exposure is US, populate with US city. For all other cities, can be populated but not required.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV504",
                "identifier": "77986-8",
                "messageContext": "OBX segment with \nOBX-3.1=77986-8\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV155 (Imported City) with INV504 (City of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported field for reports and publications.",
                "sampleSegment": "OBX|11|ST|77986-8^City of Exposure^LN|1|Pasadena||||||F"
              }
            },
            "defaultValue": {
              "value": "Houston"
            }
          },
          {
            "id": "7cbc5158-8d8e-4a07-92d8-81186115b0b1",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "eac0fcf3-a9e3-4e4a-a731-ec223c4b2ceb",
            "ordinal": 4,
            "name": "County of Exposure",
            "description": "Indicates the county in which the disease was likely acquired\n\nNote: If country of exposure is US, populate with US county.  Otherwise, leave null.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV505",
                "identifier": "77987-6",
                "messageContext": "OBX segment with \nOBX-3.1=77987-6\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "CSTE has asked CDC to consider replacing INV156 (Imported County) with INV505 (County of exposure), in a repeating block format. CSTE and CDC have agreed to work together to evaluate whether the newly proposed variable can either replace or populate the imported field. Until the time that assessment can be made, CDC will need to be able to use the imported field for reports and publications.",
                "sampleSegment": "OBX|12|ST|77987-6^County of Exposure^LN|1|Los Angeles||||||F"
              }
            },
            "defaultValue": {
              "value": "Harris"
            }
          }
        ]
      },
      {
        "id": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
        "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
        "ordinal": 5,
        "type": "Single",
        "name": "Misc",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "47253d49-9f33-4574-97d4-734e1a646371",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 1,
            "name": "Transmission Mode",
            "description": "Code for the mechanism by which disease or condition was acquired by the subject of the investigation.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_CaseTransmissionMode_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV157",
                "identifier": "77989-2",
                "messageContext": "OBX segment with \nOBX-3.1=77989-2\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|13|CWE|77989-2^Transmission Mode^LN||420014008^Bloodborne Transmission^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "416086007"
            }
          },
          {
            "id": "85a02430-b77d-4027-8a97-20895cd61c55",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 2,
            "name": "Case Class Status Code",
            "description": "Status of the case/event as suspect, probable, confirmed, or not a case per CSTE/CDC/ surveillance case definitions.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_CaseClassStatus_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV163",
                "identifier": "77990-0",
                "messageContext": "OBX segment with \nOBX-3.1=77990-0\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|14|CWE|77990-0^Case Class Status Code^LN||410605003^Confirmed Present^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "410605003"
            }
          },
          {
            "id": "074a0eae-f5cb-4db7-84be-d855b1108675",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 3,
            "name": "Immediate National Notifiable Condition",
            "description": "Does this case meet the criteria for immediate (extremely urgent or urgent) notification to CDC? Refer to the 2015 list of NNC by type of notification category (extremely urgent, urgent, and standard) at the following link: http://wwwn.cdc.gov/nndss/document/NNC_2015_Notification_Requirements_By_Category.pdf",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT120",
                "identifier": "77965-2",
                "messageContext": "OBX segment with \nOBX-3.1=77965-2\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "If Immediate National Notifiable Condition = 'Y' (meaning the condition is immediately nationally notifiable), populate OBX.5 with 'Y^Yes^HL70136'.\n\nIf Immediate National Notifiable Condition= 'N' (meaning it is NOT immediately nationally notifiable), populate OBX.5 with 'N^No^HL70136'.\n\nIf Immediate National Notifiable Condition = 'U' (meaning it is not known whether the condition is immediately nationally notifiable or not), populate OBX.5 with 'UNK^Unknown^NULLFL'.",
                "sampleSegment": "OBX|15|CWE|77965-2^Immediate National Notifiable Condition^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "dfa5ee59-5af5-4c65-9f23-54c69b7ab086",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 4,
            "name": "Case Outbreak Indicator",
            "description": "Denotes whether the reported case was associated with an identified outbreak.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV150",
                "identifier": "77980-1",
                "messageContext": "OBX segment with \nOBX-3.1=77980-1\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|16|CWE|77980-1^Case Outbreak Indicator^LN||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "b990f6de-497d-4ffb-89a4-e786075421d4",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 5,
            "name": "Case Outbreak Name",
            "description": "A state-assigned name for an identified outbreak.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV151",
                "identifier": "77981-9",
                "messageContext": "OBX segment with \nOBX-3.1=77981-9\nOBX-5=Case Outbreak Name (up to 199 characters)",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Note: that this is a locally-defined field.",
                "sampleSegment": "OBX|17|ST|77981-9^Case Outbreak Name^LN||HANSENOUTB1||||||F"
              }
            },
            "defaultValue": {
              "value": "HANSENOUTB1"
            }
          },
          {
            "id": "8b866406-5cad-4586-9284-7c0b7537e246",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 6,
            "name": "Notification Result Status",
            "description": "Status of the notification",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_ResultStatus_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT118",
                "identifier": "N/A: OBR-25",
                "messageContext": "OBR-25\nResult Status in the OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
                "dataType": "ID",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 25,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBR|2|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|EPIINFO^Epidemiologic Information^CDCPHINVS|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "F"
            }
          },
          {
            "id": "5f37a5f6-092e-4911-bcc2-f4016bd5908e",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 7,
            "name": "Jurisdiction Code",
            "description": "Identifier for the physical site from which the notification is being submitted.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV107",
                "identifier": "77969-4",
                "messageContext": "OBX segment with \nOBX-3.1=77969-4\nOBX-5=Jurisdiction (up to 199 characters)",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Note: that this is a locally-defined field",
                "sampleSegment": "OBX|18|ST|77969-4^Jurisdiction Code^LN||18||||||F"
              }
            },
            "defaultValue": {
              "value": "S01"
            }
          },
          {
            "id": "c5d4d7a0-123e-4718-835e-1ae09039f43a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 8,
            "name": "Reporting Source Type Code",
            "description": "Type of facility or provider associated with the source of information sent to Public Health.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_ReportingSourceType_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV112",
                "identifier": "48766-0",
                "messageContext": "OBX segment with \nOBX-3.1=48766-0\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|19|CWE|48766-0^Reporting Source Type Code^LN||1^Hospital^HL70406||||||F"
              }
            },
            "defaultValue": {
              "value": "1"
            }
          },
          {
            "id": "2559754c-ef80-4381-a94d-e906314a63e9",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 9,
            "name": "Reporting Source ZIP Code",
            "description": "ZIP Code of the reporting source for this case.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV118",
                "identifier": "52831-5",
                "messageContext": "OBX segment with \nOBX-3.1=52831-5\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|20|ST|52831-5^Reporting Source Zip Code^LN||47635||||||F"
              }
            },
            "defaultValue": {
              "value": "77018"
            }
          },
          {
            "id": "8f782b26-1227-4505-8e42-8be9e3d44aea",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 10,
            "name": "Binational Reporting Criteria",
            "description": "For cases meeting the binational criteria, select all the criteria which are met.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": true,
            "mayRepeat": "Y",
            "valueSetCode": "PHVS_BinationalReportingCriteria_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV515",
                "identifier": "77988-4",
                "messageContext": "OBX segment with \nOBX-3.1=77988-4\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..*]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|21|CWE|77988-4^Binational Reporting Criteria^LN||PHC1140^Exposure to a suspected product from Mexico or Canada^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC1140"
            }
          },
          {
            "id": "d219d4e1-a3fa-4689-8dc6-8545742643b1",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 11,
            "name": "Person Reporting to CDC - Name",
            "description": "Name of the person who is reporting the case to the CDC.  This is the person that CDC should contact in a state if there are questions regarding this case notification.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV190",
                "identifier": "74549-7",
                "messageContext": "OBX segment with \nOBX-3.1=74549-7\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|22|ST|74549-7^Person Reporting to CDC - Name^LN||Smith, John||||||F"
              }
            },
            "defaultValue": {
              "value": "Smith, John"
            }
          },
          {
            "id": "187044c2-c2a0-4c20-9a02-79b3b114968b",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 12,
            "name": "Person Reporting to CDC - Phone Number",
            "description": "Phone Number of the person who is reporting the case to the CDC.  This is the person that CDC should contact in a state if there are questions regarding this case notification.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV191",
                "identifier": "74548-9",
                "messageContext": "OBX segment with \nOBX-3.1=74548-9\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|23|ST|74548-9^Person Reporting to CDC-Phone Number^LN||(734)677-7777||||||F"
              }
            },
            "defaultValue": {
              "value": "444-321-1234"
            }
          },
          {
            "id": "04514ba0-4f17-4822-96ec-d07d0f97bf90",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 13,
            "name": "Person Reporting to CDC - Email",
            "description": "Email Address of the person reporting the case to the CDC. This is the person that CDC should contact in a state if there are questions regarding this case notification.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV193",
                "identifier": "74547-1",
                "messageContext": "OBX segment with \nOBX-3.1=74547-1\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|24|ST|74547-1^Person Reporting to CDC - Email^LN||xxx@yyy.org||||||F"
              }
            },
            "defaultValue": {
              "value": "jsmith@txdoh.org"
            }
          },
          {
            "id": "20f6160e-7b39-426e-aebf-1e76ce7c7856",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 14,
            "name": "Case Investigation Start Date",
            "description": "The date the case investigation was initiated.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV147",
                "identifier": "77979-3",
                "messageContext": "OBX segment with \nOBX-3.1=77979-3\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|25|DT|77979-3^Investigation State Date^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "e396d078-4e20-4830-8111-8cdc06fefce3",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 15,
            "name": "Date First Electronically Submitted",
            "description": "Date/time the notification was first electronically sent to CDC.  This value does not change after the original notification.",
            "comments": "",
            "status": "Final",
            "dataType": "DateTime",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT103",
                "identifier": "N/A: OBR-7",
                "messageContext": "OBR-7=date",
                "dataType": "TS",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 7,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Refer to Conformance Statement CN-017 in the PHIN Messaging Guide for Case Notification Reporting, Version 3.0, Release 1.",
                "sampleSegment": "OBR|1|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|68991-9^Epidemiologic Information^LN|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "20140227170100"
            }
          },
          {
            "id": "fff2da7c-79de-4582-8560-14cef5f71ccb",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 16,
            "name": "Date of Electronic Case Notification to CDC",
            "description": "Date/time this version of the electronic case notification was sent.  It will be the same value as NOT103 for the original notification.  For updates, this is the update/send date/time.",
            "comments": "",
            "status": "Final",
            "dataType": "DateTime",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT106",
                "identifier": "N/A: OBR-22",
                "messageContext": "OBR-22=date",
                "dataType": "TS",
                "segmentType": "OBR",
                "obrPosition": 1,
                "fieldPosition": 22,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Refer to Conformance Statement CN-018 in the PHIN Messaging Guide for Case Notification Reporting, Version 3.0, Release 1.",
                "sampleSegment": "OBR|1|\"\"|INV168^SendAppName^2.16.840.1.114222.TBD^ISO|68991-9^Epidemiologic Information^LN|||20140506170100|||||||||||||||20140506170100|||F||||||11550^Hemolytic uremic syndrome postdiarrheal^NND"
              }
            },
            "defaultValue": {
              "value": "20140227170100"
            }
          },
          {
            "id": "54ce917b-82c4-406c-ab82-871536892a20",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 17,
            "name": "Date Reported",
            "description": "Date that a health department first suspected the subject might have the condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "1",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV111",
                "identifier": "77995-9",
                "messageContext": "OBX segment with \nOBX-3.1=77995-9\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|26|DT|77995-9^Date Reported^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "5cd792cf-fc9a-4bb4-b6b3-90e08f59091d",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 18,
            "name": "Earliest Date Reported to County",
            "description": "Earliest date reported to county public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV120",
                "identifier": "77972-8",
                "messageContext": "OBX segment with \nOBX-3.1=77972-8\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|27|TS|77972-8^Earliest Date Reported to County^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "33ed2ea9-0e8e-44fc-96a3-a4de42e403bf",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 19,
            "name": "Earliest Date Reported to State",
            "description": "Earliest date reported to state public health system.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV121",
                "identifier": "77973-6",
                "messageContext": "OBX segment with \nOBX-3.1=77973-6\nOBX-5=date",
                "dataType": "TS",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'",
                "sampleSegment": "OBX|28|TS|77973-6^Earliest Date reported to State^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "e5f0a1fa-53d4-4c5f-b63e-880e9c127ccf",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 20,
            "name": "MMWR Week",
            "description": "MMWR Week for which case information is to be counted for MMWR publication.",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV165",
                "identifier": "77991-8",
                "messageContext": "OBX segment with \nOBX-3.1=77991-8\nOBX-5.2=numeric value",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "WEEK should populate the second component of the OBX.5 field.",
                "sampleSegment": "OBX|29|SN|77991-8^MMWR Week^LN||^20||||||F"
              }
            },
            "defaultValue": {
              "value": "9"
            }
          },
          {
            "id": "d7fcf097-015e-42a0-8b11-1e795b5820eb",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 21,
            "name": "MMWR Year",
            "description": "MMWR Year (YYYY) for which case information is to be counted for MMWR publication.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV166",
                "identifier": "77992-6",
                "messageContext": "OBX segment with \nOBX-3.1=77992-6\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "CONFORMANCE STATEMENT:\nOBX-5=date SHALL be in YYYY format",
                "sampleSegment": "OBX|30|DT|77992-6^MMWR Year^LN||2014||||||F"
              }
            },
            "defaultValue": {
              "value": "2014"
            }
          },
          {
            "id": "300c94b0-2aa5-4174-834c-c2799ac843b8",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 22,
            "name": "Date CDC Was First Verbally Notified of This Case",
            "description": "Date the case of an Immediately National Notifiable Condition was first verbally reported to the CDC Emergency Operation Center or the CDC Subject Matter Expert responsible for this condition.",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV176",
                "identifier": "77994-2",
                "messageContext": "OBX segment with \nOBX-3.1=77994-2\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|31|DT|77994-2^Date CDC was first verbally notified of this Case^LN||20130106||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "2a5d04d1-4fcf-43ba-8654-1dd2172978cf",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 23,
            "name": "Date First Reported to PHD",
            "description": "Date the report was first sent to the public health department (local, county or state) by reporter (physician, lab, etc.).",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV177",
                "identifier": "77970-2",
                "messageContext": "OBX segment with \nOBX-3.1=77970-2\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|32|DT|77970-2^Date First Reported to PHD^LN||20140401||||||F"
              }
            },
            "defaultValue": {
              "value": "20140225"
            }
          },
          {
            "id": "575f896d-c491-4605-9414-f0ca1cc446b8",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 24,
            "name": "Reporting State",
            "description": "State reporting the notification",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_State_FIPS_5-2",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT109",
                "identifier": "77966-0",
                "messageContext": "OBX segment with \nOBX-3.1=77966-0\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|33|CWE|77966-0^Reporting State^LN||18^Indiana^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "54d73684-6024-4040-a5de-37f01c4ab80a",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 25,
            "name": "Reporting County",
            "description": "County reporting the notification",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "2",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_County_FIPS_6-4",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT113",
                "identifier": "77967-8",
                "messageContext": "OBX segment with \nOBX-3.1=77967-8\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|34|CWE|77967-8^Reporting County^LN||18097^Marion^FIPS6_4||||||F"
              }
            },
            "defaultValue": {
              "value": "48201"
            }
          },
          {
            "id": "69a1f2f9-7d4f-4887-90cb-f2cf23447094",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 26,
            "name": "National Reporting Jurisdiction",
            "description": "National jurisdiction reporting the notification to CDC",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "R",
            "priority": "R",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_NationalReportingJurisdiction_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "NOT116",
                "identifier": "77968-6",
                "messageContext": "OBX segment with \nOBX-3.1=77968-6\nOBX-5=Value from value Set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "R",
                "cardinality": "[1..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "National reporting jurisdiction (77968-6) and Local Record ID (INV168 in OBR-3) are used together to define a unique case in the CDC database. The values for each of these data elements must remain the same when sending updates on a unique case.  Any changes to these data elements will cause the addition of a new case to the CDC database.  For more details, refer to the document on the MMG web site: http://wwwn.cdc.gov/nndss/document/Generic_Data_Elements_that_Define_a_Unique_Case.docx",
                "sampleSegment": "OBX|35|CWE|77968-6^National Reporting Jurisdiction^LN||18^Indiana^FIPS5_2||||||F"
              }
            },
            "defaultValue": {
              "value": "48"
            }
          },
          {
            "id": "4ebe3e8d-a885-495e-883d-7a9e1d56c239",
            "guideId": "88e35837-86b3-4166-ade9-ee4bc2b9bee3",
            "guideInternalVersion": 4,
            "blockId": "e4ef9c62-bb10-4908-a218-5381b10dcd2e",
            "ordinal": 27,
            "name": "Comment",
            "description": "Use this field, if needed, to communicate anything unusual about this case, which is not already covered with the other data elements.  \n\nDo not send personally identifiable information to CDC in this field.",
            "comments": "",
            "status": "Final",
            "dataType": "LongText",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "O",
            "priority": "3",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV886",
                "identifier": "77999-1",
                "messageContext": "OBX segment with \nOBX-3.1=77999-1\nOBX-5=Text String",
                "dataType": "TX",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "O",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Do not send personally identifiable information to CDC in this field.",
                "sampleSegment": "OBX|36|TX|77999-1^Comment Field^LN||Comment to communicate something unusual about this case which is not already covered with other data elements||||||F"
              }
            },
            "defaultValue": {
              "value": "No comments at this time"
            }
          }
        ]
      },
      {
        "id": "5943e529-36e6-4533-9ff4-ad28a3983d12",
        "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
        "ordinal": 1,
        "type": "Single",
        "name": "MSH Header",
        "startingDescription": "START: Subject Related",
        "endingDescription": "END: Subject Related",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "f033dbca-6d02-4661-a5bc-cd41fb4f678a",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "5943e529-36e6-4533-9ff4-ad28a3983d12",
            "ordinal": 2,
            "name": "Census Tract of Case-Patient Residence",
            "description": "Census tract where the address is located is a unique identifier associated with a small statistical subdivision of a county. Census tract data allows a user to find population and housing statistics about a specific part of an urban area. A single community may be composed of several census tracts. ",
            "category": "Demographics",
            "comments": "RVCT 6e\nTBLISS 6e",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "N/A",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "DEM168",
                "identifier": "N/A: PID-11.10",
                "messageContext": "PID-11.10\nPatient Address - Census Tract",
                "dataType": "IS",
                "segmentType": "PID",
                "obrPosition": 1,
                "fieldPosition": 11,
                "componentPosition": 10,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Census Tract information can be searched using the American Fact Finder Census Website - http://factfinder2.census.gov/\n\nCensus tract should be populated with the 11 character US Census Bureau census tract designation for the residence of the patient. Reading from left to right this field should contain the location's 2-digit State code, 3-digit County code, and 6-digit census tract code",
                "sampleSegment": "PID|1||LocalPatID1DEM197^^^SendAppNamelocalID&2.16.840.1.114222.GENv2&ISO||~^^^^^^S||19620302|F||2106-3^White^CDCREC~1002-5^American Indian or Alaska Native^CDCREC|^^^18^47635^^^^18097^18097310103|||||||||||2135-2^Hispanic or Latino^CDCREC"
              }
            },
            "defaultValue": {
              "value": "18097310103"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "2c334f01-7c64-4fb0-9127-0216d37b1a65",
        "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
        "ordinal": 2,
        "template": {
          "id": "a4e54874-8fdf-46c0-be08-f5327a1ede75",
          "internalVersion": 0,
          "name": "START Template",
          "status": "L"
        },
        "type": "Single",
        "name": "START: EPIDEMIOLOGIC INFORMATION SECTION: The observations in this section will be mapped under an \"Epidemiologic Information\" category OBR segment with an OBR-4 value of '68991-9^Epidemiologic Information^LN'",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": []
      },
      {
        "id": "483da77d-5469-458e-8163-843f947fa0f8",
        "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
        "ordinal": 3,
        "type": "Single",
        "name": "Case Related",
        "startingDescription": "START: Case Related",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "d4ed816f-464c-42e4-98aa-f1cc989b6b2d",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 1,
            "name": "Gender Identity",
            "description": "Patient identified gender identity (i.e., an individual’s personal sense of being a man, woman, or other gender, regardless of the sex that person was assigned at birth)",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_GenderIdentity_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "",
                "identifier": "76691-5",
                "messageContext": "OBX segment with\nOBX-3.1=76691-5\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|76691-5^Gender Identity^LN||407376001^Male-to-female transsexual^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "407376001"
            }
          },
          {
            "id": "22ac3382-fc82-41de-858e-48b0a9a49b9c",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 2,
            "name": "Sexual Orientation",
            "description": "Patient identified sexual orientation (i.e., an individual's physical and/or emotional attraction to another individual of the same gender, opposite gender, or both genders)",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_SexualOrientation_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "",
                "identifier": "76690-7",
                "messageContext": "OBX segment with\nOBX-3.1=76690-7\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|76690-7^Sexual Orientation^LN||42035005^Bisexual^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "42035005"
            }
          },
          {
            "id": "8ee400cc-f1dc-4712-ab38-e4f8bba72171",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 3,
            "name": "Date of Initial Health Exam Associated with Case Report Health Event",
            "description": "Date of earliest healthcare encounter/visit /exam associated with this event/case report.  May equate with date of exam or date of diagnosis",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD099",
                "identifier": "STD099",
                "messageContext": "OBX segment with\nOBX-3.1=STD099\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "Date of initial health exam associated with the case report. \"health event\". If the date of the initial health exam is missing use the lab specimen collection date (LAB163).",
                "sampleSegment": "OBX|nn|DT|STD099^Date of Initial Health Exam Associated with Case Report Health Event^PHINQUESTION||20120309||||||F"
              }
            },
            "defaultValue": {
              "value": "20120309"
            }
          },
          {
            "id": "df248291-65a3-4e45-8b0c-77a37752b6e4",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 4,
            "name": "Neurologic Manifestations",
            "description": "If event equals some stage of syphilis, does the patient have neurologic involvement based on current case definition",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_ClinicalManifestations_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD102",
                "identifier": "STD102",
                "messageContext": "OBX segment with\nOBX-3.1=STD102\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD102^Neurologic Manifestations^PHINQUESTION||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N",
              "label": "No"
            }
          },
          {
            "id": "47727d49-14f3-426b-b42b-6b23a932b124",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 5,
            "name": "Ocular Manifestations",
            "description": "Infection of any eye structure with T. pallidum, as evidenced by manifestations including posterior uveitis, panuveitis, anterior uveitis, optic neuropathy, and retinal vasculitis.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "SCT",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_ClinicalManifestations_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "",
                "identifier": "410478005",
                "messageContext": "OBX segment with\nOBX-3.1=410478005\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|410478005^Ocular Manifestations^SCT||PHC1476^Yes, Likely^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC1476"
            }
          },
          {
            "id": "f919292d-0d53-44a5-8463-e24038397747",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 6,
            "name": "Otic Manifestations",
            "description": "Infection of the cochleovestibular system with T. pallidum, as evidenced by manifestations including sensorineural hearing loss, tinnitus, and vertigo.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "N/A",
            "codeSystem": "CDCPHINVS",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_ClinicalManifestations_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "N/A",
                "identifier": "PHC1472",
                "messageContext": "OBX segment with\nOBX-3.1=PHC1472\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|PHC1472^Otic Manifestations^CDCPHINVS||PHC1477^Yes, Possible^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC1477"
            }
          },
          {
            "id": "d0ce9043-75ac-4b98-8aeb-44261d37030b",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 7,
            "name": "Late Clinical Manifestations",
            "description": "Late clinical manifestations of syphilis (tertiary syphilis) may include inflammatory lesions of the cardiovascular system, skin, bone, or other tissue. Certain neurologic manifestations (e.g., general paresis and tabes dorsalis) are late clinical manifestations of syphilis.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "codeSystem": "SCT",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_LateClincicalManifestation_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "",
                "identifier": "72083004",
                "messageContext": "OBX segment with\nOBX-3.1=72083004\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|72083004^Late Clinical Manifestations^SCT||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "988c13b8-4259-4099-80a8-61229dce9b8b",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 8,
            "name": "Treatment Date",
            "description": "Date treatment initiated for the condition that is the subject of this case report",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD105",
                "identifier": "STD105",
                "messageContext": "OBX segment with\nOBX-3.1=STD105\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|STD105^Treatment Date^PHINQUESTION||20120314||||||F"
              }
            },
            "defaultValue": {
              "value": "20120314"
            }
          },
          {
            "id": "edc69f73-102b-4424-ba5f-1bb249d628d6",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 9,
            "name": "HIV Status",
            "description": "HIV status at the  time of event",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_HIVStatus_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD106",
                "identifier": "55277-8",
                "messageContext": "OBX segment with\nOBX-3.1=55277-8\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|55277-8^HIV Status^LN||165816005^HIV positive^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "165816005"
            }
          },
          {
            "id": "4de5e71b-305e-4299-b478-02dadefb829b",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 10,
            "name": "Had Sex with a Male within the Past 12 Months",
            "description": "Had Sex with a Male within the Past 12 Months",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YNRD_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD107",
                "identifier": "STD107",
                "messageContext": "OBX segment with\nOBX-3.1=STD107\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD107^Had Sex with a Male within the Past 12 Months^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "6e2d7c9c-9fa7-4dd3-986a-9d6c8a4ae026",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 11,
            "name": "Had Sex with a Female within the Past 12 Months",
            "description": "Had Sex with a Female within the Past 12 Months",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YNRD_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD108",
                "identifier": "STD108",
                "messageContext": "OBX segment with\nOBX-3.1=STD108\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD108^Had Sex with a Female within the Past 12 Months^PHINQUESTION||UNK^unknown^NULLFL||||||F"
              }
            },
            "defaultValue": {
              "value": "UNK"
            }
          },
          {
            "id": "be3426d3-0ed2-4c1a-90b7-908ba264e378",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 12,
            "name": "Had Sex with an Anonymous Partner within the Past 12 Months",
            "description": "Had Sex with an Anonymous Partner within the Past 12 Months",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YNRD_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD109",
                "identifier": "STD109",
                "messageContext": "OBX segment with\nOBX-3.1=STD109\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD109^Had Sex with an Anonymous Partner within the Past 12 Months^PHINQUESTION||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "32315947-852f-4c2f-8c97-05c70962cc82",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 13,
            "name": "Had Sex with a Person Known to Him/Her to be an Intravenous Drug User (IDU) within the Past 12 Months",
            "description": "Had Sex with a Person Known to Him/Her to be an \"Intravenous Drug User (IDU)\" within th Past 12 Months",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YNRD_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD110",
                "identifier": "STD110",
                "messageContext": "OBX segment with\nOBX-3.1=STD110\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD110^Had Sex with a Person Known to Him/Her to be an Intravenous Drug User (IDU) within the Past 12 Months^PHINQUESTION||NASK^Did not ask^NULLFL||||||F"
              }
            },
            "defaultValue": {
              "value": "NASK"
            }
          },
          {
            "id": "f90f39f5-3042-4a29-9219-a46adf5f1bb2",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 14,
            "name": "Had Sex while Intoxicated and/or High on Drugs within the Past 12 Months",
            "description": "Had Sex while Intoxicated and/or High on Drugs within the Past 12 Months",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YNRD_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD111",
                "identifier": "STD111",
                "messageContext": "OBX segment with\nOBX-3.1=STD111\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD111^Had Sex while Intoxicated and/or High on Drugs within the Past 12 Months^PHINQUESTION||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "279e4a46-fb38-4ea0-b951-ce95025d6ff5",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 15,
            "name": "Exchanged Drugs/Money for Sex within the Past 12 Months",
            "description": "Exchanged Drugs/Money for Sex within the Past 12 Months",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YNRD_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD112",
                "identifier": "STD112",
                "messageContext": "OBX segment with\nOBX-3.1=STD112\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD112^Exchanged Drugs/Money for Sex within the Past 12 Months^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "9eaa0200-3c21-455f-b211-0c3ca9a433cb",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 16,
            "name": "Had Sex with a Person Who is Known to Her to Be an MSM within Past 12 Months",
            "description": "Had Sex with a Person Who is Known to Her to Be an MSM within Past 12 Months?  \nNOTE: For women only",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YNRD_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD113",
                "identifier": "STD113",
                "messageContext": "OBX segment with\nOBX-3.1=STD113\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD113^Had Sex with a Person Who is Known to Her to Be an MSM within Past 12 Months^PHINQUESTION||UNK^unknown^NULLFL||||||F"
              }
            },
            "defaultValue": {
              "value": "UNK"
            }
          },
          {
            "id": "169bcda6-0095-49cd-a85c-401a26b1ec98",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 17,
            "name": "Engaged in Injection Drug use Within Past 12 Months",
            "description": "Engaged in Injection Drug use Within Past 12 Months",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YNRD_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD114",
                "identifier": "STD114",
                "messageContext": "OBX segment with\nOBX-3.1=STD114\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD114^Engaged in Injection Drug use Within Past 12 Months^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "b6ec50f7-5b6d-47d9-824e-48efd6fc8cc4",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "483da77d-5469-458e-8163-843f947fa0f8",
            "ordinal": 18,
            "name": "Detection Method",
            "description": "How case patient first came to the attention of the health department for this condition",
            "category": "Epidemiology",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_DetectionMethod_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV159",
                "identifier": "INV159",
                "messageContext": "OBX segment with\nOBX-3.1=INV159\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV159^Detection Method^PHINQUESTION||OTH^Other^NULLFL||||||F"
              }
            },
            "defaultValue": {
              "value": "OTH"
            }
          }
        ]
      },
      {
        "id": "ba48385c-9a43-40e2-99f3-13891e6c946a",
        "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
        "ordinal": 4,
        "type": "RepeatParentChild",
        "name": "Injection or Non-Injection Drug use Section",
        "startingDescription": "START: Injection or Non-Injection Drug use Section (Repeating Group)",
        "endingDescription": "END: Injection or Non-Injection Drug use Section (Repeating Group)",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "b590d8b8-19fa-4db8-982a-b6f1b4d3de9f",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "ba48385c-9a43-40e2-99f3-13891e6c946a",
            "ordinal": 1,
            "name": "Drugs Used",
            "description": "During the past 12 months, which of the following injection or non-injection drugs have been used",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_DrugsUsed_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD115",
                "identifier": "STD115",
                "messageContext": "OBX segment with\nOBX-3.1=STD115\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|STD115^Drugs Used^PHINQUESTION|1|N0000166993^Crack^NDFRT||||||F"
              }
            },
            "defaultValue": {
              "value": "N0000166993"
            }
          },
          {
            "id": "e0659bc5-8c59-406a-8edd-0dca046eea36",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "ba48385c-9a43-40e2-99f3-13891e6c946a",
            "ordinal": 2,
            "name": "Drugs Used Indicator",
            "description": "Injection or non-injection drug use indicator",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YNRD_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD116",
                "identifier": "STD116",
                "messageContext": "OBX segment with\nOBX-3.1=STD116\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD116^Drugs Used Indicator^PHINQUESTION|1|Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          }
        ]
      },
      {
        "id": "47801eb7-1c34-4f82-932d-fd8a7529050e",
        "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
        "ordinal": 5,
        "type": "Single",
        "name": "Additional Epidemiological Questions",
        "startingDescription": "",
        "endingDescription": "",
        "shouldDisplayName": false,
        "elements": [
          {
            "id": "989ba218-3e4b-4f49-8263-fd317a0376fe",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "47801eb7-1c34-4f82-932d-fd8a7529050e",
            "ordinal": 1,
            "name": "Previous STD History",
            "description": "Does the patient have a history of ever having had an STD prior to the condition reported in this case report",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YNRD_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD117",
                "identifier": "STD117",
                "messageContext": "OBX segment with\nOBX-3.1=STD117\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD117^Previous STD History^PHINQUESTION||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "e9042676-7ec1-4b88-8a81-7395dae5de6b",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "47801eb7-1c34-4f82-932d-fd8a7529050e",
            "ordinal": 2,
            "name": "Been Incarcerated within the Past 12 Months",
            "description": "Been Incarcerated within the Past 12 Months",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YNRD_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD118",
                "identifier": "STD118",
                "messageContext": "OBX segment with\nOBX-3.1=STD118\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD118^Been Incarcerated within the Past 12 Months^PHINQUESTION||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "1e304aba-85eb-4490-a4f3-294b503db71d",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "47801eb7-1c34-4f82-932d-fd8a7529050e",
            "ordinal": 3,
            "name": "Have You Met Sex Partners through the Internet in the Last 12 Months",
            "description": "Did the patient use an online computer site to exchange messages by typing them onscreen to engage in conversation with other visitors to the site for the purpose of having sex",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YNRD_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD119",
                "identifier": "STD119",
                "messageContext": "OBX segment with\nOBX-3.1=STD119\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD119^Have You Met Sex Partners through the Internet in the Last 12 Months^PHINQUESTION||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N"
            }
          },
          {
            "id": "f7343fc1-ca12-42ff-9341-8893e9b65187",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "47801eb7-1c34-4f82-932d-fd8a7529050e",
            "ordinal": 4,
            "name": "Total Number of Sex Partners in the Last 12 months",
            "description": "Total number of sex partners that the case patient has had in the last 12 months.  Total partners equal the sum of all male, female, and transgender partners during the period",
            "comments": "",
            "status": "Final",
            "dataType": "Numeric",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD120",
                "identifier": "STD120",
                "messageContext": "OBX segment with\nOBX-3.1=STD120\nOBX-5.2=numeric value (see SN data type)",
                "dataType": "SN",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|SN|STD120^Total Number of Sex Partners in the Last 12 months^PHINQUESTION||^1||||||F"
              }
            },
            "defaultValue": {
              "value": "1"
            }
          },
          {
            "id": "a78bec37-9b74-4454-8b78-5f481cf216e8",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "47801eb7-1c34-4f82-932d-fd8a7529050e",
            "ordinal": 5,
            "name": "Clinician-Observed Lesion(s) Indicative of Syphilis",
            "description": "If condition = any stage of syphilis, report anatomic site(s) of clinician-observed lesion(s) (e.g., chancre, rash, condyloma lata) at time of initial exam or specimen collection.  Mark all that apply",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": true,
            "mayRepeat": "Y",
            "valueSetCode": "PHVS_ClinicianObservedLesions_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD121",
                "identifier": "STD121",
                "messageContext": "OBX segment with\nOBX-3.1=STD121\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..*]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "If sending multiple values for Clinician-Observed Lesion(s) Indicative of Syphilis, the values are sent in the same OBX-5 with the instances separated by a tilde (~).",
                "sampleSegment": "OBX|nn|CWE|STD121^Clinician-Observed Lesion(s) Indicative of Syphilis^PHINQUESTION||18911002^Penis^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "18911002"
            }
          },
          {
            "id": "5bf6dfa6-dcd1-4f66-bc4e-63e7c6c2cfcd",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "47801eb7-1c34-4f82-932d-fd8a7529050e",
            "ordinal": 6,
            "name": "Patient Refused to Answer Questions Regarding Number of Sex Partners",
            "description": "Patient Refused to Answer Questions Regarding Number of Sex Partners",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD888",
                "identifier": "STD888",
                "messageContext": "OBX segment with\nOBX-3.1=STD888\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD888^Patient Refused to Answer Questions Regarding Number of Sex Partners^PHINQUESTION||Y^Yes^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "Y"
            }
          },
          {
            "id": "328835e8-6995-45f6-b846-bb7b2b5d696c",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "47801eb7-1c34-4f82-932d-fd8a7529050e",
            "ordinal": 7,
            "name": "Unknown Number of Sex Partners in Last 12 Months",
            "description": "Unknown Number of Sex Partners in Last 12 Months",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD999",
                "identifier": "STD999",
                "messageContext": "OBX segment with\nOBX-3.1=STD999\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD999^Unknown Number of Sex Partners in Last 12 Months^PHINQUESTION||UNK^Unknown^NULLFL||||||F"
              }
            },
            "defaultValue": {
              "value": "UNK"
            }
          },
          {
            "id": "cab8bbf7-e251-43d3-9246-5f0b6d282f0c",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "47801eb7-1c34-4f82-932d-fd8a7529050e",
            "ordinal": 8,
            "name": "HIV Status Documented Through eHARS Record Search",
            "description": "Was the HIV status of this case investigated through search of eHARS",
            "comments": "O is listed in the MMG on the website",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV892",
                "identifier": "INV892",
                "messageContext": "OBX segment with\nOBX-3.1=INV892\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV892^HIV Status Documented Through eHARS Record Search^PHINQUESTION||UNK^Unknown^NULLFL||||||F"
              }
            },
            "defaultValue": {
              "value": "UNK"
            }
          },
          {
            "id": "ff34ab62-1e37-4e50-bd7f-63b5ade7da11",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "47801eb7-1c34-4f82-932d-fd8a7529050e",
            "ordinal": 9,
            "name": "eHARS State no (i.e. State Number)",
            "description": "State number from eHARS registry for HIV+ cases",
            "comments": "O is listed in the MMG on the website",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV893",
                "identifier": "INV893",
                "messageContext": "OBX segment with\nOBX-3.1=INV893\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|INV893^eHARS State no (i.e. State Number)^PHINQUESTION||any string up to 199 characters||||||F"
              }
            },
            "defaultValue": {
              "value": "any string up to 199 characters"
            }
          },
          {
            "id": "d346bef2-7a12-4efd-a65a-e445ea777a02",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "47801eb7-1c34-4f82-932d-fd8a7529050e",
            "ordinal": 10,
            "name": "Transmission Category (eHARS)",
            "description": "Mode of exposure from eHARS for HIV+ cases",
            "comments": "O is listed in the MMG on the website",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "O",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_TransmissionCategory_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV894",
                "identifier": "INV894",
                "messageContext": "OBX segment with\nOBX-3.1=INV894\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV894^Transmission Category (eHARS)^PHINQUESTION||PHC1145^Adult MSM & IDU^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC1145"
            }
          },
          {
            "id": "0317c801-3fa0-4ca8-88a3-180a5e9975e7",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "47801eb7-1c34-4f82-932d-fd8a7529050e",
            "ordinal": 11,
            "name": "Case Sampled for Enhanced Investigation",
            "description": "Was this case selected by reporting jurisdiction for enhanced investigation",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_YesNoUnknown_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV895",
                "identifier": "INV895",
                "messageContext": "OBX segment with\nOBX-3.1=INV895\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "NO",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV895^Case Sampled for Enhanced Investigation^PHINQUESTION||N^No^HL70136||||||F"
              }
            },
            "defaultValue": {
              "value": "N",
              "label": "No"
            }
          }
        ]
      },
      {
        "id": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
        "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
        "ordinal": 6,
        "template": {
          "id": "ac8c96d4-d222-4e9a-b479-5815eb5e6e65",
          "internalVersion": 1,
          "name": "Epi Lab Block",
          "status": "U"
        },
        "type": "RepeatParentChild",
        "name": "Lab Interpretive Section (Repeating Group)",
        "startingDescription": "START: Lab Interpretive Section (Repeating Group)",
        "endingDescription": "END: Lab Interpretive Section (Repeating Group)",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "46235f48-c656-4118-9589-cfbbc8b4d65b",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 1,
            "name": "Test Type",
            "description": "Epidemiologic interpretation of the type of test(s) performed for this case.",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_LabTestType_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV290",
                "identifier": "INV290",
                "messageContext": "OBX segment with\nOBX-3.1=INV290\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "PRIMARY/PARENT",
                "implementationNotes": "Send the lab value that is associated or most contributed to the diagnosis.\n\nOBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|INV290^Test Type^PHINQUESTION|1|20507-0^Rapid Plasma Reagin (RPR)^LN||||||F"
              }
            },
            "defaultValue": {
              "value": "20507-0"
            }
          },
          {
            "id": "ce95e33c-b803-4428-bd19-99e58bde8945",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 2,
            "name": "Test Result",
            "description": "Epidemiologic interpretation of the results of the test(s) performed for this case. This is a qualitative test result.  E.g. positive, detected, negative.",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_LabTestResultQualitative_NND",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "INV291",
                "identifier": "INV291",
                "messageContext": "OBX segment with\nOBX-3.1=INV291\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|INV291^Test Result^PHINQUESTION|1|11214006^Reactive^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "11214006"
            }
          },
          {
            "id": "d6a1d582-baf1-46b8-923f-d4b901012f17",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 3,
            "name": "Nontreponemal serologic syphilis test result",
            "description": "Nontreponemal serologic syphilis test result. This is a coded quantitative test result.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_NonTreponemalTestResult_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "STD123",
                "identifier": "STD123",
                "messageContext": "OBX segment with\nOBX-3.1=STD123\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|STD123^Nontreponemal serologic syphilis test result^PHINQUESTION|1|STD1^1:1^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "STD1"
            }
          },
          {
            "id": "048e8187-1aa0-43cc-9629-fc6206378472",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 4,
            "name": "Test Result Quantitative",
            "description": "Quantitative Test Result Value",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB628",
                "identifier": "LAB628",
                "messageContext": "OBX segment with\nOBX-3.1=LAB628\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|LAB628^Test Result Quantitative^PHINQUESTION|1|1:16||||||F"
              }
            },
            "defaultValue": {
              "value": "1:16"
            }
          },
          {
            "id": "95ef7134-f721-4a42-ad6a-455e35c53195",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 5,
            "name": "Units of Measure",
            "description": "Units of measure for the Quantitative Test Result Value",
            "category": "Laboratory",
            "comments": "OBX|nn|CWE|LAB115^Units of Measure^PHINQUESTION|1|{titer}||||||F",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_UnitsOfMeasure_CDC",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB115",
                "identifier": "LAB115",
                "messageContext": "OBX segment with\nOBX-3.1=LAB115\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|LAB115^Units of Measure^PHINQUESTION|1|{titer}^titer^UCUM||||||F"
              }
            },
            "defaultValue": {
              "value": "{titer}"
            }
          },
          {
            "id": "140693c4-ba0e-450e-a896-c524698bb98a",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 6,
            "name": "Date of lab result",
            "description": "Date result sent from Reporting Laboratory",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB167",
                "identifier": "82772-5",
                "messageContext": "OBX segment with\nOBX-3.1=82772-5\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|82772-5^Date of lab result^LN|1|20150101||||||F"
              }
            },
            "defaultValue": {
              "value": "20150101"
            }
          },
          {
            "id": "926fb037-04c3-4dbf-8e5d-da5adaba04ba",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 7,
            "name": "Specimen Source",
            "description": "Anatomic site or specimen type from which positive lab specimen was collected",
            "category": "Laboratory",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_SpecimenSource_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB165",
                "identifier": "31208-2",
                "messageContext": "OBX segment with\nOBX-3.1=31208-2\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|31208-2^Specimen Source^LN|1|PHC1164^Lesion-Extra Genital^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "PHC1164"
            }
          },
          {
            "id": "467916c1-7749-4db7-9440-6c6e3aa048d9",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "ad29daaa-13c2-4402-a3fa-387aa50beea4",
            "ordinal": 8,
            "name": "Specimen Collection Date",
            "description": "Date of collection of initial laboratory specimen used for diagnosis of health event reported in this case report. PREFERRED date for assignment of MMWR week.  First date in hierarchy of date types associated with case report/event",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "LN",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LAB163",
                "identifier": "33882-2",
                "messageContext": "OBX segment with\nOBX-3.1=33882-2\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "CHILD",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|33882-2^Specimen Collection Date^LN|1|20140105||||||F"
              }
            },
            "defaultValue": {
              "value": "20140105"
            }
          }
        ]
      },
      {
        "id": "2103413b-8d93-4894-8e59-649354daf5da",
        "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
        "ordinal": 7,
        "template": {
          "id": "cf2d071e-818d-4cae-aa8b-449cb5a13ae5",
          "internalVersion": 1,
          "name": "Antimicrobial Epi Lab Block",
          "status": "U"
        },
        "type": "Repeat",
        "name": "Antimicrobial Susceptibility Data Element Block Repeating Group",
        "startingDescription": "START: Antimicrobial Susceptibility Data Element Block Repeating Group (for Gonorrhea only)",
        "endingDescription": "END: Antimicrobial Susceptibility Data Element Block Repeating Group (for Gonorrhea only)",
        "shouldDisplayName": true,
        "elements": [
          {
            "id": "dbf7b23d-b483-4345-9776-63fdaabc908a",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "2103413b-8d93-4894-8e59-649354daf5da",
            "ordinal": 1,
            "name": "Microorganism Identified in Isolate",
            "description": "Pathogen /Organism Identified in Isolate.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_OrganismIdentifiedAST_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LABAST1",
                "identifier": "LABAST1",
                "messageContext": "OBX segment with\nOBX-3.1=LABAST1\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|LABAST1^Microorganism Identified in Isolate^PHINQUESTION|1|68704007^Neisseria gonorrhoeae^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "68704007"
            }
          },
          {
            "id": "772e615e-cce7-413e-9aff-84233c28a19c",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "2103413b-8d93-4894-8e59-649354daf5da",
            "ordinal": 2,
            "name": "Isolate Identifier",
            "description": "Isolate identifier unique for each isolate within laboratory.",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LABAST2",
                "identifier": "LABAST2",
                "messageContext": "OBX segment with\nOBX-3.1=LABAST2\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|LABAST2^Isolate Identifier^PHINQUESTION|1|ISLT-12466||||||F"
              }
            },
            "defaultValue": {
              "value": "ISLT-12466"
            }
          },
          {
            "id": "e254457d-28e5-423b-a8ba-b701855bc8e0",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "2103413b-8d93-4894-8e59-649354daf5da",
            "ordinal": 3,
            "name": "Antimicrobial Susceptibility Specimen Type",
            "description": "Antimicrobial Susceptibility Specimen Type (e.g. Exudate, Blood, Serum, Urine)",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_SpecimenTypeAST_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LABAST3",
                "identifier": "LABAST3",
                "messageContext": "OBX segment with\nOBX-3.1=LABAST3\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|LABAST3^Antimicrobial Susceptibility Specimen Type^PHINQUESTION|1|119393003^Specimen from urethra^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "119393003"
            }
          },
          {
            "id": "fa8d2bec-ddca-4c07-9f9d-075dc202303b",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "2103413b-8d93-4894-8e59-649354daf5da",
            "ordinal": 4,
            "name": "Antimicrobial Specimen Collection Site",
            "description": "Anatomic site where the specimen was collected (e.g. Urethra, Throat, Nasopharynx)",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_SpecimenCollectionSiteAST_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LABAST4",
                "identifier": "LABAST4",
                "messageContext": "OBX segment with\nOBX-3.1=LABAST4\nOBX-4=obs sub-ID\nOBX-5=value from value set\nOBX-5.9=string up to 199 characters",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "OBX-5.9 MAY contain \"Other, please specify\" text response.",
                "sampleSegment": "OBX|nn|CWE|LABAST4^Antimicrobial Specimen Collection Site^PHINQUESTION|1|13648007^Urethra^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "13648007"
            }
          },
          {
            "id": "40d24df2-6a7e-4a87-bdf5-0409f8a90925",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "2103413b-8d93-4894-8e59-649354daf5da",
            "ordinal": 5,
            "name": "Antimicrobial Susceptibility Specimen Collection Date",
            "description": "Antimicrobial Susceptibility Specimen Collection Date",
            "comments": "",
            "status": "Final",
            "dataType": "Date",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LABAST5",
                "identifier": "LABAST5",
                "messageContext": "OBX segment with\nOBX-3.1=LABAST5\nOBX-4=obs sub-ID\nOBX-5=date",
                "dataType": "DT",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "For unknown date, OBX-5 MAY be populated with '99999999'.",
                "sampleSegment": "OBX|nn|DT|LABAST5^Antimicrobial Susceptibility Specimen Collection Date^PHINQUESTION|1|20170108||||||F"
              }
            },
            "defaultValue": {
              "value": "20170108"
            }
          },
          {
            "id": "6cd95048-3068-469c-ab82-0997f792db83",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "2103413b-8d93-4894-8e59-649354daf5da",
            "ordinal": 6,
            "name": "Antimicrobial Susceptibility Test Type",
            "description": "Antimicrobial Susceptibility Test Type would includes drugs, enzymes, PCR and other genetic tests to detect the resistance against specific drugs.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_SusceptibilityTestType_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LABAST6",
                "identifier": "LABAST6",
                "messageContext": "OBX segment with\nOBX-3.1=LABAST6\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|LABAST6^Antimicrobial Susceptibility Test Type^PHINQUESTION|1|18866-4^Azithromycin [Susceptibility]^LN||||||F"
              }
            },
            "defaultValue": {
              "value": "18866-4"
            }
          },
          {
            "id": "5be36da9-45bf-420e-bbce-8f23bf1c4a0f",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "2103413b-8d93-4894-8e59-649354daf5da",
            "ordinal": 7,
            "name": "Antimicrobial Susceptibility Test Method",
            "description": "Antimicrobial Susceptibility Test Method (e.g. E-Test, MIC, Disk Diffusion)",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_SusceptibilityTestMethod_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LABAST7",
                "identifier": "LABAST7",
                "messageContext": "OBX segment with\nOBX-3.1=LABAST7\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|LABAST7^Antimicrobial Susceptibility Test Method^PHINQUESTION|1|88629000^Agar dilution/MIC^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "88629000"
            }
          },
          {
            "id": "c9afbc31-418c-44d2-8ea9-b0a6868aa855",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "2103413b-8d93-4894-8e59-649354daf5da",
            "ordinal": 8,
            "name": "Antimicrobial Susceptibility Test Interpretation",
            "description": "Antimicrobial Susceptibility Test Interpretation (e.g. Susceptible, Resistant, Intermediate, Not tested)",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_SusceptibilityTestInterpretation_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LABAST8",
                "identifier": "LABAST8",
                "messageContext": "OBX segment with\nOBX-3.1=LABAST8\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|LABAST8^Antimicrobial Susceptibility Test Interpretation^PHINQUESTION|1|30714006^Resistant^SCT||||||F"
              }
            },
            "defaultValue": {
              "value": "30714006"
            }
          },
          {
            "id": "45d0ffe9-3f1b-431d-b3b1-4909dcc24a90",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "2103413b-8d93-4894-8e59-649354daf5da",
            "ordinal": 9,
            "name": "Antimicrobial Susceptibility Test Result Quantitative Value",
            "description": "Antimicrobial Susceptibility Test Result Quantitative Value (e.g. Quantitative MIC values, Disk Diffusion size in mm)",
            "comments": "",
            "status": "Final",
            "dataType": "Text",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LABAST9",
                "identifier": "LABAST9",
                "messageContext": "OBX segment with\nOBX-3.1=LABAST9\nOBX-4=obs sub-ID\nOBX-5=string up to 199 characters",
                "dataType": "ST",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|ST|LABAST9^Antimicrobial Susceptibility Test Result Quantitative Value^PHINQUESTION|1|>64.0||||||F"
              }
            },
            "defaultValue": {
              "value": ">64.0"
            }
          },
          {
            "id": "4bf027dd-6aa5-4dfa-ba79-cfd949e08509",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "2103413b-8d93-4894-8e59-649354daf5da",
            "ordinal": 10,
            "name": "Antimicrobial Susceptibility Test Result Numerical Value Units",
            "description": "Antimicrobial Susceptibility Test Result Numerical Value Units (e.g. microgram/ml, mm)",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_SusceptibilityTestResultUnits_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LABAST10",
                "identifier": "LABAST10",
                "messageContext": "OBX segment with\nOBX-3.1=LABAST10\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|LABAST10^Antimicrobial Susceptibility Test Result Numerical Value Units^PHINQUESTION|1|ug/mL^mcg/mL^UCUM||||||F"
              }
            },
            "defaultValue": {
              "value": "ug/mL"
            }
          },
          {
            "id": "5c1c2737-b691-4b0c-a6c7-ca4f87b6b01a",
            "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
            "guideInternalVersion": 15,
            "blockId": "2103413b-8d93-4894-8e59-649354daf5da",
            "ordinal": 11,
            "name": "Antimicrobial Susceptibility Test Result Coded Quantitative",
            "description": "Antimicrobial Susceptibility Test Result - Coded Quantitative. List of coded values (i.e. valid dilutions) to represent the antimicrobial susceptibility test result.",
            "comments": "",
            "status": "Final",
            "dataType": "Coded",
            "businessRules": "",
            "isUnitOfMeasure": false,
            "legacyCodeSystem": "PHINQUESTION",
            "codeSystem": "PHINQUESTION",
            "legacyPriority": "P",
            "priority": "U",
            "isRepeat": false,
            "mayRepeat": "N",
            "valueSetCode": "PHVS_SusceptibilityTestResultQuantitative_STD",
            "mappings": {
              "hl7v251": {
                "legacyIdentifier": "LABAST11",
                "identifier": "LABAST11",
                "messageContext": "OBX segment with\nOBX-3.1=LABAST11\nOBX-4=obs sub-ID\nOBX-5=value from value set",
                "dataType": "CWE",
                "segmentType": "OBX",
                "obrPosition": 1,
                "fieldPosition": 5,
                "componentPosition": -1,
                "usage": "RE",
                "cardinality": "[0..1]",
                "literalFieldValues": {},
                "repeatingGroupElementType": "YES",
                "implementationNotes": "",
                "sampleSegment": "OBX|nn|CWE|LABAST11^Antimicrobial Susceptibility Test Result Coded Quantitative^PHINQUESTION|1|MIC64^64.0^CDCPHINVS||||||F"
              }
            },
            "defaultValue": {
              "value": "MIC64"
            }
          }
        ],
        "expanded": true
      },
      {
        "id": "ad7bc984-9882-45c1-acd9-2460497bbe24",
        "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
        "ordinal": 8,
        "type": "Single",
        "name": "END: Case Related",
        "startingDescription": "END: Case Related",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": []
      },
      {
        "id": "f87db6af-065a-480d-b854-925095e5447c",
        "guideId": "34a39c41-ebc1-4642-8d00-e4a31466a1a2",
        "ordinal": 9,
        "type": "Single",
        "name": "END: EPIDEMIOLOGIC INFORMATION SECTION",
        "startingDescription": "END: EPIDEMIOLOGIC INFORMATION SECTION",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": []
      },
      {
        "id": "88a79779-b98e-45db-89b2-5646270fdec0",
        "guideId": "6b7d2139-a669-401d-b1af-a4df199322e1",
        "ordinal": 10,
        "template": {
          "id": "6b7d2139-a669-401d-b1af-a4df199322e1",
          "internalVersion": 1,
          "name": "END Template",
          "status": "L",
          "blockId": "88a79779-b98e-45db-89b2-5646270fdec0"
        },
        "type": "Single",
        "name": "END: EPIDEMIOLOGIC INFORMATION SECTION",
        "startingDescription": "The [Optional/Preferred] Laboratory Repeating Group is located in the document titled “Laboratory Template” in the “MMG Related Documentation” section of the HL7 Case Notification Resource Center at https://wwwn.cdc.gov/nndss/case-notification/related-documentation.html.",
        "endingDescription": "",
        "shouldDisplayName": true,
        "elements": []
      }
    ],
    "columns": [
      {
        "label": "Category",
        "path": "$.category"
      },
      {
        "label": "Data Element (DE) Name",
        "path": "$.name"
      },
      {
        "label": "DE Identifier Sent in HL7 Message",
        "path": "$.mappings.hl7v251.identifier"
      },
      {
        "label": "DE Code System",
        "path": "$.codeSystem"
      },
      {
        "label": "Data Element Description",
        "path": "$.description"
      },
      {
        "label": "Data Type",
        "path": "$.dataType"
      },
      {
        "label": "CDC Priority",
        "path": "$.legacyPriority"
      },
      {
        "label": "May Repeat",
        "path": "$.mayRepeat"
      },
      {
        "label": "Value Set Name (VADS Hyperlink)",
        "path": "$.valueSetLink"
      },
      {
        "label": "Value Set Code",
        "path": "$.valueSetCode"
      },
      {
        "label": "HL7 Message Context",
        "path": "$.mappings.hl7v251.messageContext"
      },
      {
        "label": "HL7 Data Type",
        "path": "$.mappings.hl7v251.dataType"
      },
      {
        "label": "HL7 Usage",
        "path": "$.mappings.hl7v251.usage"
      },
      {
        "label": "HL7 Cardinality",
        "path": "$.mappings.hl7v251.cardinality"
      },
      {
        "label": "HL7 Implementation Notes",
        "path": "$.mappings.hl7v251.implementationNotes"
      },
      {
        "label": "Repeating Group Element",
        "path": "$.mappings.hl7v251.repeatingGroupElementType"
      },
      {
        "label": "Sample Segment",
        "path": "$.mappings.hl7v251.sampleSegment"
      },
      {
        "label": "Comments",
        "path": "$.comments"
      }
    ],
    "templates": [
      {
        "id": "6b7d2139-a669-401d-b1af-a4df199322e1",
        "internalVersion": 1,
        "name": "END Template",
        "status": "L"
      },
      {
        "id": "6b7d2139-a669-401d-b1af-a4df199322e1",
        "internalVersion": 1,
        "name": "END Template",
        "status": "L"
      }
    ]
  }",
                //string mmg when mmg.Contains("REPLACEME") => "replaceme.json",
            };

            return Base64Decode(content);
        }

        public static string Base64Decode(string base64EncodedData)
        {
            var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);
            return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
        }
    }
}
